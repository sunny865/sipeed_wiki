{"/hardware/zh/tang/Tang-Nano-9K/Nano-9K.html": {"title": "Tang Nano 9K", "content": "# Tang Nano 9K\n\n>  编辑时间 2022年1月13日\n\n## 简介\n\nTang Nano 9K 是基于高云半导体 GW1NR-9 FPGA芯片设计的精简型开发板。它搭载的HDMI连接器、RGB接口屏幕连接器、SPI屏幕连接器、SPI FLASH和6个LED使得用户可以方便且快速地进行FPGA验证，RISC-V软核验证和功能样机验证。GW1NR-9拥有的8640 LUT4 逻辑单元除了可以用来设计各种复杂的逻辑电路，还可以运行完整的PicoRV软核，满足了用户学习FPGA、验证软核和深度设计的各种需求。\n\n## 产品参数\n\n| 类别 |数值 |\n| --------------------------------- | ------------------------------------------------------------ |\n| 逻辑单元(LUT4)                    | 8640                                                         |\n| 寄存器(FF)                        | 6480                                                         |\n| 分布式静态随机存储器  <br>SSRAM(bits) | 17280                                                        |\n| 块状静态随机存储器  <br>B-SRAM(bits)  | 468K                                                         |\n| 块状静态随机存储器数目<br>BSRAM（个） | 26                                                           |\n| 用户闪存(bits)                    | 608K                                                         |\n| PSRAM(bits)                       | 64M                                                          |\n| 高性能DSP模块                     | 支持9x9,18x18,36x36bit的乘法运算和54bit累加器                |\n| 乘法器  <br>(18 x 18 Multiplier)      | 20                                                           |\n| SPI FLASH                         | 32M-bits                                                  |\n| 灵活的PLL资源                     | 2个锁相环（PLLs）                                            |\n| 显示屏幕接口                      | HDMI接口, SPI屏幕接口和RGB屏幕接口                           |\n| 调试器                            | 板载BL702芯片，为GW1NR-9提供USB-JTAG下载和USB-UART串口打印功能 |\n| IO                                | • 支持4mA、8mA、16mA、24mA等驱动能力   <br>• 对每个I/O提供独立的Bus Keeper、上拉/下拉电阻及Open Drain输出选项 |\n| 连接器                            | TF卡座子, 2x24P  2.54mm 排针焊盘                             |\n| 按键                              | 2个用户可编程按键                                            |\n| LED                               | 板载6个可编程LED                                             |\n\n### 板载功能框图\n\n![Generated](./assets/clip_image008.jpg)\n\n### 板子引脚图\n\n![Generated](./assets/clip_image010.gif)\n\n## 前代对比\n\nTang Nano 9K 是 Sipeed 所推出的第五款 FPGA 开发板，与在售前代产品参数对比如下：\n\n| 版型               | Tang Nano 1K                             | Tang Nano 4K                             | Tang Nano 9K                                            |\n| :------------------ | :--------------------------------------- | :--------------------------------------- | :------------------------------------------------------ |\n| 外观图          | <img src=\"./../../../zh/tang/Tang-Nano/assets/clip_image002.gif\" width=\"180\" > | <img src=\"./../../../zh/tang/Tang-Nano/assets/clip_image004.gif\" width=\"180\" > | <img src=\"./../../../zh/tang/Tang-Nano/assets/clip_image006.gif\" width=\"180\" >                |\n| 逻辑单元 (LUT4)  | 1152                                     | 4608                                     | 8640                                                    |\n| 硬核处理器 |                                         | Cortex M3                                |                                                        |\n| 板载晶振  | 27MHZ                                    | 27MHZ                                    | 27MHZ                                                   |\n| 屏幕接口   | RGB 屏幕接口                   | HDMI 接口                                    | HDMI 接口, <br>RGB 屏幕接口,<br>SPI 屏幕接口 |\n| 摄像头接口              |                                        | 默认 OV2640                           |                                                        |\n| 外部存储  | 仅预留焊盘                       | 32Mbits SPI flash                        | 32Mbits SPI flash                                       |\n| TF 卡槽        |                                         |                                         | 有                                                     |\n| 下载器            | 板载 USB-JTAG                         | 板载 USB-JTAG                         | 板载 USB-JTAG & USB-UART                             |\n\n## 适用人群\n\n| 用法     | FPGA                             | MCU                                | FPGA+MCU                     |\n| :---- | :---------- | :------------- | :----------------- |\n| 语言     | Verilog HDL/Verilog         | C/C++               | Verilog HDL/Verilog ，  C/C++                |\n| 简介     | 上板验证用户HDL | 用户将软核的比特流文件下载到芯片后可将<br>GW1NR-9当做普通的MCU来使用  | 烧入软核后可以进行双核开发 |\n| 适用人群 | 初学者，FPGA开发者        | RISC-V开发者，Cortex-M开发者          | 资深软硬件工程师             |\n\n## 上手指引\n\n1. 下载我们打包好的用户指南文档：[下载站](https://dl.sipeed.com/shareURL/TANG/Nano%209K/6_Chip_Manual/CN/%E9%80%9A%E7%94%A8%E6%8C%87%E5%BC%95) （下文提到的所有pdf文件都在这里）\n\n2. 安装IDE和填写正确的License：[点击这里](https://wiki.sipeed.com/soft/Tang/zh/Tang-Nano-Doc/get_started/install-the-ide.html)\n\n3. 阅读第一步下载的文件里面的：[SUG100-2.6_Gowin云源软件用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG100-2.5_Gowin%E4%BA%91%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n\n4. 阅读这个[教程](./examples/LED.html)完成点灯实验。\n\n    建议新手在完成这一步之后，自己重新独立新建项目、编写代码，完成这个实验，并且按自己的想法修改点灯程序，增强对FPGA和硬件描述语言的理解。\n    建议在这个过程阅读以下内容，阅读完才进入下一步：\n    - Verilog代码规范（自行搜索，从初学就培养良好的代码规范是非常必要的）\n\n下面的这些内容对于初学者来说是非常有用的，对未来深入学习 FPGA 很有帮助。\n\n   - [SUG100-2.6_Gowin云源软件用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG100-2.6_Gowin%E4%BA%91%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n   - [SUG949-1.1_Gowin_HDL编码风格用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG949-1.1_Gowin_HDL%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n   - <a href=\"http://cdn.gowinsemi.com.cn/UG286-1.9.1_Gowin%E6%97%B6%E9%92%9F%E8%B5%84%E6%BA%90(Clock)%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf\">UG286-1.9.1_Gowin时钟资源(Clock)用户指南.pdf</a>\n   - [SUG940-1.3_Gowin设计时序约束用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG940-1.3_Gowin%E8%AE%BE%E8%AE%A1%E6%97%B6%E5%BA%8F%E7%BA%A6%E6%9D%9F%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n   - [SUG502-1.3_Gowin_Programmer用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG502-1.3_Gowin_Programmer%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n   - [SUG114-2.5_Gowin在线逻辑分析仪用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG114-2.5_Gowin%E5%9C%A8%E7%BA%BF%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90%E4%BB%AA%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n\n上面的都已经打包进了下载站[点我跳转](https://dl.sipeed.com/shareURL/TANG/Nano%209K/6_Chip_Manual/CN/%E9%80%9A%E7%94%A8%E6%8C%87%E5%BC%95)。可以点击压缩包全都下载下来\n\n其他学习链接：\n+ 在线免费教程：[菜鸟教程](https://www.runoob.com/w3cnote/verilog-tutorial.html)（学习Verilog）\n+ 在线免费FPGA教程：[Verilog](https://www.asic-world.com/verilog/index.html)\n+ 在线高云半导体官方视频教程：[点击这里](http://www.gowinsemi.com.cn/video_complex.aspx?FId=n15:15:26)\n\n1. 按照这个[教程](./examples/LCD.html)进行5寸RGB屏驱动实验（其他尺寸屏幕自行修改一下）。\n   如果用户自行无法完成这个实验，可以下载我们[9K例程](https://github.com/sipeed/TangNano-9K-example)（适配9K板子+5寸屏）查看哪个步骤没做正确\n\n    注意：屏幕接线时需要注意排线的1脚对应连接器旁的1脚丝印\n\n    需要阅读的文档：\n    - rPLL IP核的说明文档：在IDE里>Tools>IP Core Generator>Hard Module>CLOCK>rPLL>点击弹出界面右下角的Help按键就会弹出说明文档\n        <details>\n        <summary><font color=\"#4F84FF\">点开查看说明位置</font></summary>\n        <img src=\"./../assets/ip-reference.png\">\n        </details>\n    - SUG284-2.1E_Gowin IP Core Generator User Guide.pdf \n    - [5寸屏规格书](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/LCD_Datasheet/5.0inch_LCD_Datashet%20_RGB_.pdf)：(主要是获取CLK是33.3Mhz这个信息)\n\n2. 驱HDMI屏讲解（待更新）\n\n## 例程汇总\n\n访问 [相关例程](./../Tang-Nano-Doc/examples.html)\n\n## 硬件资料汇总\n\n规格书、原理图、尺寸图、3D文件等均可在这里找到：[点击这里](https://dl.sipeed.com/shareURL/TANG/Nano%209K)\n\n## 注意事项\n\n1. 如果有什么疑问，欢迎加群 `834585530`, 或者去[论坛](bbs.sipeed.com)发帖\n   \n2. 下载 FPGA 是要求使用 [这里](https://dl.sipeed.com/shareURL/TANG/programmer) 的 Programmer 软件。不然有极大概率不能下载固件到板子。\n   \n3. 有问题的话先去 [常见问题](./../Tang-Nano-Doc/questions.html) 自查，通常来说使用 [这里](https://dl.sipeed.com/shareURL/TANG/programmer) 的 Programmer 软件能解决 99% 问题。\n\n4. 避免使用JTAG、MODE、DONE等引脚。如果一定要使用这些引脚，请查看 [UG292-1.0原理图指导手册](http://cdn.gowinsemi.com.cn/UG293-1.0_GW1NZ%E7%B3%BB%E5%88%97FPGA%E4%BA%A7%E5%93%81%E5%8E%9F%E7%90%86%E5%9B%BE%E6%8C%87%E5%AF%BC%E6%89%8B%E5%86%8C.pdf)\n\n5. 请注意避免静电打到PCBA上；接触PCBA之前请把手的静电释放掉\n\n6. 每个GPIO的工作电压已经在原理图中标注出来，请不要让GPIO的实际工作的电压超过额定值，否则会引起PCBA的永久性损坏\n\n7. 在连接FPC软排线的时候，请确保排线无偏移、完整地插入到排线中，且线序正确没有接反\n\n8. 请在上电过程中，避免任何液体和金属触碰到PCBA上的元件的焊盘，否则会导致短路，烧毁PCBA"}, "/hardware/zh/tang/Tang-Nano-9K/Nano_9K_examples/LCD.html": {"title": "驱动RGB屏幕", "content": "---\ntitle: 驱动RGB屏幕\n---\n\n> 编辑于2022.04.12\n\n## 先介绍时序\n\nRGB LCD 显示协议和 VGA 类似，通信都有专用的行同步、场同步信号线。它们的主要区别是前者传输用的是数字信号，后者传输走的是模拟信号。\n\n下面就介绍 VGA 的时序\n\n![](./../../assets/examples/lcd_pjt_1.png)\n\n上图分别是 VGA 在数据传输中的行同步、场同步时序\n\n从时序图中可以看出，不论是显示一行数据还是一列数据，都需要一个同步(sync)信号，数据的传输需要在两个同步信号的脉冲之间完成\n\n每一行的数据包括显示前沿(back porch)、有效数据(active video)、显示后沿(front porch)\n\n其中的有效数据就是我们常说的分辨率，而显示前后沿的参数需要参考具体的分辨率与帧数进行设置，相关参数可以参考典型参数，链接在此： http://www.tinyvga.com/vga-timing\n\n这块屏幕的控制时序略有不同，相关参数的设置可以查看[规格书](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/EN/LCD_Datasheet/5.0inch_LCD_Datashet%20_RGB_.pdf)\n\n下面提供了 LCD 相关时序的截图\n\n![](./../../assets/examples/lcd_pjt_2.png)\n\n![](./../../assets/examples/lcd_pjt_3.png)\n\n上面一张图是时序中的参数表，下面的图是时序图\n\n从时序图中看出，这块屏幕可以不用设置前后沿，可以只设置消影(blanking)时间，通过实际的程序证明，两种方式都是可以的\n\n## 新建工程\n\n具体新建工程的方法可以参考[点灯文章](LED.html)\n\n## 生成屏幕时钟\n\n- 这里需要用到高云半导体官方的IP核\n\n### rPll\n\n板载的晶振时钟为 27MHz ，但是我们的屏幕要求 33.3MHZ 的时钟，所以我们需要使用对应的ip核来生成相应的时钟\n\n这里需要使用到 `IP Core Generate` ，位置在 Tools -> IP Core Generate\n\n![](./../../Tang-Nano-1K/assets/Gowin_IP_rpll.png)\n\n双击 `rpll` ，在弹出窗口 language 选择 Verilog ，CLKIN 为 27MHz ，CLKOUT 为  33.00MHz。\n\n![](./../../Tang-Nano-1K/assets/lcd_rpll.png)\n\n点击ok后提示是否需要添加到当前工程，此时应当选择确定\n\n![](./../../Tang-Nano-1K/examples/led/assets/add_ip_file_in_project.png)\n\n接着会出现一个例化的tmp文件，用来例化所设置的ip。比如下图中例子\n\n![](./../../Tang-Nano/examples/led/assets/ip_examples.png)\n\n## 屏幕驱动代码\n\n- **首先新建一个额外的verilog文件来保存下面要编写的代码**\n\n### 端口定义\n\n首先需要先定义出驱动屏幕所需要的端口\n\n```verilog\nmodule VGAMod\n(\n    input                   CLK,\n    input                   nRST,\n\n    input                   PixelClk,\n\n    output                  LCD_DE,\n    output                  LCD_HSYNC,\n    output                  LCD_VSYNC,\n\n\toutput          [4:0]   LCD_B,\n\toutput          [5:0]   LCD_G,\n\toutput          [4:0]   LCD_R\n);\n```\n\n本例程使用RGB565作为驱动方式；\n\n### 时序常量\n\n接着定义出时序图上所要求的常量\n\n```verilog\n\nlocalparam      V_BackPorch = 16'd6; //0 or 45\nlocalparam      V_Pluse \t= 16'd5; \nlocalparam      HightPixel  = 16'd480;\nlocalparam      V_FrontPorch= 16'd62; //45 or 0\n\nlocalparam      H_BackPorch = 16'd182; \t\nlocalparam      H_Pluse \t= 16'd1; \nlocalparam      WidthPixel  = 16'd800;\nlocalparam      H_FrontPorch= 16'd210;\n\nlocalparam      PixelForHS  =   WidthPixel + H_BackPorch + H_FrontPorch;  \t\nlocalparam      LineForVS   =   HightPixel + V_BackPorch + V_FrontPorch;\n\n```\n\n首先是设置时序相关的参数：前沿、后沿、有效像素\n\n关于显示前沿、后沿，前面也说了，可以合并为一个消影时间，就是可以把其中一个设置为0，另一个设置为消影时间。反正前后沿的时间加起来符合表中的时间要求就可以\n\n### 定义变量\n\n- 定义一些变量能够容易编写程序\n  \n```verilog\n\nreg [15:0] LineCount;\nreg [15:0] PixelCount;\n\nreg\t[9:0]  Data_R;\nreg\t[9:0]  Data_G;\nreg\t[9:0]  Data_B;\n\n```\n\n### 同步信号\n\n这段代码产生同步信号，需要注意的是，这块屏幕的同步信号是负极性使能\n\n```verilog\n    always @(  posedge PixelClk or negedge nRST  )begin\n        if( !nRST ) begin\n            LineCount       <=  16'b0;    \n            PixelCount      <=  16'b0;\n            end\n        else if(  PixelCount  ==  PixelForHS ) begin\n            PixelCount      <=  16'b0;\n            LineCount       <=  LineCount + 1'b1;\n            end\n        else if(  LineCount  == LineForVS  ) begin\n            LineCount       <=  16'b0;\n            PixelCount      <=  16'b0;\n            end\n        else\n            PixelCount      <=  PixelCount + 1'b1;\n    end\n\n   always @(  posedge PixelClk or negedge nRST  )begin\n        if( !nRST ) begin\n\t\t\tData_R <= 9'b0;\n\t\t\tData_G <= 9'b0;\n\t\t\tData_B <= 9'b0;\n            end\n        else begin\n\t\t\tend\n\tend\n\n//注意这里HSYNC和VSYNC负极性\nassign  LCD_HSYNC = (( PixelCount >= H_Pluse)&&( PixelCount <= (PixelForHS-H_FrontPorch))) ? 1'b0 : 1'b1;\nassign  LCD_VSYNC = ((( LineCount  >= V_Pluse )&&( LineCount  <= (LineForVS-0) )) ) ? 1'b0 : 1'b1;\n```\n\n### 使能信号\n\n这段代码设置 LCD 使能图像显示，这块屏幕需要控制一个管脚用作显示开关，实际这个信号就是传输图像有效的那 800*480 的数据时置 1\n  \n```verilog\nassign  LCD_DE = (  ( PixelCount >= H_BackPorch )&&\n                    ( PixelCount <= PixelForHS-H_FrontPorch ) &&\n                    ( LineCount >= V_BackPorch ) &&\n                    ( LineCount <= LineForVS-V_FrontPorch-1 ))  ? 1'b1 : 1'b0;\n                    //这里不减一，会抖动\n```\n\n### 测试彩条\n\n- 这段代码用来产生 LCD 的测试数据，产生彩条显示\n\n```verilog\nassign  LCD_R   =   (PixelCount<200)? 5'b00000 : \n                    (PixelCount<240 ? 5'b00001 :    \n                    (PixelCount<280 ? 5'b00010 :    \n                    (PixelCount<320 ? 5'b00100 :    \n                    (PixelCount<360 ? 5'b01000 :    \n                    (PixelCount<400 ? 5'b10000 :  5'b00000 )))));\n\nassign  LCD_G   =   (PixelCount<400)? 6'b000000 : \n                    (PixelCount<440 ? 6'b000001 :    \n                    (PixelCount<480 ? 6'b000010 :    \n                    (PixelCount<520 ? 6'b000100 :    \n                    (PixelCount<560 ? 6'b001000 :    \n                    (PixelCount<600 ? 6'b010000 :  \n                    (PixelCount<640 ? 6'b100000 : 6'b000000 ))))));\n\nassign  LCD_B   =   (PixelCount<640)? 5'b00000 : \n                    (PixelCount<680 ? 5'b00001 :    \n                    (PixelCount<720 ? 5'b00010 :    \n                    (PixelCount<760 ? 5'b00100 :    \n                    (PixelCount<800 ? 5'b01000 :    \n                    (PixelCount<840 ? 5'b10000 :  5'b00000 )))));\n```\n\n**当然在最后的驱动文件最后别忘记换行加上 endmodule** \n\n到这里驱动模块的编写已经完成了。\n\n## 在顶层模块中例化\n\n- **这里也是要新建verilog文件的**\n- 新建文件之后直接把下面的内容复制进去保存即可\n\n```verilog\nmodule TOP //设置顶层模块\n(\n\tinput\t\t\tnRST,\n    input           XTAL_IN,\n\n\toutput\t\t\tLCD_CLK,\n\toutput\t\t\tLCD_HYNC,\n\toutput\t\t\tLCD_SYNC,\n\toutput\t\t\tLCD_DEN,\n\toutput\t[4:0]\tLCD_R,\n\toutput\t[5:0]\tLCD_G,\n\toutput\t[4:0]\tLCD_B\n\n); // 列出需要的端口\n\n\twire\t\tCLK_SYS;\t\n\twire\t\tCLK_PIX;\n    \n    //例化pll\n    Gowin_rPLL chip_pll(\n        .clkout(CLK_SYS), //output clkout     //200M\n        .clkoutd(CLK_PIX), //output clkoutd   //33.00M\n        .clkin(XTAL_IN)    //input clkin\n    );\t\n\n\tVGAMod\tVGAMod_inst //例化vga驱动\n\t(\n\t\t.CLK\t\t(\tCLK_SYS     ),\n\t\t.nRST\t\t(\tnRST\t\t),\n\n\t\t.PixelClk\t(\tCLK_PIX\t\t),\n\t\t.LCD_DE\t\t(\tLCD_DEN\t \t),\n\t\t.LCD_HSYNC\t(\tLCD_HYNC \t),\n    \t.LCD_VSYNC\t(\tLCD_SYNC \t),\n\n\t\t.LCD_B\t\t(\tLCD_B\t\t),\n\t\t.LCD_G\t\t(\tLCD_G\t\t),\n\t\t.LCD_R\t\t(\tLCD_R\t\t)\n\t);\n\n\tassign\t\tLCD_CLK\t\t=\tCLK_PIX;\n\nendmodule\n```\n\n## 综合、约束、布局布线\n\n### 综合\n\n完成上面步骤后转到“Process”界面下，对编辑好的代码进行综合，即运行“Systhesize” \n![](./../nano_9k/nano_9k_synthsize.png)\n\n运行的结果如下图出现 \n![](./../../Tang-Nano/assets/LED.png) \n\n且下方结果栏不出现任何从报错，说明前面编辑的代码无误，如果有错，根据错误提示进行改正即可。\n\n### 约束\n\n- 此处仅管脚约束\n\n对应的管脚约束如下表格所示；\n关于管脚约束方法可以参考[点灯文章(点我)](./LED.html)里面的约束方法。\n感觉麻烦的话也可以直接复制准备好的[文件(点我)](./lcd_constrains.html)，将页面里的内容复制到工程目录里 .cst 文件中（如果没有.cst 文件那么自己新建一个**物理管脚约束文件**） 即可。\n\n| PORT        | I/O    | PIN | PORT         | I/O    | PIN |\n| ----------- | ------ | --- | ------------ | ------ | --- |\n| LCD_B[4]    | output | 41  | LCD_B[3]     | output | 42  |\n| LCD_B[2]    | output | 51  | LCD_B[1]     | output | 53  |\n| LCD_B[0]    | output | 54  | LCD_G[5]     | output | 55  |\n| LCD_G[4]    | output | 56  | LCD_G[3]     | output | 57  |\n| LCD_G[2]    | output | 68  | LCD_G[1]     | output | 69  |\n| LCD_G[0]    | output | 70  | LCD_R[4]     | output | 71  |\n| LCD_R[3]    | output | 72  | LCD_R[2]     | output | 73  |\n| LCD_R[1]    | output | 74  | LCD_R[0]     | output | 75  |\n| LCD_DEN     | output | 33  | LCD_SYNC     | output | 34  |\n| LCD_HYNC    | output | 40  | LCD_CLK      | output | 35  |\n| XTAL_IN     | input  | 52  | nRST         | input  | 4   |\n\n\n### 布局布线\n\n管脚约束之后需要在设置里面开启引脚复用才能完成布局布线。\n\n具体位置在 软件顶部菜单栏 Project -> Configuration -> Place&Route -> Dual-Purpose Pin\n![](./../../Tang-Nano/examples/led/assets/enable_io_mux.png)\n\n设置完上面的之后。\n就可以进行布局布线(Place&Route)了。\n结束后就可以给开发板验证代码内容了。\n\n## 烧录\n\n布局布线结束后生成比特流，就可以烧录开发板了。\n\n\n## 结束\n\n上面差不多叙述了所有代码。\n整个工程可以在参考 [这里](https://github.com/sipeed/TangNano-9K-example) ，对应在lcd_led目录下。\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano-9K/Tang-nano-9k.html": {"title": "Tang nano 9k 一些例程", "content": "---\ntitle: Tang nano 9k 一些例程\n---\n\n对于Programmer(下载程序)建议使用 https://dl.sipeed.com/shareURL/TANG/programmer 里面的文件。\n下载后解压替换掉Gowin对应安装目录的Programmer文件夹即可。\n不会替换的话可以在下载解压后的Programmer程序中手动添加对应下载文件来进行烧录。\n\n- [点灯例程](./examples/LED.html)\n- [驱RGB屏教程](./examples/LCD.html)\n- [PicoRV 在9K上运行的示例](./examples/picoRV_examples.html)\n- litex在9K上使用示例：即将更新\n- 使用软核驱动SPI屏幕：待更新\n- ~~FPGA驱动1.14寸SPI屏幕：待更新~~\n- HDMI显示例程：即将更新\n- 驱动MIPI接口屏幕：待更新\n- 其他（有什么想法可以提出来，可行的话或许会被采纳）"}, "/hardware/zh/tang/Tang-Nano-9K/examples/LED.html": {"title": "点灯LED", "content": "---\ntitle: 点灯LED\n---\n\n> 编辑于2022年7月13日\n\n这里我们用点亮板子上的LED来作为例程来快速熟悉一下高云半导体 IDE 的使用流程\n\n## 创建工程\n\n新建工程：File-->NEW-->FPGA Dsign Project-->OK\n![创建工程](./../../Tang-Nano/assets/LED-1.png)\n\n弹出的选项框设置工程名称和路径（路径和文件名称要求是英文路径）\n![设置名称](./../../Tang-Nano/assets/LED-2.png)\n\n选择正确的型号：\n![选择设备](./../nano_9k/Tang_nano_9k_Device_choose.png)\n\n## 准备代码\n    \n新建好工程之后接下来进行代码编辑，可以在下图箭头指示的地方新建 “Verilog File”\n![](./../../Tang-Nano/assets/LED-5.png)\n\n给文件命名（要求写英文名，不然后续综合很容易报错）\n![](./../../Tang-Nano/assets/LED-6.png)\n\n双击文件，可以在右侧的编辑框中进行代码的编写。\n![](./../../Tang-Nano/assets/LED-7.png)\n\n以流水灯为例，将下方的 “LED例程代码” 复制并粘贴到自己创建的文件中，也可以自己编写代码，例程代码地址：\n<https://github.com/sipeed/TangNano-9K-example>\n使用 git clone 后可以在 led/src/LED.v 文件夹内找到代码\n\n```verilog\nmodule led (\n    input sys_clk,          // clk input\n    input sys_rst_n,        // reset input\n    output reg [5:0] led    // 6 LEDS pin\n);\n\nreg [23:0] counter;\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        counter <= 24'd0;\n    else if (counter < 24'd1349_9999)       // 0.5s delay\n        counter <= counter + 1'b1;\n    else\n        counter <= 24'd0;\nend\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        led <= 6'b111110;\n    else if (counter == 24'd1349_9999)       // 0.5s delay\n        led[5:0] <= {led[4:0],led[5]};\n    else\n        led <= led;\nend\n\nendmodule\n\n ```\n\n上面代码完成后需要在 Project->Configuration->Place&Route->Dual-Purpose Pin 中将 `Use DONE as regular IO` 勾选上，不然下面的综合会报错。\n![img_configuration](./../nano_9k/LED_Configuration.png)\n\n## 综合、约束、布局布线\n\n### 综合\n\n保存编辑的代码后转到 “Process” 界面，双击 “Systhesize” 来对我们所编写的代码进行综合。也可以鼠标右键点击看看有啥功能\n![Systhesize](./../nano_9k/nano_9k_synthsize.png)\n\n运行的结果如下图一样 \n![Finish_Systhesize](./../../Tang-Nano/assets/LED.png) \n\n且下方结果栏不出现任何从报错，说明前面编辑的代码无误，如果有错，根据错误提示进行改正即可。\n\n### 约束\n\n- 此处没有涉及时钟约束\n\n想让 Fpga 实现代码的功能，必须将代码中涉及的端口绑定到 Fpga 实际的引脚上。\n\n如下图，在左边的工作区点击 process，然后双击 FloorPlanner （前面的综合如果运行失败，这一步无法进行）\n\n![FloorPlanner](./../../assets/examples/led_pjt_2.png)\n\n第一次打开会弹出缺少 .cst 文件.选择 “OK” 即可；\n![.cst_file](./../../Tang-Nano/assets/LED-9.png)\n\n可以在这里下载到 Nano 9K 的原理图 [这里](https://dl.sipeed.com/shareURL/TANG/Nano%209K/2_Schematic)\nNano 9K 的 led 部分的原理图如下所示\n![led原理图](./../nano_9k/LED_Pins.png \"nano 9k led pins\")\n\n对于交互式管脚约束有两种方法\n- 将对应的端口拖拽到芯片引脚上\n- 在 IO 约束中输入端口对应的引脚编号\n\n管教绑定的具体方法可以参考 [SUG935-1.3_Gowin设计物理约束用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG935-1.3_Gowin%E8%AE%BE%E8%AE%A1%E7%89%A9%E7%90%86%E7%BA%A6%E6%9D%9F%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)。\n\n当然别忘了对着原理图把晶振引脚和全局复位按键引脚也绑定一下\n\n下图是本例程管脚约束示例\n![引脚约束](./../nano_9k/LED_FloorPlanner.png)\n\n### 布局布线\n\n> 未开启管脚复用会提示 error2017， 前文提到过启用方法 [准备代码](#准备代码)\n\n到 Process 下运行布局布线，即双击 `Place&Route` ，结果将如下所示：\n![Place&Route](./../nano_9k/LED_Place&Route.png)\n\n## 下载到设备\n\n### 开始下载\n\n双击 Program Device 打开下载软件\n![Programmer](./../../Tang-Nano-4K/assets/Open_Programmer.png)\n\n接下来是连接芯片型号，烧录固件，可参照下图选择芯片(注意这里是9C)：\n![选择](./../nano_9k/nano_9k_device_scan.png)\n\n以烧录进SRAM为例进行说明，如下图：\n设置下载方式：\n![设置sram下载方式](./../nano_9k/nano_9k_sram_program.png \"设置sram下载方式\")\n进行下载：\n![进行sram下载](./../nano_9k/nano_9k_sram_download.png \"进行sram下载\")\n\n### 结果展示\n\n结果显示：\n![流水灯](./../nano_9k/blink.gif)\n\n## 其他\n\n有固化需求的话设置下载到 flash 即可\n![固化](./../nano_9k/access_mode.png)\n\n有问题可以前往[相关问题](./../../Tang-Nano-Doc/questions.html)\n\n当然也欢迎在下面留言\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano-9K/examples/picoRV_examples.html": {"title": "Tang Nano 9K picoRV 简单示例", "content": "---\ntitle: Tang Nano 9K picoRV 简单示例\n---\n> 编辑于2022年3月28日\n\n## 前言\n\n在Tang Nano 9K [例程仓库](https://github.com/sipeed/TangNano-9K-example/tree/main/picotiny)里面有一个picoRV的例程。\n本篇文章仅简单叙述如何使用例程，无其他内容。\n\n## 相关环境\n\n- Python\n- Gowin IDE\n\n## 相关步骤\n\n### 烧录Bitstream\n\n- 打开 TangNano-9K-example\\picotiny\\project 目录下的 picotiny.gprj 文件\n- 在顶部菜单栏 Project->Configuration->Place&Route->Dual-Purpose Pin 里面勾选 Use MSPI as regular IO\n- 在 IDE 的 Process 窗口右键 Place&Route 选择 Clean＆Rerun All \n- 将生成的文件下载到 Nano 9K 的 Embedded Flash\n\n完成上面步骤后我们已经成功将PicoRV固化到FPGA里面了\n\n### 烧录例程文件\n\n- 在 TangNano-9K-example\\picotiny 目录下执行\n\n```python\npython .\\sw\\pico-programmer.py .\\example-fw-flash.v COM13\n```\n\n上面命令行中最后的 COM13 指的是开发板在系统中的串口编号，\n比如在系统中显示为COM14的话就需要将它改成对应的COM14。\n\n成功执行上面命令后会出现 `- Waiting for reset -` 的计时，\n这时候按下开发板的S1按键就可以完成烧录。\n附带完成的烧录log：\n\n```powershell\n\\TangNano-9K-example\\picotiny> python .\\sw\\pico-programmer.py .\\example-fw-flash.v COM13\nRead program with 11760 bytes\n  - Waiting for reset -\n    ...\nTotal sectors 3\nTotal pages 46\nFlashing 1 / 3\nFlashing 2 / 3\nFlashing 3 / 3\n\nFlashing completed\n```\n\n然后就可以使用在串口工具来执行我们的代码了，当然也可以用HDMI来显示代码界面\n![](./../nano_9k/picorv.jpg)\n\n## 其他事项\n\n- 本文仅提供一种运行方法，无其他作用\n- 交叉编译等高阶玩法自己参考项目目录的makefile修改，无其他支持\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano-9K/examples/softcore-1/softcore-1.html": {"title": "移植FatFS，为RISCV添加FAT32文件系统", "content": "# 移植FatFS，为RISCV添加FAT32文件系统\n\n> 编辑于2022.05.26\n\n- 原文链接:https://bbs.sipeed.com/thread/1482\n\n搬运有改动。\n\n首先新建一个项目工程，选型时不要选错型号。\n\n## Gowin 相关设置\n\n在 IP generator 生成中选择 Gowin_PicoRV32，软核最大可以跑到50MHz，这个频率做一些基本控制是绰绰有余的。\n\n打开IP后，双击要修改的模块进行设置。\n\n此处去掉了 RV32C 和 RV32M 指令集的扩展，关闭了Jtag debug功能。\n\n然后是定制ITCM和DTCM，由于我选择将程序编译后直接放到ITCM中运行（MCU boot and run in ITCM），并且编译后的文件大约需要22KB，所以分给了ITCM 32KB的空间，DTCM保持默认16KB。\n\n外设方面，启用UART来输出打印信息，SPI Master用于与SD卡通信，GPIO用来点灯。我还打开了AHB扩展，并在上面挂载了一片内存用于后续LCD的显存。\n\n还需要调用PLL，为CPU提供50MHz的时钟，SD卡的读写速度也是50MHz，最后绑定好pin脚，生成FPGA的下载文件。\n\n## GMD 相关的操作\n\n接下去的工作就要转到[GMD](http://www.gowinsemi.com.cn/prodshow.aspx)中了。参考半导体官方文档[IPUG910](http://cdn.gowinsemi.com.cn/IPUG910-1.4_Gowin_PicoRV32_IDE%E8%BD%AF%E4%BB%B6%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C.pdf)进行开发环境搭建和程序编译，外设的驱动编写可以参考[IPUG911](http://cdn.gowinsemi.com.cn/IPUG911-1.3_Gowin_PicoRV32%E8%BD%AF%E4%BB%B6%E7%BC%96%E7%A8%8B%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C.pdf)，最后程序的下载可以参考[IPUG913](http://cdn.gowinsemi.com.cn/IPUG913-1.4_Gowin_PicoRV32%E8%BD%AF%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C.pdf)。\n\nC的开发环境搭建完成后，就开始进行SD卡驱动和fatfs的移植，这里我将SD卡作为只读设备，编写了相应的驱动。\n\n### SD Command\n\nSD卡的通信，主要是通过Matser发送CMD命令进行的，驱动见下面代码。\n\n```c\n#define SPI_ID 0\n\nuint8_t sd_sendcmd(uint8_t cmd, uint32_t arg, uint8_t crc)\n{\n        uint8_t r1, cnt;\n\n        cnt = 0;\n\n        wbspi_master_select_slave(PICO_WBSPI_MASTER,SPI_ID);\n\n        wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n\n        wbspi_master_txdata(PICO_WBSPI_MASTER,(cmd | 0x40));\n        wbspi_master_txdata(PICO_WBSPI_MASTER,arg>>24);\n        wbspi_master_txdata(PICO_WBSPI_MASTER,arg>>16);\n        wbspi_master_txdata(PICO_WBSPI_MASTER,arg>>8);\n        wbspi_master_txdata(PICO_WBSPI_MASTER,arg);\n        wbspi_master_txdata(PICO_WBSPI_MASTER,crc);\n\n        do{\n                r1 = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n                cnt++;\n                if(cnt > 50) break;\n        }while(r1 == 0xFF);\n\n        return r1;\n}\n```\n\n### SD Init\n\n基于上面这个函数，就开始编写SD卡初始化函数，初始化的流程为：\n1、发送大于74个周期的时钟信号，等待SD卡内部逻辑稳定；\n2、发送CMD0，让SD卡进入IDLE状态；\n3、发送CMD8，查询卡的型号是不是支持SD 2.0协议；\n4、这里只处理支持SD 2.0协议的卡，发送CMD55+ACMD41进行初始化；\n5、发送CMD58，查询卡支不支持SDHC；\n6、发送CMD9，CMD10，获取SD卡的CID和OCR信息\n\n```C\nuint8_t sd_init(void)\n{\n        uint32_t i;\n        uint8_t r1;\n        uint8_t buff[16];\n        uint8_t cnt = 0;\n\n        wbspi_master_select_slave(PICO_WBSPI_MASTER,SPI_ID);\n        for(i=0; i<1000; i++);\n\n        for(i=0; i<10; i++)\n                wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n\n        r1 = sd_sendcmd(0,0,0x95);\n\n        r1 = sd_sendcmd(8,0x1aa,0x87);\n        if(r1 == 0x01)\n        {\n                buff[0] = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n                buff[1] = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n                buff[2] = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n                buff[3] = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n\n                do{\n                        r1 = sd_sendcmd(55,0,0);\n                        if(r1 != 0x01)\n                                return -1;\n\n                        r1 = sd_sendcmd(41,0x40000000,1);\n                        cnt++;\n                        if(cnt>100) return -1;\n                }while(r1!=0);\n        }\n\n        r1 = sd_sendcmd(58,0,0);\n        if(r1 != 0x00) return -1;\n\n        buff[0] = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n        buff[1] = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n        buff[2] = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n        buff[3] = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n        wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n\n        if(buff[0]&0x40)\n                printf(\"sdhc rdy\\r\\n\");\n        else\n                printf(\"sd2.0 rdy\\r\\n\");\n\n        r1 = sd_sendcmd(9,0,0xFF);\n        if(r1 != 0x00) return -1;\n        do{\n                r1 = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n        }while(r1 != 0xFE);\n\n        for(i=0; i<16; i++)\n        {\n                r1 = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n        }\n\n        r1 = sd_sendcmd(10,0,0xFF);\n        if(r1 != 0x00) return -1;\n        do{\n                r1 = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n        }while(r1 != 0xFE);\n        for(i=0; i<16; i++)\n        {\n                r1 = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n        }\n        return 0;\n}\n```\n\n### SD Read Block\n\n下面是SD卡读单块和多块的驱动。\n\n```C\nBYTE SD_ReadSingleBlock(UINT sector, BYTE *buffer)\n{\n  BYTE r1;\n  WORD i;\n  i=512;\n\n   r1 = sd_sendcmd(17, sector, 1);        //发送CMD17 读命令\n   if(r1 != 0x00)        return r1;\n\n   do{\n                   r1 = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n   }while(r1 != 0xFE);\n\n   while(i!=0)\n   {\n           *buffer = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n           buffer++;\n           i--;\n   }\n   wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n   wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n\n\n   return 0;                 //读取正确，返回0\n}\n\nBYTE SD_ReadMultiBlock(UINT sector, BYTE *buffer, BYTE count)\n{\n  BYTE r1;\n  WORD i;\n\n  r1 = sd_sendcmd(18, sector, 1);                //读多块命令\n  if(r1 != 0x00)        return r1;\n\n  while(count != 0){\n          i = 512;\n          do{\n                        r1 = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n          }while(r1 != 0xFE);\n\n          while(i!=0)\n          {\n                   *buffer = wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n                   buffer++;\n                   i--;\n          }\n          buffer+=512;\n          count--;\n          wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n  }\n\n  sd_sendcmd(12, 0, 1);        //全部传输完成，发送停止命令\n  wbspi_master_txdata(PICO_WBSPI_MASTER,0xFF);\n  if(count != 0)\n    return count;   //如果没有传完，返回剩余个数\n  else\n    return 0;\n}\n```\n\n### FatFs File system\n\nSD卡驱动完成后，开始移植FatFs文件系统\n\n源码下载：http://elm-chan.org/fsw/ff/archives.html \n\n选择最新的FatFs R0.14b ，并添加到工程。\n\nFFConf.h用于FatFs的定制，这里需要将FF_FS_READONLY的宏改为1，将SD卡作为只读设备。\n\n还需要改写diskio.c文件，适配SD卡。这里只做了最简单的适配，完成了初始化和读，查询状态和获取时间都是空函数。由于宏设置，这两个函数disk_ioctl和disk_write就不管了\n\n```C\n#define SD_CARD 0\n\nDSTATUS disk_initialize (\n        BYTE pdrv                   /* Physical drive nmuber (0..) */\n)\n{\n        DRESULT status = STA_NOINIT;\n        switch(pdrv)\n        {\n                case SD_CARD://SD卡\n                        status = sd_init();\n                          break;\n                default:\n                        status = STA_NOINIT;\n        }   \n\n        return status;\n}  \n\n//获得磁盘状态\nDSTATUS disk_status (\n        BYTE pdrv                   /* Physical drive nmuber (0..) */\n)\n{\n        return 0;\n}\n\n//读扇区\n//drv:磁盘编号0~9\n//*buff:数据接收缓冲首地址\n//sector:扇区地址\n//count:需要读取的扇区数\nDRESULT disk_read (\n        BYTE pdrv,                  /* Physical drive nmuber (0..) */\n        BYTE *buff,                 /* Data buffer to store read data */\n        DWORD sector,               /* Sector address (LBA) */\n        UINT count                  /* Number of sectors to read (1..128) */\n)\n{\n        DRESULT status = RES_PARERR;\n    if (!count)return RES_PARERR;   //count不能等于0，否则返回参数错误  \n        switch(pdrv)\n        {\n                case SD_CARD://SD卡\n                        if(count == 1)\n                                status=SD_ReadSingleBlock(sector, buff);\n                        else\n                                status=SD_ReadMultiBlock(sector, buff, count);\n                        break;\n                default:\n                        status=RES_PARERR;\n        }\n\n        return status;\n}\nDWORD get_fattime (void)\n{         \n        return 0;\n}\n```\n\n最后进行测试，在SD卡的根目录放一个txt文件，然后RV32 CPU通过串口，将文件大小和内容打印出来。\n\n```C\n        res = f_mount(&fs, \"\", 1);\n        res = f_open(&file, \"top.txt\", FA_READ);\n        printf(\"\\r\\nfile size:%d\\r\\n\", file.obj.objsize);\n        f_read(&file, fbuff, file.obj.objsize, &br);\n        printf(\"%s\\r\\n\",fbuff);\n        f_close(&file);\n```"}, "/hardware/zh/tang/Tang-Nano-9K/examples/softcore-1/softcore-2.html": {"title": "使用PicoRV32软核在lcd屏幕上绘制图形", "content": "# 使用PicoRV32软核在lcd屏幕上绘制图形\n\n> 编辑于2022.06.22\n\n- 原文链接:https://bbs.sipeed.com/thread/1483   有改动\n\n## 摘要\n\n此工程在 LCD 屏幕绘制了两个长方形——一个实心的；另一个空心的。其中空心的边框宽度作为参数可调，并且绘图的颜色还可以通过按钮调整，现已支持红、绿、蓝和白，共四种颜色。\n整体的硬件设计基于半导体提供的 PicoRV32 软核IP，在 OPEN AHB INTERFACE 的处，挂载了 128Kbits 的 BSRAM 用作显存。\n该 128Kbits 的显存，本质上是一颗双端口的 SRAM ，使得 CPU 和自定义的 LCD IP 共同使用该“显存”。LCD IP 独立于CPU工作，节省 CPU 资源，达到 FPGA 加速的效果。\n\n## 设计\n\n### AHB 接口例化\n\nAHB接口用于与CPU交互，LCD接口与LCD IP交互。代码接口如下：\n\n```verilog\nahb2bram ahb2bram(\n    .clk_i(clk50),\n    .reset_i(~sys_rstn),\n\n    .hrdata_o(hrdata),\n    .hresp_o(hresp),\n    .hready_o(hready),\n    .haddr_i(haddr),\n    .hwrite_i(hwrite),\n    .hsize_i(hsize),\n    .hburst_i(hburst),\n    .hwdata_i(hwdata),\n    .hsel_i(hsel),\n    .htrans_i(htrans),\n\n    .lcd_clk_i(clk10),\n    .lcd_rd_i(lcd_rd),\n    .lcd_addr_i(lcd_addr),\n    .lcd_data_o(lcd_data)\n);\n```\n\n### 生成长方形\n\n在这个系统中，CPU主要负责图形的“渲染”，这个在大型系统中常常是GPU来做的。\n这里描述有点夸张了，其实所谓的“渲染”就是画个长方形，CPU 根据 C代码中的顶点坐标，把对应的显存地址填入1或者0。所封装的画实心的API如下\n\n```c\nvoid draw_rectangle(uint8_t top_x, uint8_t top_y, uint8_t btm_x, uint8_t btm_y)\n{\n        uint8_t i,j;\n        uint8_t calc_x;\n        uint8_t calc_y;\n\n        calc_x = top_x/32;\n        calc_y = top_y/32;\n  \n        for(i=0; i<Y_MAX; i++)\n                for(j=0; j<X_MAX; j++)\n                {\n                        if(j>=calc_x && j<=calc_y && i>=top_y && i<=btm_y)\n                                PCIO_AHBSRAM->SRAM[i*X_MAX+j] = RGB;\n                }\n}\n```\n\n### 例化 LCD \n\nCPU 运行起来后，会根据 C代码 访问 AHB总线，发出读写命令。自定义的 AHB2BRAM 模块，会将总线地址转换成显存地址进行数据读写。将绘制的图形保存在显存中，只要不掉电，就不会丢失。同时，LCD IP 只负责从显存中取数据，按照行场扫描的时序，就可以完完整整的将图形显示在LCD屏幕上了，LCD IP 的接口如下。\n\n```verilog\nVGAMod VGAMod\n(\n    .nRST(sys_rstn),\n    .PixelClk(clk10),\n\n    .lcd_rd_o(lcd_rd),\n    .lcd_addr_o(lcd_addr),\n    .lcd_data_i(lcd_data),\n\n    .LCD_DE(LCD_DE),\n    .LCD_HSYNC(LCD_HSYNC),\n    .LCD_VSYNC(LCD_VSYNC),\n\n    .LCD_B(LCD_B_t),\n    .LCD_G(LCD_G_t),\n    .LCD_R(LCD_R_t)\n);\n```\n\n### 结语\n\n受限于资源，此文实现的系统只有 128Kbits 的显存，而笔者使用的 LCD 的分辨率是480*272，RGB565。如果需要存一幅完整图形需要将显存扩大16倍，似乎超过了Nano 9K板载的这颗FPGA极限。因此，选择折中，不去保存RGB565，而是简单的复制扩展保存的1bit信息到RGB565中，这样颜色深度无法达到65536，只支持红、绿、蓝和白四种颜色。\n\n其实FPGA内封的PSRAM有 64Mbits，足够这块LCD的显存了。以后有机会可以尝试着用这些内存来运行一下 lvgl。\n\n!"}, "/hardware/zh/tang/Tang-Nano-9K/examples/spi_lcd.html": {"title": "Spi_lcd", "content": "# Spi_lcd\n\n感谢群友提供的代码，前往 https://github.com/sipeed/TangNano-9K-example/tree/main/spi_lcd 查看详情，相关说明会在整理之后展示。\n\n![spi_lcd](./../nano_9k/spi_lcd.jpg)"}, "/hardware/zh/tang/Tang-Nano-9K/examples/LCD.html": {"title": "驱动RGB屏幕", "content": "---\ntitle: 驱动RGB屏幕\n---\n\n> 编辑于2022.04.12\n\n## 先介绍时序\n\nRGB LCD 显示协议和 VGA 类似，通信都有专用的行同步、场同步信号线。它们的主要区别是前者传输用的是数字信号，后者传输走的是模拟信号。\n\n下面就介绍 VGA 的时序\n\n![](./../../assets/examples/lcd_pjt_1.png)\n\n上图分别是 VGA 在数据传输中的行同步、场同步时序\n\n从时序图中可以看出，不论是显示一行数据还是一列数据，都需要一个同步(sync)信号，数据的传输需要在两个同步信号的脉冲之间完成\n\n每一行的数据包括显示前沿(back porch)、有效数据(active video)、显示后沿(front porch)\n\n其中的有效数据就是我们常说的分辨率，而显示前后沿的参数需要参考具体的分辨率与帧数进行设置，相关参数可以参考典型参数，链接在此： http://www.tinyvga.com/vga-timing\n\n这块5寸屏幕的控制时序略有不同，相关参数的设置可以查看[规格书](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/CN/LCD_Datasheet/5.0inch_LCD_Datashet%20RGB.pdf)\n\n其他尺寸的屏幕相关规格书均可以在这里下载 [点我](https://dl.sipeed.com/shareURL/TANG/Nano%209K/6_Chip_Manual/CN/LCD_Datasheet)\n\n下面提供了 LCD 相关时序的截图\n\n![](./../../assets/examples/lcd_pjt_2.png)\n\n![](./../../assets/examples/lcd_pjt_3.png)\n\n上面一张图是时序中的参数表，下面的图是时序图\n\n从时序图中看出，这块屏幕可以不用设置前后沿，可以只设置消影(blanking)时间，通过实际的程序证明，两种方式都是可以的\n\n## 新建工程\n\n具体新建工程的方法可以参考[点灯文章](LED.html)\n\n## 生成屏幕时钟\n\n- 这里需要用到高云半导体官方的IP核\n\n### rPll\n\n板载的晶振时钟为 27MHz ，但是我们的屏幕要求 33.3MHZ 的时钟，所以我们需要使用对应的ip核来生成相应的时钟\n\n这里需要使用到 `IP Core Generate` ，位置在 Tools -> IP Core Generate\n\n![](./../../Tang-Nano-1K/assets/Gowin_IP_rpll.png)\n\n双击 `rpll` ，在弹出窗口 language 选择 Verilog ，CLKIN 为 27MHz ，CLKOUT 为  33.00MHz。\n\n![](./../../Tang-Nano-1K/assets/lcd_rpll.png)\n\n点击ok后提示是否需要添加到当前工程，此时应当选择确定\n\n![](./../../Tang-Nano-1K/Nano_1K_examples/led/assets/add_ip_file_in_project.png)\n\n接着会出现一个例化的tmp文件，用来例化所设置的ip。比如下图中例子\n\n![](./../../Tang-Nano/examples/led/assets/ip_examples.png)\n\n## 屏幕驱动代码\n\n- **首先新建一个额外的verilog文件来保存下面要编写的代码**\n\n### 端口定义\n\n首先需要先定义出驱动屏幕所需要的端口\n\n```verilog\nmodule VGAMod\n(\n    input                   CLK,\n    input                   nRST,\n\n    input                   PixelClk,\n\n    output                  LCD_DE,\n    output                  LCD_HSYNC,\n    output                  LCD_VSYNC,\n\n\toutput          [4:0]   LCD_B,\n\toutput          [5:0]   LCD_G,\n\toutput          [4:0]   LCD_R\n);\n```\n\n本例程使用RGB565作为驱动方式；\n\n### 时序常量\n\n接着定义出时序图上所要求的常量\n\n```verilog\n\nlocalparam      V_BackPorch = 16'd6; //0 or 45\nlocalparam      V_Pluse \t= 16'd5; \nlocalparam      HightPixel  = 16'd480;\nlocalparam      V_FrontPorch= 16'd62; //45 or 0\n\nlocalparam      H_BackPorch = 16'd182; \t\nlocalparam      H_Pluse \t= 16'd1; \nlocalparam      WidthPixel  = 16'd800;\nlocalparam      H_FrontPorch= 16'd210;\n\nlocalparam      PixelForHS  =   WidthPixel + H_BackPorch + H_FrontPorch;  \t\nlocalparam      LineForVS   =   HightPixel + V_BackPorch + V_FrontPorch;\n\n```\n\n首先是设置时序相关的参数：前沿、后沿、有效像素\n\n关于显示前沿、后沿，前面也说了，可以合并为一个消影时间，就是可以把其中一个设置为0，另一个设置为消影时间。反正前后沿的时间加起来符合表中的时间要求就可以\n\n### 定义变量\n\n- 定义一些变量能够容易编写程序\n  \n```verilog\n\nreg [15:0] LineCount;\nreg [15:0] PixelCount;\n\nreg\t[9:0]  Data_R;\nreg\t[9:0]  Data_G;\nreg\t[9:0]  Data_B;\n\n```\n\n### 同步信号\n\n这段代码产生同步信号，需要注意的是，这块屏幕的同步信号是负极性使能\n\n```verilog\n    always @(  posedge PixelClk or negedge nRST  )begin\n        if( !nRST ) begin\n            LineCount       <=  16'b0;    \n            PixelCount      <=  16'b0;\n            end\n        else if(  PixelCount  ==  PixelForHS ) begin\n            PixelCount      <=  16'b0;\n            LineCount       <=  LineCount + 1'b1;\n            end\n        else if(  LineCount  == LineForVS  ) begin\n            LineCount       <=  16'b0;\n            PixelCount      <=  16'b0;\n            end\n        else\n            PixelCount      <=  PixelCount + 1'b1;\n    end\n\n   always @(  posedge PixelClk or negedge nRST  )begin\n        if( !nRST ) begin\n\t\t\tData_R <= 9'b0;\n\t\t\tData_G <= 9'b0;\n\t\t\tData_B <= 9'b0;\n            end\n        else begin\n\t\t\tend\n\tend\n\n//注意这里HSYNC和VSYNC负极性\nassign  LCD_HSYNC = (( PixelCount >= H_Pluse)&&( PixelCount <= (PixelForHS-H_FrontPorch))) ? 1'b0 : 1'b1;\nassign  LCD_VSYNC = ((( LineCount  >= V_Pluse )&&( LineCount  <= (LineForVS-0) )) ) ? 1'b0 : 1'b1;\n```\n\n### 使能信号\n\n这段代码设置 LCD 使能图像显示，这块屏幕需要控制一个管脚用作显示开关，实际这个信号就是传输图像有效的那 800*480 的数据时置 1\n  \n```verilog\nassign  LCD_DE = (  ( PixelCount >= H_BackPorch )&&\n                    ( PixelCount <= PixelForHS-H_FrontPorch ) &&\n                    ( LineCount >= V_BackPorch ) &&\n                    ( LineCount <= LineForVS-V_FrontPorch-1 ))  ? 1'b1 : 1'b0;\n                    //这里不减一，会抖动\n```\n\n### 测试彩条\n\n- 这段代码用来产生 LCD 的测试数据，产生彩条显示\n\n```verilog\nassign  LCD_R   =   (PixelCount<200)? 5'b00000 : \n                    (PixelCount<240 ? 5'b00001 :    \n                    (PixelCount<280 ? 5'b00010 :    \n                    (PixelCount<320 ? 5'b00100 :    \n                    (PixelCount<360 ? 5'b01000 :    \n                    (PixelCount<400 ? 5'b10000 :  5'b00000 )))));\n\nassign  LCD_G   =   (PixelCount<400)? 6'b000000 : \n                    (PixelCount<440 ? 6'b000001 :    \n                    (PixelCount<480 ? 6'b000010 :    \n                    (PixelCount<520 ? 6'b000100 :    \n                    (PixelCount<560 ? 6'b001000 :    \n                    (PixelCount<600 ? 6'b010000 :  \n                    (PixelCount<640 ? 6'b100000 : 6'b000000 ))))));\n\nassign  LCD_B   =   (PixelCount<640)? 5'b00000 : \n                    (PixelCount<680 ? 5'b00001 :    \n                    (PixelCount<720 ? 5'b00010 :    \n                    (PixelCount<760 ? 5'b00100 :    \n                    (PixelCount<800 ? 5'b01000 :    \n                    (PixelCount<840 ? 5'b10000 :  5'b00000 )))));\n```\n\n**当然在最后的驱动文件最后别忘记换行加上 endmodule** \n\n到这里驱动模块的编写已经完成了。\n\n## 在顶层模块中例化\n\n- **这里也是要新建verilog文件的**\n- 新建文件之后直接把下面的内容复制进去保存即可\n\n```verilog\nmodule TOP //设置顶层模块\n(\n\tinput\t\t\tnRST,\n    input           XTAL_IN,\n\n\toutput\t\t\tLCD_CLK,\n\toutput\t\t\tLCD_HYNC,\n\toutput\t\t\tLCD_SYNC,\n\toutput\t\t\tLCD_DEN,\n\toutput\t[4:0]\tLCD_R,\n\toutput\t[5:0]\tLCD_G,\n\toutput\t[4:0]\tLCD_B\n\n); // 列出需要的端口\n\n\twire\t\tCLK_SYS;\t\n\twire\t\tCLK_PIX;\n    \n    //例化pll\n    Gowin_rPLL chip_pll(\n        .clkout(CLK_SYS), //output clkout     //200M\n        .clkoutd(CLK_PIX), //output clkoutd   //33.00M\n        .clkin(XTAL_IN)    //input clkin\n    );\t\n\n\tVGAMod\tVGAMod_inst //例化vga驱动\n\t(\n\t\t.CLK\t\t(\tCLK_SYS     ),\n\t\t.nRST\t\t(\tnRST\t\t),\n\n\t\t.PixelClk\t(\tCLK_PIX\t\t),\n\t\t.LCD_DE\t\t(\tLCD_DEN\t \t),\n\t\t.LCD_HSYNC\t(\tLCD_HYNC \t),\n    \t.LCD_VSYNC\t(\tLCD_SYNC \t),\n\n\t\t.LCD_B\t\t(\tLCD_B\t\t),\n\t\t.LCD_G\t\t(\tLCD_G\t\t),\n\t\t.LCD_R\t\t(\tLCD_R\t\t)\n\t);\n\n\tassign\t\tLCD_CLK\t\t=\tCLK_PIX;\n\nendmodule\n```\n\n## 综合、约束、布局布线\n\n### 综合\n\n完成上面步骤后转到“Process”界面下，对编辑好的代码进行综合，即运行“Systhesize” \n![](./../nano_9k/nano_9k_synthsize.png)\n\n运行的结果如下图出现 \n![](./../../Tang-Nano/assets/LED.png) \n\n且下方结果栏不出现任何从报错，说明前面编辑的代码无误，如果有错，根据错误提示进行改正即可。\n\n### 约束\n\n- 此处仅管脚约束\n\n对应的管脚约束如下表格所示；\n关于管脚约束方法可以参考[点灯文章(点我)](./LED.html)里面的约束方法。\n感觉麻烦的话也可以直接复制准备好的[文件(点我)](./lcd_constrains.html)，将页面里的内容复制到工程目录里 .cst 文件中（如果没有.cst 文件那么自己新建一个**物理管脚约束文件**） 即可。\n\n| PORT        | I/O    | PIN | PORT         | I/O    | PIN |\n| ----------- | ------ | --- | ------------ | ------ | --- |\n| LCD_B[4]    | output | 41  | LCD_B[3]     | output | 42  |\n| LCD_B[2]    | output | 51  | LCD_B[1]     | output | 53  |\n| LCD_B[0]    | output | 54  | LCD_G[5]     | output | 55  |\n| LCD_G[4]    | output | 56  | LCD_G[3]     | output | 57  |\n| LCD_G[2]    | output | 68  | LCD_G[1]     | output | 69  |\n| LCD_G[0]    | output | 70  | LCD_R[4]     | output | 71  |\n| LCD_R[3]    | output | 72  | LCD_R[2]     | output | 73  |\n| LCD_R[1]    | output | 74  | LCD_R[0]     | output | 75  |\n| LCD_DEN     | output | 33  | LCD_SYNC     | output | 34  |\n| LCD_HYNC    | output | 40  | LCD_CLK      | output | 35  |\n| XTAL_IN     | input  | 52  | nRST         | input  | 4   |\n\n\n### 布局布线\n\n管脚约束之后需要在设置里面开启引脚复用才能完成布局布线。\n\n具体位置在 软件顶部菜单栏 Project -> Configuration -> Place&Route -> Dual-Purpose Pin\n![](./../../Tang-Nano/examples/led/assets/enable_io_mux.png)\n\n设置完上面的之后。\n就可以进行布局布线(Place&Route)了。\n结束后就可以给开发板验证代码内容了。\n\n## 烧录\n\n布局布线结束后生成比特流，就可以烧录开发板了。\n\n\n## 结束\n\n上面差不多叙述了所有代码。\n整个工程可以在参考 [这里](https://github.com/sipeed/TangNano-9K-example) ，对应在lcd_led目录下。\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano-9K/examples/lcd_constrains.html": {"title": "LCD Pin Constrain content", "content": "# LCD Pin Constrain content\n\n- 直接把下面的内容复制进\".cst\"文件即可\n- Copt the following content into the \".cst\" file\n\n```\n\nIO_LOC \"LCD_B[4]\" 41;\nIO_PORT \"LCD_B[4]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_B[3]\" 42;\nIO_PORT \"LCD_B[3]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_B[2]\" 51;\nIO_PORT \"LCD_B[2]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_B[1]\" 53;\nIO_PORT \"LCD_B[1]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_B[0]\" 54;\nIO_PORT \"LCD_B[0]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_G[5]\" 55;\nIO_PORT \"LCD_G[5]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_G[4]\" 56;\nIO_PORT \"LCD_G[4]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_G[3]\" 57;\nIO_PORT \"LCD_G[3]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_G[2]\" 68;\nIO_PORT \"LCD_G[2]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_G[1]\" 69;\nIO_PORT \"LCD_G[1]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_G[0]\" 70;\nIO_PORT \"LCD_G[0]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_R[4]\" 71;\nIO_PORT \"LCD_R[4]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_R[3]\" 72;\nIO_PORT \"LCD_R[3]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_R[2]\" 73;\nIO_PORT \"LCD_R[2]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_R[1]\" 74;\nIO_PORT \"LCD_R[1]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_R[0]\" 75;\nIO_PORT \"LCD_R[0]\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_DEN\" 33;\nIO_PORT \"LCD_DEN\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_SYNC\" 34;\nIO_PORT \"LCD_SYNC\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_HYNC\" 40;\nIO_PORT \"LCD_HYNC\" IO_TYPE=LVCMOS33;\nIO_LOC \"LCD_CLK\" 35;\nIO_PORT \"LCD_CLK\" IO_TYPE=LVCMOS33;\nIO_LOC \"XTAL_IN\" 52;\nIO_PORT \"XTAL_IN\" IO_TYPE=LVCMOS33 PULL_MODE=NONE;\nIO_LOC \"nRST\" 4;\n\n```"}, "/hardware/zh/tang/Tang-primer/e203/rv_ip.html": {"title": "蜂鸟添加外设", "content": "---\ntitle: 蜂鸟添加外设\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/e203/ft2232.html": {"title": "FT2232使用简明教程", "content": "---\ntitle: FT2232使用简明教程\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/e203/int.html": {"title": "蜂鸟的中断", "content": "---\ntitle: 蜂鸟的中断\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/e203/display.html": {"title": "蜂鸟驱动屏幕", "content": "---\ntitle: 蜂鸟驱动屏幕\n---\n\n> maxdepth\n> :   2\n>\n> display/lcd1602 display/oled display/spi\\_tft"}, "/hardware/zh/tang/Tang-primer/e203/peripherals.html": {"title": "蜂鸟外设简介", "content": "---\ntitle: 蜂鸟外设简介\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/e203/led/ws2812.html": {"title": "WS2812灯带", "content": "---\ntitle: WS2812灯带\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/e203/led/led.html": {"title": "RGB LED", "content": "---\ntitle: RGB LED\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/e203/led/pwm_led.html": {"title": "呼吸灯", "content": "---\ntitle: 呼吸灯\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/e203/display/spi_tft.html": {"title": "'SPI\\_MCU彩屏'", "content": "---\ntitle: 'SPI\\_MCU彩屏' \n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/e203/display/lcd1602.html": {"title": "1602屏幕", "content": "---\ntitle: 1602屏幕 \n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/e203/display/oled.html": {"title": "OLED屏幕", "content": "---\ntitle: OLED屏幕 \n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/e203/led.html": {"title": "蜂鸟点灯", "content": "---\ntitle: 蜂鸟点灯\n---\n\n> maxdepth\n> :   2\n>\n> led/led led/pwm\\_led led/ws2812"}, "/hardware/zh/tang/Tang-primer/e203/sensor.html": {"title": "蜂鸟外挂传感器", "content": "---\ntitle: 蜂鸟外挂传感器\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/fpga/ics/dac908.html": {"title": "FPGA驱动DAC908", "content": "---\ntitle: FPGA驱动DAC908\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/fpga/ics/usb3300.html": {"title": "FPGA驱动USB3300", "content": "---\ntitle: FPGA驱动USB3300\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/fpga/ics/adc9288.html": {"title": "FPGA驱动ADC9288", "content": "---\ntitle: FPGA驱动ADC9288\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/fpga/ics/codec.html": {"title": "FPGA驱动CODEC", "content": "---\ntitle: FPGA驱动CODEC\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/fpga/opencores.html": {"title": "FPGA 运行其他软核", "content": "---\ntitle: FPGA 运行其他软核\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/fpga/ics.html": {"title": "FPGA驱动其他IC", "content": "---\ntitle: FPGA驱动其他IC \n---\n\n\\> maxdepth \\> : 2 \\> \\> ics/adc9288 ics/dac908 ics/codec ics/usb3300"}, "/hardware/zh/tang/Tang-primer/fpga/display.html": {"title": "FPGA外接常用显示接口", "content": "---\ntitle: FPGA外接常用显示接口 \n---\n\n\\> maxdepth \\> : 2 \\> \\> display/lcd display/vga display/av display/hdmi"}, "/hardware/zh/tang/Tang-primer/fpga/dvp.html": {"title": "FPGA驱动DVP", "content": "---\ntitle: FPGA驱动DVP \n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/fpga/display/hdmi.html": {"title": "FPGA驱动HDMI", "content": "---\ntitle: FPGA驱动HDMI\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/fpga/display/vga.html": {"title": "FPGA驱动VGA", "content": "---\ntitle: FPGA驱动VGA\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/fpga/display/av.html": {"title": "FPGA驱动AV显示器", "content": "---\ntitle: FPGA驱动AV显示器\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/fpga/display/lcd.html": {"title": "FPGA驱动LCD", "content": "---\ntitle: FPGA驱动LCD\n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/fpga/led.html": {"title": "FPGA点灯", "content": "---\ntitle: FPGA点灯\n---\n\n## 源码下载\n\n请到 github 下载全部工程，地址为 [https://github.com/Lichee-Pi/Tang_FPGA_Examples/](https://github.com/Lichee-Pi/Tang_FPGA_Examples/)\n\n## Verilog代码\n\n```v\nmodule led\n(\n    input wire CLK_IN, //时钟输入，24MHz\n    input wire RST_N, //复位按键输入，低有效\n    output wire [2:0]RGB_LED //RGB led输出\n);\n\nparameter time1 = 24’d24_000_000;//晶振为24Mhz，这里表示计数一秒\n\nreg [2:0]rledout;\nreg [23:0] count;\nreg [1:0]shift_cnt;\n\ninitial\nbegin\n    count=24’b0;\n    rledout=3’b1;\n    shift_cnt=2’b0;\nend\n\nalways @(posedge CLK_IN)begin\n    if(RST_N==0)begin //复位按键按下就清空计数并清空输出\n        count <= 24’b0;\n        rledout <= 3’b1;\n        shift_cnt <=2’b0;\n    end\n\n    if(count == time1) //计数时间到\n    begin\n        count<= 24’d0; //清空计数值\n\n        if(shift_cnt==2’b10)begin //移位3次\n            rledout <= 3’b1;\n            shift_cnt <=2’b0;\n        end\n        else begin\n            rledout <= {rledout[1:0],1’b0}; //led输出移位\n            shift_cnt <= shift_cnt + 1’b1;\n        end\n    end\n    else\n        count <= count + 1’b1; //计数累加\nend\n\nassign RGB_LED = rledout;\nendmodule\n```\n\n上面的代码输入完且保存后，综合一下，接着自己对照板子原理图进行管脚约束。在生成比特流下载到fpga，可以看到板上的rgb led会移位闪烁。（emmm，闪烁效果太差，如果你有更好的可以发过来。(╯︵╰)"}, "/hardware/zh/tang/Tang-primer/fpga/sdram.html": {"title": "FPGA驱动SDRAM", "content": "---\ntitle: FPGA驱动SDRAM \n---\n\n待补充。。。"}, "/hardware/zh/tang/Tang-primer/index.html": {"title": "荔枝糖 全流程指南", "content": "# 荔枝糖 全流程指南\n\n荔枝糖，一款极致打磨的国产开源RISC-V开发板。\n\n荔枝糖萌生于国内芯片振荡之潮，历经三个月的生长与蜕变，终于在七月，登上开源的舞台。\n\n荔枝糖不仅担起开源开发者们的期待，更志向于在国内推广RISC-V架构相关的开发与教育，向世界介绍中国的一款优秀开发板。\n\n![](./../assets/material.png)\n\n\n荔枝糖使用 安路科技(Anlogic Technologies) 的 EG4S20 作为核心单元, **20K逻辑单元(LUT4/LUT5混合架构)，约130KB SRAM，内置32bit位宽 64MBit SDRAM，丰富的LVDS引脚，内置12-bit 1MSPS ADC**，这为荔枝糖提供了无限的可能性：\n-   FPC40P座，可接 RGB LCD，VGA转接板，高速DAC模块\n-   FPC24P座，可接DVP摄像头，高速ADC模块\n-   I2C接口的电阻触摸屏控制器，配合RGB LCD使用\n-   3路DCDC电源芯片，稳定高效的电源供应，Bank0 IO电平独立可调\n-   FPGA 配置Flash，8Mbit\n-   用户Flash，nor/nand可选\n-   板载FPGA JTAG下载调试器\n-   RGB LED\n-   相邻插针LVDS等长引出，引出8路GCLK，全引出8路ADC。\n-   双排插针间距900mil， **兼容面包板开发** \n-   半孔引出额外 **40 IO**，整板引出 **130+ IO** 。\n\n![荔枝糖资源图](./../assets/E203_function.png)\n\n![荔枝糖引脚图(旧板,底面丝印较小版本)](./../assets/E203_pin.png)\n\n![ 荔枝派引脚图(新板,底面丝印较大版本)](./../assets/Lichee-tang_NewIoMap.png)\n\n您可能需要这些来进一步了解荔枝糖： \n\n- EG4S20Datasheet [点我](https://dl.sipeed.com/shareURL/TANG/Primer/HDK/Datasheet/)里面的`EG4S20_DataSheet_V1.4.pdf`\n\n- 荔枝糖原理图 [点我](https://dl.sipeed.com/shareURL/TANG/Primer/HDK)里面的`LicheeTang_RV(Schematic).pdf`\n\n荔枝糖仍在不断地成长，对于外观、电路设计、文档内容甚至于荔枝糖的发展方向，\n我们欢迎您到[荔枝糖 | 建议与讨论帖](https://bbs.sipeed.com/cate/30/seq/1) 提出您宝贵的建议。\n\n同时欢迎各位加入荔枝派交流群 `834585530` 或者 [荔枝派Telegram电报群](https://t.me/sipeed)与众多开发者、爱好者即时交流。\n\n另外，FPGA开发环境TD (Tang Dynasty) 可在如下网址下载：\n- [https://eyun.baidu.com/s/3i6FbQzr](https://eyun.baidu.com/s/3i6FbQzr)\n- [https://dl.sipeed.com/shareURL/TANG/Primer/IDE](https://dl.sipeed.com/shareURL/TANG/Primer/IDE)"}, "/hardware/zh/tang/Tang-primer/Tang-primer.html": {"title": "Tang Primer", "content": "# Tang Primer\n\n> 已停产\n\n## 介绍\nLichee Tang Primer是基于安路科技的EG4S20BG256 FPGA芯片设计的简约型开发板。开发板设计小巧精致，将芯片的所有资源都引出，板载Micro-USB、USB-JTAG、TF卡槽、DVP摄像头接口、RGB(可接LCD屏、VGA等外设)等，并把部分IO资源引出，非常方便开发者拓展使用，开放RISC-V IP内核。\n\n![Tang_permier](./../../../assets/Tang/permier/Tang_permier_1.png)\n\n## 管脚定义\n\n![Tang_permier_2](./../../../assets/Tang/permier/Tang_permier_2.png)\n\n![Tang_permier_3](./../../../assets/Tang/permier/Tang_permier_3.png)\n\n## 参数\n\n| 项目                            | 参数                                           |\n| ------------------------------- | ---------------------------------------------- |\n| FPGA芯片                        | EG4S20BG256                                    |\n| 逻辑单元数量                    | 23520                                          |\n| 寄存器数量(FF)                  | 19600                                          |\n| Total Configuration SRAM (bits) | 4,988,928                                      |\n| EM SDR SDRAM                    | 2M X 32bits                                    |\n| 锁相环PLL                       | 1                                              |\n| I/O Bank总数                    | 1                                              |\n| 最多用户I/O数                   | 193                                            |\n| 核电压                          | 1.2V                                           |\n| 板载FPC40P座                    | 可接RGB LCD、VGA转接口、高速DAC等模块          |\n| 板载FPC20P座                    | 可接DVP摄像头、高速ADC模块                     |\n| 引出IO                          | 标准2.54mm和半邮票孔接口，引出芯片大部分IO资源 |\n| 板载IIC电阻触摸芯片屏控制器     | NS2009                                         |\n\n## 产品技术支持\n\nTang Permier开发板可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务support@sipeed.com。\n\n## 资料\n[烧录相关使用](/soft/Tang/zh/index_bak.md)\n[资料下载](https://dl.sipeed.com/shareURL/TANG/Primer)"}, "/hardware/zh/tang/Tang-primer/get_started/E203.html": {"title": "搭建蜂鸟开发环境", "content": "# 搭建蜂鸟开发环境\n\n- Note 现已经做好了 虚拟机镜像 \n链接：[https://dl.sipeed.com/shareURL/TANG/Primer/vmware](https://dl.sipeed.com/shareURL/TANG/Primer/vmware)，可直接使用\n\n## 下载交叉编译工具链\n\n百度网盘链接为: [https://pan.baidu.com/s/1eUbBlVc](https://pan.baidu.com/s/1eUbBlVc)\n\n由于这里提供的openocd不支持LicheeTang使用的flash型号，所以进行了一些修改;\n请[下载](https://fdvad021asfd8q.oss-cn-hangzhou.aliyuncs.com/LicheeTang/get_started/openocd) 新的进行替换\n\n## 配置工作环境\n\n1. 从github下载e200_opensource\n\n```bash\ngit clone https://github.com/SI-RISCV/e200_opensource.git \n```\n\n2. 将 [sirv-e203-lichee.tar.gz](https://fdvad021asfd8q.oss-cn-hangzhou.aliyuncs.com/LicheeTang/get_started/sirv-e203-lichee.tar.gz) 解压至 e200_opensource/sirv-e-sdk/bsp/env 目录下\n\n- 将下载好的交叉工具编译链以及 openocd 解压(记得使用新的openocd替换)，在 e200_opensource/sirv-e-sdk/work 目录下将其分别软连接到:\n  \n```sh\n    .\n    └── build \n    ├── openocd\n    │   └── prefix\n    │       └── bin -> /opt/riscv/gnu-mcu-eclipse/openocd/0.10.0-6-20180112-1448/bin/\n    └── riscv-gnu-toolchain\n    └── riscv32-unknown-elf\n    └── prefix\n    └── bin -> /opt/riscv/gnu-mcu-eclipse/riscv-none-gcc/7.2.0-2-20180111-2230/bin/\n```\n\n## 蜂鸟的调试\n\n我们使用ft2232d与openocd进行蜂鸟的调试，所以需要进行一些配置\n将ft2232d插入电脑，执行lsusb，可看到一下信息\n\n```bash\nBus 003 Device 019: ID 0403:6010 Future Technology Devices International, Ltd FT2232C Dual USB-UART/FIFO IC\n```\n\n新建 udev rules,使 ft2232d 能够被 plugde\n group 访问\n\n    vim /etc/udev/rules.d/45-ft2232.rules\n    ATTR{idVendor}==\"0403\", ATTR{idProduct}==\"6010\", MODE=\"660\", GROUP=\"plugdev\"\n\n查看该设备是否属于 plugdev\n\n    ls -l /dev/ttyUSB1\n    crw-rw---- 1 root plugdev 188, 1 7月  11 09:13 /dev/ttyUSB1\n\n将你自己的用户添加到 plugdev group 中\n\n    whoami\n    sudo usermod –a –G plugdev your user name\n    \n确认你自己的用户是否属于 plugdev group\n\n    groups\n\n## 编译下载demo程序\n\n编译下载demo程序，可参考文件夹下的demo_gpio.tar.gz在e200_opensource/sirv-e-sdk目录下执行\n\n```bash\nmake software PROGRAM=demo_gpio BOARD=sirv-e203-lichee #编译\n```\n\n```bash\nmake upload PROGRAM=demo_gpio BOARD=sirv-e203-lichee   #上传\n```\n## 调试\n打开两个terminal，一个运行openocd，另外一个运行gdb\n\n```bash\nmake run_openocd PROGRAM=demo_gpio BOARD=sirv-e203- lichee #运行openocd\n```\n```bash\nmake run_gdb PROGRAM= demo_gpio BOARD=sirv-e203- lichee    #运行gdb\n```\n\n`Tip 可能写的不是很清楚，如果有任何疑问欢迎提出，或者参看胡大的《手把手教你设计CPU：RISC-V处理器》（已经上市，请在京东、淘宝、当当上搜索 RISC-V关键字）`"}, "/hardware/zh/tang/Tang-primer/get_started/install_TD_win.html": {"title": "Windows的开发环境安装", "content": "# Windows的开发环境安装\n\n> 修改于2022.04.22\n\n## 安装TD\n\n想要进行FPGA开发需要安装TD，可以通过[下载站](https://dl.sipeed.com/shareURL/TANG)，下载TD安装包和license，如果下载速度过慢，建议使用[百度网盘](https://eyun.baidu.com/s/3htTXfaG)进行下载\n\n安装包 ：`TD_5.0.4_27252_Win7_64bit_NL.msi`\nLicense文件：`Anlogic_20230606.lic`\n\n双击打开第一个文件进行安装，安装结束之后将 Anlogic_20230606.lic 修改成Anlogic.lic放到对应安装目录的TD5.0.27252\\license中\n\n然后可以运行TD软件\n\n## 安装usb串口\n\n将 Tang Primer 插入您的计算机并打开设备管理器以查看信息。 \n根据 Windows 版本不同，它可能被命名为 WinUsb Device 或 USB-JTAG-Cable。 \n确保 USB VID:PID 为 0547:1002\n\n- win7系统没有安装驱动时\n\n![no_driver](./../../assets/get_started/no_driver.png)\n\n- win10系统没有安装驱动时\n\n![no_driver_win10](./../../assets/get_started/no_driver_win10.png)\n\n### win7安装驱动\n\n双击 WinUsb Device 选择更新驱动程序 \n![update_drive1](./../../assets/get_started/update_driver1.png)\n![update_drive2](./../../assets/get_started/update_driver2.png)\n\n浏览文件夹，选择TD安装目录下的驱动目录。 单击确定开始安装\n![choosefolder](./../../assets/get_started/choosefolder.png)\n\n安装成功，在设备管理器中可以看到 \n![installsuccess](./../../assets/get_started/installsuccess.png)\n\n### win10安装驱动\n\n> 在安装驱动程序本身之前，请确保首先禁用驱动程序签名强制，否则 Windows 10 将不允许您安装来自 Anlogic 的未签名驱动程序\n\n双击 WinUsb Device 选择更新驱动程序 \n![update_drive1](./../../assets/get_started/update_driver1_win10.png)\n![update_drive2](./../../assets/get_started/update_driver2_win10.png)\n\n浏览文件夹，选择TD安装目录下的driver\\win8_10_64目录。 单击确定。 然后单击让我从计算机上的可用驱动程序列表中选择\n![choosefolder](./../../assets/get_started/choosefolder_win10.png)\n\n单击Have Disk...，然后选择您在上一步中选择的目录，然后单击OK  \n![install_from_disk_win10](./../../assets/get_started/install_from_disk_win10.png)\n\n安装成功，在设备管理器中可以看到\n![installsuccess](./../../assets/get_started/installsuccess.png)\n\n## 验证安装\n\n打开TD，点击下载,如图所示\n![](./../../assets/get_started/87078310026779781.jpg)\n\n将 Tang Primer 插入您的计算机，然后点击下载对话框上的刷新按钮\n![](./../../assets/get_started/1823555291194601.jpg)\n\n出现上图的信息，则表示安装且激活成功"}, "/hardware/zh/tang/Tang-primer/get_started/fpga_download.html": {"title": "FPGA码流烧录", "content": "# FPGA码流烧录\n\n----\n\n<font size = 5>**Attention!! 下载码流需要先保证驱动安装成功**</font>\n\n1. 打开TD软件，选择 download\n![](https://fdvad021asfd8q.oss-cn-hangzhou.aliyuncs.com/migrate/E203_TD_download.png)\n\n2. 添加 bitstream文件，选择 [LicheeTangNewIoMap_BitStream.bit](https://fdvad021asfd8q.oss-cn-hangzhou.aliyuncs.com/LicheeTang/LicheeTangNewIoMap_BitStream.bit) 或其他码流文件\n![](https://fdvad021asfd8q.oss-cn-hangzhou.aliyuncs.com/migrate/E203_TD_add.png)\n\n3. 如果 Mode 为 JTAG，断电后则丢失程序。为了上电自动启动，需要选择 PROGRAM FLASH 。（时间较长）\n\n4. E203源码已开放，如果需要进行IO修改，或者功能修改，请使用源码自行进行修改。可以到 [Github](https://github.com/Lichee-Pi/Tang_E203_Mini.git) 下载。\n\n5. FPGA例程已上传，请到 [Tang_FPGA_Examples](https://github.com/Lichee-Pi/Tang_FPGA_Examples.git) 下载。"}, "/hardware/zh/tang/Tang-primer/get_started/install_Linux.html": {"title": "Linux的开发环境安装", "content": "# Linux的开发环境安装\n\n## 安装TD \n\n想要进行FPGA开发需要安装TD，可以通过[下载站](https://dl.sipeed.com/shareURL/TANG/Premier/IDE)，下载TD安装包和license，如果下载速度过慢的时候，建议使用[百度网盘](https://eyun.baidu.com/s/3i6FbQzr)进行下载\n\n对应应下载的IDE名称为 `TD_5.0.3_28716_NL_Linux.zip`\nLicense文件：`Anlogic_20230606.lic`\n\n双击打开第一个文件进行安装，安装结束之后将 Anlogic_20230606.lic 修改成Anlogic.lic放到对应安装目录的TD5.0.27252/license中\n\n下载完程序后，打开终端并 cd 进入TD压缩包所在的目录。 \n\n```bash\ncd <安装程序存档目录的路径 >\n```\n\n在linux中 /opt 目录是为所有不属于默认安装的软件和附加包保留的。 在这里我们为 TD创建一个安装目录\n\n```bash\nsudo mkdir /opt/TD_DECEMBER2018\n```\n\n将 TD 解压到 /opt/TD_DECEMBER2018 目录中：\n\n```bash\nsudo tar -xvf  TD_5.0.3_28716_NL_Linux.zip -d /opt/TD_DECEMBER2018/\n```   \n\n## 检查默认linux驱动\n\n将 Tang Primer 连接上电脑，执行lsusb命令然后查看信息。确定 USB VID:PID 为 0547:1002，如下图中的显示\n\n![](./assets/USB_VID.jpg)\n\n## 新建一个udev文件\n\n新建一个udev文件能够让Tang Primer被插件搜索到，\n在终端中执行以下命令以创建新的 udev 规则文件。\n\n```bash\nsudo nano /etc/udev/rules.d/91-anlogic-jtag.rules\n```\n\n将下面的内容复制到上面新建的文件中。\n\n```\nSUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"0547\", ATTRS{idProduct}==\"1002\", \\\n  GROUP=\"plugdev\", \\\n  MODE=\"0660\"\n\n```\n\n在终端中执行下面的命令来重启udev服务\n\n```bash\nsudo service udev restart\n```\n\n## 检查设备能否被TD检测到\n\n在td所在路径解压目录指定下面命令来打开gui界面\n\n```bash\n./td -gui\n```\n\n点击下图中框出来的下载按钮\n![](./assets/td_linux_gui.jpg)\n\n将开发板与电脑连接，点击下载界面的刷新按钮\n![](./assets/refresh.jpg)\n\n> 有奇怪的bug，导致JTAG只能在 400kbps 或者更低的速率运行"}, "/hardware/zh/tang/Tang-primer/Tang-primer-summary.html": {"title": "Tang Primer", "content": "# Tang Primer\n\nTang Primer 系列 FPGA 是 Sipeed 使用国产 FPGA 芯片作为主控所设计的大容量板卡。\n\n<table>\n    <thead>\n        <tr>\n            <th>Tang primer 20K</th>\n            <th>Tang primer （已停产）</th>\n        </tr>\n    </thead>\n        <tr>\n            <td><a href=\"./../tang-primer-20k/primer-20k.html\"><img src=\"./../tang-primer-20k/assets/primer_20k.png\" width=320></a></td>\n            <td><a href=\"./Tang-primer.html\"><img src=\"./../../../assets/Tang/permier/Tang_permier.jpg\" width=320></a></td>\n        </tr>\n</table>"}, "/hardware/zh/tang/Tang-Nano-Doc/SUMMARY.html": {"title": "Summary", "content": "---\ntitle: Summary\n---\n\nTang nano系列开发板是基于[高云半导体](http://www.gowinsemi.com.cn/)FPGA设计的开发板，多种型号刚好可以满足不同的需求：\n- Tang nano 1K 用极低的价格来让用户带领用户踏入FPGA领域\n- Tang nano 4K 带有一个Cortex m3的硬核，几乎是用户可以购买到的最低价的异构开发板\n- Tang nano 9K 配有极其丰富数量的逻辑单元，可以让用户在上面运行软核\n\n## 横向对比\n\n| 型号     | Tang Nano 1K         | Tang Nano 4K   | Tang Nano 9K        |\n| --- | -------- | ----------------- | -------- |\n| 图片             | ![Generated](./../Tang-Nano/assets/clip_image002.gif) | ![Generated](./../Tang-Nano/assets/clip_image004.gif) | ![Generated](./../Tang-Nano/assets/clip_image006.gif) |\n| 逻辑单元（LUT4） | 1152                                                         | 4608                                                         | 8640                                                         |\n| 硬核处理器       | 无                                                           | Cortex-M3                                                    | 无                                                           |\n| 有源晶振         | 27Mhz                                                        | 27Mhz                                                        | 27Mhz                                                        |\n| 显示接口         | 常见RGB屏幕接口                                              | HDMI                                                         | HDMI<br>  常见RGB屏幕接口<br>  SPI屏幕接口                       |\n| 摄像头           | 无                                                           | 可选OV2640                                                   | 无                                                           |\n| 外置SPI FLASH    | 仅预留焊盘                                                   | 默认焊接<br>32Mbit SPI FLASH                                     | 默认焊接<br>32Mbit SPI FLASH                                     |\n| TF卡座           | 无                                                           | 无                                                           | 有                                                           |\n| 下载器           | 板载USB-JTAG下载器                                           | 板载USB-JTAG下载器                                           | 板载USB-JTAG下载器&<br>USB-UART通信接口                                    |\n\n\n## 准备\n\n- [IDE安装](./get_started/install-the-ide.html)"}, "/hardware/zh/tang/Tang-Nano-Doc/questions.html": {"title": "Note", "content": "---\ntitle: Note\n---\n\n> 编辑于2022.06.29\n\n这里汇总一些常见问题，持续更新\n\n## Programmer 相关\n\n**首先确定设备管理器里面有两个converter，在进行下面的操作**\n\n![](./../assets/questions/converter.png)\n\n与上图中一样的话说明电脑与板子连接没问题；不存在的话请更改 usb口 或者重新安装驱动。\n\n<h3> <font color=\"\">下载频率</font></h3>\n\n要注意下载频率应该为 `2.5M`或者更低的数值。\n\n不然很可能导致一些奇怪的错误\n\n<details>\n  <summary><font color=\"#4F84FF\">点开查看操作步骤图片</font></summary>\n  <img src=\"./../assets/questions/cable.png\">\n  <p>点击下图中的 Frequency</p>\n  <img src=\"./../assets/questions/frequency.png\" >\n  <p>接着再点击 Save 即可</p>\n</details>\n\n### 下载失败\n\n对于 Programmer (下载程序) 要求使用 [这里](https://dl.sipeed.com/shareURL/TANG/programmer) 的文件。\n下载后解压替换掉Gowin对应安装目录的Programmer文件夹即可。\n不会替换的话可以在下载解压后的Programmer程序中手动添加对应下载文件来进行烧录。\n\n### ID code mismatch\n\n这种情况是工程芯片与下载芯片不一致。\n\n重新检查工程中的芯片型号（比如工程设置、引脚约束、各个IP中的型号）。\n\n对于 Nano 9K 和 Primer 20K 型号选择应该分别如下：\n\n<details>\n  <summary><font color=\"#4F84FF\">点开查看正确型号选择</font></summary>\n  <p>Nano 9K 应当选择的型号</p>\n  <img src=\"./../Tang-Nano-9K/nano_9k/Tang_nano_9k_Device_choose.png\" width=45%>\n  <p>Primer 20K 应当选择的型号</p>\n  <img src=\"./assets/primer_20k_device_choose.png\" width=45%>\n</details>\n\n对于其他板子选择型号的时候与芯片丝印相对应就行。\n\n### 下载卡住、下载非常慢\n\n不要选中带有 Verify 选项的。\n\n![](./../assets/questions/never_choose_verify.png)\n\n自己注意设置一下下载频率，一般设置为 2.5MHZ 不会有异常\n\n<details>\n  <summary><font color=\"#4F84FF\">点开查看操作步骤图片</font></summary>\n  <img src=\"./../assets/questions/cable.png\">\n  <p>点击下图中的 Frequency</p>\n  <img src=\"./../assets/questions/frequency.png\" >\n  <p>接着再点击 Save 即可</p>\n</details>\n\n### 找不到下载文件\n\n一般来说生成的下载文件（拓展后缀为.fs）在工程目录下的 impl/pnr 文件夹里面。\n\n<details>\n  <summary><font color=\"#4F84FF\">点开查看相关图文说明</font></summary>\n  <img src=\"./../assets/questions/fs_path.png\">\n  <p> 在上图中可以看到这个下载文件的路径为 /fpga_project1/impl/pnr/fpga_project1.fs </p>\n  <p></p>\n  <p> 其中 fpga_project1 为工程目录，impl 为 IDE 生成的目录，然后所需要的文件位于 pnr 文件夹内</p>\n  <p></p>\n  <p> 然后那个拓展名为 .fs 的文件就是下载到 fpga 的文件</p>\n</details>\n\n### No Gowin devices found\n\n这种情况可以和上面的 [下载失败](#下载失败) 里面的内容一样替换 Programmer 文件夹。\n\n### Cabel open failed\n\n参考上一步 No Gowin devices found 的操作后，再 programmer 里面进行下面操作：\n\n点击顶部菜单栏的 Edit->Cable Setting->Cable->Query，然后 Save 即可\n\n<details>\n  <summary><font color=\"#4F84FF\">点开查看操作步骤图片</font></summary>\n  <img src=\"./../assets/questions/cable.png\">\n  <p>点击下图中的 Query</p>\n  <img src=\"./../assets/questions/click_query.png\" >\n  <p>接着再点击 Save 即可</p>\n</details>\n\n### 烧录结束后没反应\n\n一般这种情况是没有选择正确的烧录文件。可以自己先对应着各个板子点灯文档里所选择的芯片型号来检查一下自己的工程，然后看看自己的代码是否有问题。\n\n## IDE 使用相关\n\n### 使用 GAO\n\nGAO 是高云半导体在线逻辑分析仪（Gowin Analyzer Oscilloscope）。安装高云 IDE 之后就能在对应的安装相对路径下看到相关文档了\n\n![GAO](./../assets/questions/gao.png)\n\n目前测试过IDE v1.9.8.1和之前的版本可使用。其他新版的不行\n\n### 查看IP文档\n\n<details>\n  <summary><font color=\"#4F84FF\">点开查看相关说明</font></summary>\n    <img src=\"./../assets/ip-reference.png\">\n</details>\n\n### 修改设置过的IP\n\n<details>\n  <summary><font color=\"#4F84FF\">点开查看相关说明</font></summary>\n    <img src=\"./../assets/ip-reconfigure.png\">\n</details>"}, "/hardware/zh/tang/Tang-Nano-Doc/get_started/install-the-ide.html": {"title": "安装IDE ", "content": "---\ntitle: 安装IDE \nkeywords: Sipeed, Gowin, Tang, Nano, fpga, 矽速\n---\n\n编辑于 2022.08.16\n\n使用高云半导体的 FPGA 需要用到 GOWIN 这个软件，对应的软件文档链接：\n<http://www.gowinsemi.com.cn/down.aspx?FId=n14:14:26>\n\n- 根据自己系统选择安装对应版本的 IDE\n- 对于 Linux 系统下下载可以使用 Openfpgaloader，可以查看本页底部的 [Linux 下烧录](#burn-in-linux) 来进行烧录操作。\n\n## 安装软件\n\n### 下载软件\n\n前往 http://www.gowinsemi.com.cn/faq.aspx 下载 IDE。\n\n![IDE](./assets/IDE-1.png)\n\n> 由于高云半导体的IDE在不断的更新中，上图为 2022 年 08 月 16 日截图\n\n---\n\nIDE 分为普通版和教育版：\n\n普通版的 IDE 需要 license，需要向高云半导体官方自行申请。\n\n教育版 IDE 不需要 license，且 V1.9.8.07 和之后的版本支持 GW2A-18C 器件。先在网页顶部注册、登陆然后就能够顺利下载下来教育版 IDE 了，目前教育版所支持的器件如下：\n\n![educational_device](./assets/educational_device.png)\n\n> 由于高云半导体的IDE在不断的更新中，上图为 2022 年 08 月 16 日截图\n\n其中：\n- GW2A-LV18PG256C8/I7 GW2A-18C 为 Primer 20K 所使用的芯片\n- GW1NR-LV9QN88PC6/I5 GW1NR-9C 为 Nano 9K 所使用的芯片\n- GW1NSR-LV4CQN48PC6/I5 GW1NSR-4C 为 Nano 4K 所使用的芯片\n\n### 开始安装\n\n#### Linux 系统\n\nLinux 版本的解压后里面存在着一个 bin 文件夹，然后可执行文件 gw.ide 就在所解压路径的 bin 文件夹中，用命令行来启动即可。\n\n#### Windows 系统\n\n下载相应的 IDE 之后所得到的是一个压缩包程序；对于 Windows 版本的解压后里面是一个可执行程序，双击安装继续下面的步骤就行。\n\n下面的所有安装步骤均为 Windows 平台：\n\n<div class=\"imbox\">\n    <img src=\"./assets/IDE-2.png\" width=45%>\n    <img src=\"./assets/IDE-3.png\" width=45%>\n</div>\n\n下图的两个都需要安装上。其中的 Gowin 为 IDE 本体， 另一个 programmer 相关的是烧录软件。由于我们所提供下载器会与新版的 IDE 不太兼容，因此建议前往 <a href=\"./../questions.html#下载失败\" target=\"blank\">programmer 相关里的下载失败</a> 来查看对应方法。\n\n<img src=\"./assets/IDE-4.png\" width=50%>\n\n下图的安装路径个人按照自己需要设置\n  \n<img src=\"./assets/IDE-5.png\" width=50%>\n\n安装中...\n\n<img src=\"./assets/IDE-6.png\" width=50%>\n\n下面这一步不要更改任何东西，按照默认的点击`Finish`就行，紧接着就是安装相关的驱动\n\n<img src=\"./assets/IDE-7.png\" width=50%>\n\n上面的`Finish`后会出现下面的内容，这是安装驱动的。\n\n<html>\n<div class=\"imbox\">\n    <img src=\"./assets/IDE-8.png\" width=45%>\n    <img src=\"./assets/IDE-9.png\" width=45%>\n</div>\n</html>\n\n这里需要选择接受协议才能继续安装\n  \n<html>\n<div class=\"imbox\">\n    <img src=\"./assets/IDE-10.png\" width=45%>\n    <img src=\"./assets/IDE-11.png\" width=45%>\n</div>\n</html>\n\n点击完成后桌面上会出现下面的图标\n  \n![IDE](./assets/IDE-12.png)\n\n到这里我们就完成了软件的安装\n\n## 使用 IDE\n\n### license 相关\n\n教育版本的 IDE 直接运行即可；非教育版的 IDE 需要自行前往 [点我](http://www.gowinsemi.com.cn/faq_view.aspx) 申请 license 后才能使用，其中申请license 时 MAC 最好填写本机的以太网网卡地址，避免以后可能因部分设置而导致 MAC 地址改变 license 验证失败。\n\n### 验证 license\n\n打开高云半导体 IDE 的时候，在弹出的 license 管理中，选择自己本地 license 的文件，验证保存即可。\n\n<img src=\"./assets/IDE-13.png\" alt=\"Broswer lic\" width=45%>\n<img src=\"./assets/check.png\"  alt=\"Check lic\"   width=45%>\n\n然后就可以开始使用高云半导体 IDE 了。\n\n### Programmer\n\n在烧录 FPGA 的时候可能因为安装 IDE 时所安装的 Programmer 软件不兼容我们所提供的下载器，因此对于 Windows 用户要求使用我们所提供的特定版本的 Programmer 软件，[点我](https://dl.sipeed.com/shareURL/TANG/programmer)跳转下载即可；对于 Linux 用户可以用 Openfpgaloader, 查看本页最底部的相关说明即可。\n\n## 拓展\n\n获取 license 可能需要等待一段时间。在此期间可以看看高云半导体的官方文档。下面简单说明一下：\n\n在 IDE 的安装路径下主要有如下内容：IDE 文件夹、Programmer 文件夹、uninst.exe；\n\n![ide_folder](./assets/ide_folder.png)\n\n**IDE** 文件夹：这里主要说一下里面的 **doc** 文件夹，用户在安装完之后可以在这个文件夹里面看到高云提供的大多数文档高云半导体，主要内容如下图所示：\n\n![IDE](./assets/doc-folder.png)\n\n**Programmer** 文件夹：里面是烧录软件，也有相关的文.3档。\n\n![programmer](./assets/programmer-folder.png)\n\n一般来说建议把安装 IDE 附带的 Programmer 删掉。替换成特定版本的（这样能减少不少问题）。可以在这里下载：[点我跳转](https://dl.sipeed.com/shareURL/TANG/programmer)\n\nuninst.exe：卸载IDE\n\n## 其他安装方法\n\n下面是高云半导体官方所提供的 IDE 安装方法，有需要的话可以自行查阅\n\n+ [高云半导体软件简介和安装](http://cdn.gowinsemi.com.cn/%E9%AB%98%E4%BA%91%E8%BD%AF%E4%BB%B6%E7%AE%80%E4%BB%8B%E5%92%8C%E5%AE%89%E8%A3%85.pdf)\n\n## Burn in linux\n\n[Linux系统下烧录方法](./flash_in_linux.html)"}, "/hardware/zh/tang/Tang-Nano-Doc/get_started/flash_in_linux.html": {"title": "Linux 下烧录方法", "content": "---\ntitle: Linux 下烧录方法\nkeyeords: Linux, FPGA, Gowin\n---\n\n在Ubuntu系统下我们建议使用**openFPGALoader**烧写，其他发行版尚未验证。以下为具体步骤\n\n### 安装openFPGALoader\n\n参考：https://trabucayre.github.io/openFPGALoader/guide/install.html\n\n直接在linux命令行执行下面命令即可\n\n```bash\n# preprocess\nsudo apt-get install libftdi1-2 libftdi1-dev libhidapi-hidraw0 libhidapi-dev libudev-dev zlib1g-dev cmake pkg-config make g++\n# compile\ngit clone https://github.com/trabucayre/openFPGALoader.git\ncd openFPGALoader\nmkdir build\ncd build\ncmake ../ # add -DBUILD_STATIC=ON to build a static version\n          # add -DENABLE_UDEV=OFF to disable udev support and -d /dev/xxx\n          # add -DENABLE_CMSISDAP=OFF to disable CMSIS DAP support\ncmake --build .\n# or\n# make -j$(nproc)\n# install\nsudo make install\n```\n\n### 烧录方法\n检测板卡\n```bash\n$ sudo ./openFPGALoader --detect # 对于这行命令应当在你上一步执行make install的目录下执行 \n# 下面是正常执行后显示的log\nJtag frequency : requested 6.00MHz   -> real 6.00MHz\nindex 0:\n        idcode 0x100481b\n        manufacturer Gowin\n        family GW1N\n        model  GW1N(R)-9C\n        irlength 8\n\n\n```\n\n下载码流\n\n```bash\n$ sudo ./openFPGALoader -b tangnano9k -f ../../nano9k_lcd/impl/pnr/Tang_nano_9K_LCD.fs\n# 其中的 -b 表示目标板型号，具体可以参考下面表格\n# -f 表示下载到 flash，不加的话会下载到 sram 中\n# 最后的是需要烧录的文件，应该找到对应目录下的 .fs 文件\n# 下面是成功执行后的log\nwrite to flash\nJtag frequency : requested 6.00MHz   -> real 6.00MHz  \nParse file Parse ../../nano9k_lcd/impl/pnr/Tang_nano_9K_LCD.fs: \nDone\nDONE\nJtag frequency : requested 2.50MHz   -> real 2.00MHz  \nerase SRAM Done\nerase Flash Done\nwrite Flash: [==================================================] 100.00%\nDone\nCRC check: Success\n\n```\n\n其中-b表示目标板型，可以使用以下取值：\n\n| Board name | FPGA            | Memory | Flash                         |\n| ---------- | --------------- | ------ | ----------------------------- |\n| tangnano   | GW1N-1 QFN48    | OK     | Internal Flash                |\n| tangnano1k | GW1NZ-1 QFN48   | OK     | Internal Flash                |\n| tangnano4k | GW1NSR-4C QFN48 | OK     | Internal Flash/External Flash |\n| tangnano9k | GW1NR-9C QFN88  | OK     | Internal Flash/External Flash |"}, "/hardware/zh/tang/Tang-Nano-Doc/examples.html": {"title": "Tang Nano 系列例程", "content": "# Tang Nano 系列例程\n\n- 编辑于2022.04.18\n\n这里汇总 Tang Nano 例程，持续更新\n\n## 前言\n\n对于Programmer(下载程序)建议使用\nhttps://dl.sipeed.com/shareURL/TANG/programmer 里面的文件。\n下载后解压替换掉Gowin对应安装目录的Programmer文件夹即可。\n不会替换的话可以在下载解压后的Programmer程序中手动添加对应下载文件来进行烧录。\n\n另外欢迎投稿或者提供例程，有什么例程想法的话也可以提出。\n\n## 板型\n\n### Tang Nano\n\n> 板载下载器为CH552\n\n- [点灯例程](./../Tang-Nano/examples/1_led.html)\n- [驱屏教程](./../Tang-Nano/examples/2_lcd.html)\n\n### Tang Nano 1K\n\n- [点灯例程](./../Tang-Nano-1K/examples/LED.html)\n- [驱屏教程](./../Tang-Nano-1K/examples/LCD.html)\n\n### Tang Nano 4K\n\n- [点灯例程](./../Tang-Nano-4K/examples/LED.html)\n- HDMI显示工程：https://github.com/sipeed/TangNano-4K-example/tree/main/dk_video/project\n- 摄像头内容显示在HDMI工程：https://github.com/sipeed/TangNano-4K-example/tree/main/dk_video/project\n- 在Nano 4K上运行GBA的工程：https://github.com/Martoni/GbHdmi\n- Cortex-m3点灯：待更新\n- Cortex-m3串口通信：待更新\n\n### Tang Nano 9K\n\n- [点灯例程](./../Tang-Nano-9K/examples/LED.html)\n- [驱RGB屏教程](./../Tang-Nano-9K/examples/LCD.html)\n- [PicoRV 在9K上运行的示例](./../Tang-Nano-9K/examples/picoRV_examples.html)\n- litex 在 9K 支持：https://github.com/litex-hub/litex-boards\n- ~~使用软核驱动1.14寸SPI屏幕：待更新~~\n- [FPGA驱动1.14 SPI屏幕](./../Tang-Nano-9K/examples/spi_lcd/spi_lcd.html)\n- HDMI显示例程：即将更新\n- 驱动MIPI接口屏幕：待更新"}, "/hardware/zh/tang/Tang-Nano-Doc/index.html": {"title": "Tang Nano", "content": "# Tang Nano\n\n## 什么是 Tang Nano \n\nTang Nano 是基于高云半导体小蜜蜂系列 GW1N-1 FPGA 的简约型开发板。\n\n板载芯片为 GW1N-LV1QN48C6/I5，搭载了 1152 LUT4 的逻辑资源，1 PLL 和 4 Block 合计 72Kbit SRAM，封装为 QFN48。开发板引出了所有 I/O 接口，适用于小型数字逻辑的设计和实验。\n\n板载 64Mbits PSRAM，为 FPGA 提供了丰富的存储资源。\n\n同时，该开发板具有 RGB接口，能够与 LCD屏、VGA转换器 等外设连接，非常适合于屏幕显示等类型的应用。\n\n板子板载 24MHz 晶振和 USB转JTAG下载器，能够容易的连接电脑进行开发，而不需要外部的调试器和时钟输入。板载的 RGB LED 可用于指示和调试，同时 FPGA IOBANK 分组可调的IO电平使得开发板能够容易的对外部各种不同电平规范的器件接口。\n\n**板载资源:**\n\n+ GW1N-1\n+ 64Mbit QSPI PSRAM\n+ RGB LED\n+ RGB LCD 40P接口及驱动电路\n+ 24MHz晶振\n+ USB调试器，基于Type-C通讯接口\n\n## 引脚定义\n\n![Nano 引脚](./../../assets/tang_nano_pinout_v1.0.0_w5676_h4000_large.png)\n\n## 资源下载链接\n\n+ [高云半导体官方下载站](http://www.gowinsemi.com.cn/faq.aspx)\n+ [dl 下载站](http://dl.sipeed.com/TANG/Nano)\n+ [Tang nano 原理图](../assets/files/Tang-NANO.pdf)"}, "/hardware/zh/tang/Tang-Nano-4K/Tang-nano-4k.html": {"title": "Tang nano 4k 一些例程", "content": "---\ntitle: Tang nano 4k 一些例程\n---\n\n对于Programmer(下载程序)建议使用 https://dl.sipeed.com/shareURL/TANG/programmer 里面的文件。\n下载后解压替换掉Gowin对应安装目录的Programmer文件夹即可。\n不会替换的话可以在下载解压后的Programmer程序中手动添加对应下载文件来进行烧录。\n\n参考工程[git仓库](https://github.com/sipeed/TangNano-4K-example)\n\n接好摄像头和HDMI显示器之后，将这个工程烧录到开发板上可以看到相应的现象。\n\n- [点灯例程](./examples/LED.html)\n- HDMI显示工程：https://github.com/sipeed/TangNano-4K-example/tree/main/dk_video/project\n- 摄像头内容显示在HDMI工程：https://github.com/sipeed/TangNano-4K-example/tree/main/dk_video/project\n- Cortex-m3点灯：待更新\n- Cortex-m3串口通信：待更新\n- 其他（有什么想法可以提出来，合适的话会被采纳）"}, "/hardware/zh/tang/Tang-Nano-4K/Nano-4K.html": {"title": "Tang Nano 4K ", "content": "# Tang Nano 4K \n\n## Tang Nano 4K 开发板\n\nTang Nano 4K是基于[高云半导体](http://www.gowinsemi.com.cn/)的小蜜蜂系列 GW1NSR-LV4C 设计的简约型开发板。开发板设计小巧精致，将芯片的所有资源都引出，板载Type-C、USB-JTAG、DVP、HDMI座子及其电路等，并把所有IO资源引出，方便开发者拓展使用，非常适用于小型数字逻辑的设计和实验。\n\n![Tang Nano 4K](./../Tang-Nano/assets/4k-1.jpg)\n![Tang Nano 4K](./../Tang-Nano/assets/4k-2.jpg)\n\n## 产品参数\n\nTang Nano 4K开发板板载的GW1NSR-LV4C，是一款系统级封装芯片，内部集成了GW1NS系列可编辑逻辑器件产品和PSRAM存储芯片。\n\n- 下表为与前代同系列产品对比图\n\n| 型号             | Tang Nano           | Tang Nano 4K      |\n| ---------------- | ------------------- | ----------------- |\n| FPGA芯片         | GW1N-1-LV           | GW1NSR-LV4C       |\n| 逻辑单元         | 1152                | 4608              |\n| 寄存器           | 864                 | 3456              |\n| 硬核处理器       | 无                  | Coetex M3         |\n| Block SRAM(bits) | 72K                 | 180K              |\n| 用户闪存(bits)   | 96K                 | 256K              |\n| 锁相环PLL        | 1                   | 2                 |\n| I/O Bank 总数    | 4                   | 4                 |\n| 最多用户I/O数    | 41                  | 44                |\n| 显示屏接口       | 标准40P RGB LCD接口  | HDMI接口          |\n| 摄像头接口       | None                | 常见的DVP顺序接口 |\n| 尺寸             | 58.4mm\\*21.3mm      | 60mm\\*22.86mm     |\n| 下载接口         | USB Type-C接口      | USB Type-C接口    |\n\n### 引脚图\n\n![Pinmap](./../Tang-Nano/assets/Tang_nano_4K_0813.png)\n\n## 开发环境\n\n特别注意：\n使用ide的时候版本需要>= v1.9.7.01 Beta；烧录软件要求使用我们所提供的 [Programmer](https://dl.sipeed.com/shareURL/TANG/programmer)\n- 安装IDE的方法[参考](./../Tang-Nano-Doc/get_started/install-the-ide.html)\n\n## 下载方式\n\nTang Nano 4K 开发板板载 BL702 芯片，为 GW1NSR-4C 提供 JTAG 调试功能，开发板可以直接连接电脑使用 [GOWIN programmer](https://dl.sipeed.com/shareURL/TANG/programmer) 进行下载比特流，不需要额外准备下载器。\n\n## 资料\n\n- [相关例程](./../Tang-Nano-Doc/examples.html)\n- [Schematic](https://dl.sipeed.com/shareURL/TANG/Nano%204K/HDK/02_Schematic)\n- [Tang Nano 4K 资料库](https://dl.sipeed.com/shareURL/TANG/Nano%204K)\n\n## 补充\n\n1. 如果有什么疑问，欢迎加群 `834585530`, 或者去[论坛](bbs.sipeed.com)发帖。\n2. 下载 FPGA 是要求使用 [这里](https://dl.sipeed.com/shareURL/TANG/programmer) 的 Programmer 软件。不然有极大概率不能下载固件到板子。\n3. 有问题的话先去 [常见问题](./../Tang-Nano-Doc/questions.html) 自查，通常来说使用 [这里](https://dl.sipeed.com/shareURL/TANG/programmer) 的 Programmer 软件能解决 99% 问题。\n4. 对于 Cortex-M3 硬核建议使用串口来打印调试信息来纠错，或者有能力的可以选择其他方式。"}, "/hardware/zh/tang/Tang-Nano-4K/examples/LED.html": {"title": "Nano 4K 点灯", "content": "---\ntitle: Nano 4K 点灯\n---\n\n> 编辑于2022年3月31日\n\n- 点灯简单示例\n\n## 新建项目\n\n新建工程：File-->NEW-->FPGA Design Project-->OK\n    ![](./../../Tang-Nano/assets/LED-1.png)\n\n弹出的选项框选择存储路径和工程名称（路径和文件名称要求是英文路径）\n    ![](./../../Tang-Nano/assets/LED-2.png)\n\n选择对应的型号：\n    ![Tang_nano_4k_device_choose](./../assets/Nano_4K_device_choose.png)\n\n- 可能有部分板子主控芯片型号为 C7/I6 ，用户自行选择一下即可\n\n## 编写代码\n\n新建工程之后接下来进行代码编辑，在Design工作栏内新建“Verilog File”,如下图所示：\n    ![](./../../Tang-Nano/assets/LED-5.png)\n\n为文件命名（要求写英文名，不然后续综合很容易报错）；\n   一般来说文件名称应该和文件内容模块名称相同\n    ![](./../../Tang-Nano/assets/LED-6.png)\n\n双击文件，可以在右侧的编辑框中进行代码的编写。\n    ![](./../../Tang-Nano/assets/LED-7.png)\n\n以点灯为例，将下方的 示例代码 粘贴到自己的文件中，也可以自己编写自己的代码。\n\n```verilog\nmodule led (\n    input   sys_clk,\n    input   sys_rst_n,     // reset input\n    output  reg led        // LED\n);\n\nreg [23:0] counter;        //定义一个变量来计数\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin // Counter block\n    if (!sys_rst_n)\n        counter <= 24'd0;\n    else if (counter < 24'd1349_9999)       // 0.5s delay\n        counter <= counter + 1'b1;\n    else\n        counter <= 24'd0;\nend\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin // Toggle LED\n    if (!sys_rst_n)\n        led <= 1'b1;\n    else if (counter == 24'd1349_9999)       // 0.5s delay\n        led <= ~led;                         // ToggleLED\nend\n\nendmodule\n\n```\n\n## 综合、约束、布局布线\n\n### 综合\n\n保存编辑的代码后转到“Process”界面下，对编辑好的代码进行综合，即双击“Systhesize”\n    ![](./../../Tang-Nano-9K/nano_9k/nano_9k_synthsize.png)\n\n运行之后如没有报错而且 Synthesize 变成下图里的图标\n    ![](./../../Tang-Nano/assets/LED.png) \n\n说明前面编辑的代码无误；如果有错，根据错误提示进行改正即可。\n\n### 约束\n\n- 此处未涉及时钟约束\n\n想让 Fpga 实现代码的功能，必须将代码中涉及的 端口 绑定到 Fpga 实际的引脚上。\n\n如下图，在左边的工作区点击 process，然后双击 FloorPlanner\n\n![](./../../assets/examples/led_pjt_2.png)\n\n在工程中第一次点击，可能会提示说创建文件，点击确定即可\n![](./../../Tang-Nano/assets/LED-9.png)\n\nnano 4k的rgb led电路图如下所示\n    ![](./../assets/LED_Pin.png \"nano 4k rgb pins\")\n\n| port      | I/O    | pin | desc       |\n| --------- | ------ | --- | ---------- |\n| sys_clk   | input  | 45  | 时钟输入脚 |\n| sys_rst_n | input  | 15  | 系统复位脚 |\n| led       | output | 10  | 红灯       |\n\n对于交互式管脚约束有下图中的两种方法\n- 将对应的端口拖拽到芯片引脚上\n- 在IO约束中输入端口对应的引脚编号\n\n因此对应在管脚约束里的内容应该如下图\n  \n![Led floorplanner](./../assets/LED_FloorPlanner.png)\n\n关于 FloorPlanner 更多的相关说明，可以参考 [SUG935-1.3_Gowin设计物理约束用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG935-1.3_Gowin%E8%AE%BE%E8%AE%A1%E7%89%A9%E7%90%86%E7%BA%A6%E6%9D%9F%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)。里面的内容都很有用\n\n完成之后记得保存一下\n\n- LED对应的IO10默认是mode Pin，无法直接约束，需要在顶部菜单栏\nProject -> Configuration ->Palse&Route -> Dual-Purpose Pin,\n勾选 Use MODE as regular IO,如下图\n\n<img src=\"./../tang/assets/../../../assets/Nano-4K/4K-led-2.png\" alt=\"image-20210810161934170\" style=\"zoom:50%;\" />\n\n\n### 布局布线\n\n- 完成脚约束后，接下来进行布局布线操作。\n\n![Place&&Route](./../assets/Place&Route.png)\n\n> 失败的话请从头再来一遍\n\n## 烧录到开发板\n\n- 成功完成上面步骤后就已经生成高云半导体的比特流文件了，可以进行下面的步骤来将文件烧录到板子了。\n\n接下来是连接板子，烧录固件，可参照下图选择版型：\n![](./../assets/nano_4k_device_scan.png)\n\n在Process界面双击`Program Device` 后打开烧录工具\n    ![](./../assets/Open_Programmer.png)\n\n\n接下来选择 SRAM下载 即可验证程序。有固化需求的自行选择烧录到flash\n    ![](./../assets/Programmer_device.png)\n\n\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano-4K/examples/HDMI.html": {"title": "", "content": ""}, "/hardware/zh/tang/tang-primer-20k/primer-20k.html": {"title": "Tang Primer 20K", "content": "# Tang Primer 20K\n\n> 编辑于 2022.08.22\n\n## 概述\n\nTang Primer 20K 是基于 [GW2A-V18PG256C8IC8I7](http://www.gowinsemi.com.cn/prod_view.aspx?TypeId=10&amp;FId=t3:10:3&amp;Id=167#GW2A) 所设计的一款 DDR3 sodimm 封装的核心板，额外准备了两个底板，分别为 Dock 底板和 Lite 底板。\n\n## 核心板\n\n### 外设框图\n\n<div>\n    <img src=\"./assets/20k_front.png\" width=45%>\n    <img src=\"./assets/20k_back.png\" width=45%>\n</div>\n\n### 相关参数\n\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th style=\"text-align:center\">项目</th>\n\t\t\t<th style=\"text-align:center\">参数</th>\n\t\t\t<th style=\"text-align:center\">补充</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td style=\"text-align:left\">主控</td>\n\t\t\t<td style=\"text-align:left\"><a href=\"http://www.gowinsemi.com.cn/prod_view.aspx?TypeId=10&amp;FId=t3:10:3&amp;Id=167#GW2A\">GW2A-LV18PG256C8IC8I7</a>\n\t\t\t</td>\n\t\t\t<td style=\"text-align:left\">\n\t\t\t\t<table>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>逻辑单元(LUT4)</td>\n\t\t\t\t\t\t<td>20736</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>寄存器(FF)</td>\n\t\t\t\t\t\t<td>15552</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>分布式静态随机存储器S-SRAM(bits)</td>\n\t\t\t\t\t\t<td>41472</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>块状静态随机存储器B-SRAM(bits)</td>\n\t\t\t\t\t\t<td>828K</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>块状静态随机存储器数目B-SRAM(个)</td>\n\t\t\t\t\t\t<td>46</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>乘法器(18x18 Multiplier)</td>\n\t\t\t\t\t\t<td>48</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>锁相环(PLLs)</td>\n\t\t\t\t\t\t<td>4</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>I/O Bank 总数</td>\n\t\t\t\t\t\t<td>8</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:left\">内存</td>\n\t\t\t<td style=\"text-align:left\">128M DDR3</td>\n\t\t\t<td style=\"text-align:left\">128Meg x 16</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:left\">Flash</td>\n\t\t\t<td style=\"text-align:left\">32Mbits NOR Flash</td>\n\t\t\t<td style=\"text-align:left\">下载方式参考底部相关问题</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:left\">调试接口</td>\n\t\t\t<td style=\"text-align:left\">Jtag + Uart</td>\n\t\t\t<td style=\"text-align:left\">JST SH1.0 8Pins 连接器</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:left\">SD 卡槽</td>\n\t\t\t<td style=\"text-align:left\">一个</td>\n\t\t\t<td style=\"text-align:left\">推拉式</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:left\">显示接口</td>\n\t\t\t<td style=\"text-align:left\">8Pins spi lcd 连接器</td>\n\t\t\t<td style=\"text-align:left\"></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:left\">整体封装</td>\n\t\t\t<td style=\"text-align:left\">204P DDR3 Sodimm 金手指</td>\n\t\t\t<td style=\"text-align:left\"></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align:left\">可用 IO</td>\n\t\t\t<td style=\"text-align:left\">一共 117 个</td>\n\t\t\t<td style=\"text-align:left\"></td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n## 底板对比\n\n### Dock 底板产品图\n\n<div>\n<img src=\"./assets/dock-up.png\" alt=\"dock-up\" width=45%>\n<img src=\"./assets/dock-back.png\" alt=\"dock-back\" width=45%>\n</div>\n\n### Lite 底板产品图\n\n底板左上角 R8 与 P9 之间为 P8 引脚。已标明\n\n<div>\n<img src=\"./assets/lite-up.png\" alt=\"lite-up\" width=45%>\n<img src=\"./assets/lite-back.png\" alt=\"lite-back\" width=45%>\n</div>\n\n### 外设参数对比\n\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th rowspan=\"2\" colspan=\"2\">项目</th>\n\t\t\t<th colspan=\"2\">Dock</th>\n\t\t\t<th colspan=\"2\">Lite</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th>数量</th>\n\t\t\t<th>补充说明</th>\n\t\t\t<th>数量</th>\n\t\t\t<th>补充说明</th>\n\t\t</tr>\n\t</thead>\n\t<body>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">RGB 接口</td>\n\t\t\t<td>1</td>\n\t\t\t<td>RGB565 40P FPC 连接器</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">DVP 接口</td>\n\t\t\t<td>1</td>\n\t\t\t<td>24P FPC 连接器</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">麦克风阵列接口</td>\n\t\t\t<td>1</td>\n\t\t\t<td>10P FPC 连接器</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">触摸接口</td>\n\t\t\t<td>1</td>\n\t\t\t<td>4P FPC 连接器</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">PMOD 接口</td>\n\t\t\t<td>4</td>\n\t\t\t<td></td>\n\t\t\t<td>4</td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">3.5mm 耳机接口</td>\n\t\t\t<td>1</td>\n\t\t\t<td>使用 LPA4809MSF 驱动</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">拨码开关</td>\n\t\t\t<td>1</td>\n\t\t\t<td>5P 拨码开关</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">滑动开关</td>\n\t\t\t<td>1</td>\n\t\t\t<td>切换板载 USB 功能</td>\n\t\t\t<td>2</td>\n\t\t\t<td>用户自定义功能</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"white-space:nowrap\" rowspan=\"2\">Type-C 接口</td>\n\t\t\t<td style=\"white-space:nowrap\">USB-JTAG&UART</td>\n\t\t\t<td>1</td>\n\t\t\t<td>板载 BL702 芯片用来<br>下载比特流并提供串口功能</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>自定义 USB</td>\n\t\t\t<td>1</td>\n\t\t\t<td>USB3317 芯片与滑动开关<br>来自定义该 USB 接口功能</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">无线天线</td>\n\t\t\t<td>1</td>\n\t\t\t<td>使用 BL702 芯片的无线功能</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">按键</td>\n\t\t\t<td>6</td>\n\t\t\t<td>一个用来烧录 BL702,<br>剩下五个用户自定义功能</td>\n\t\t\t<td>2</td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">LED</td>\n\t\t\t<td>6</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">HDMI 接口</td>\n\t\t\t<td>1</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">以太网接口</td>\n\t\t\t<td>1</td>\n\t\t\t<td>TL8201F 芯片实现以太网功能</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">RGB LED</td>\n\t\t\t<td>1</td>\n\t\t\t<td>WS2812 灯珠</td>\n\t\t\t<td></td>\n\t\t\t<td></td>\n\t\t</tr>\n\t</body>\n</table>\n\n\n## 硬件资料汇总\n\n规格书、原理图、尺寸图等均可在这里找到：[点击这里](https://dl.sipeed.com/shareURL/TANG/Primer_20K)\n\n## 上手指引\n   \n1. 安装 IDE ：[点击这里](https://wiki.sipeed.com/soft/Tang/zh/Tang-Nano-Doc/get_started/install-the-ide.html)\n\n2. 阅读 <a href=\"https://wiki.sipeed.com/news/others/20k_lite_start/20k_lite_start.html\" target=\"blank\">这个</a> 完成点灯操作。\n\n    进行完上面的点灯操作后可以考虑将一个灯闪改为多个灯一起闪，来提升自己\n\n3. 如果进行完上面的点灯操作后后感觉有压力，可以自己查漏补缺：\n   可以在下面的这些网站学习 Verilog:\n\t+ 在线免费教程：[菜鸟教程](https://www.runoob.com/w3cnote/verilog-tutorial.html)（学习Verilog）\n\t+ 在线免费 FPGA 教程：[Verilog](https://www.asic-world.com/verilog/index.html)\n\t+ Verilog 刷题网站：[HDLBits](https://hdlbits.01xz.net/wiki/Main_Page)\n\t+ 在线高云半导体视频教程：[点击这里](http://www.gowinsemi.com.cn/video_complex.aspx?FId=n15:15:26)\n\n   对 IDE 使用有疑问的话，可以查看官方的一些文档来熟悉相关内容\n   - [SUG100-2.6_Gowin云源软件用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG100-2.6_Gowin%E4%BA%91%E6%BA%90%E8%BD%AF%E4%BB%B6%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n   - [SUG949-1.1_Gowin_HDL编码风格用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG949-1.1_Gowin_HDL%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n   - <a href=\"http://cdn.gowinsemi.com.cn/UG286-1.9.1_Gowin%E6%97%B6%E9%92%9F%E8%B5%84%E6%BA%90(Clock)%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf\">UG286-1.9.1_Gowin时钟资源(Clock)用户指南.pdf</a>\n   - [SUG940-1.3_Gowin设计时序约束用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG940-1.3_Gowin%E8%AE%BE%E8%AE%A1%E6%97%B6%E5%BA%8F%E7%BA%A6%E6%9D%9F%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n   - [SUG502-1.3_Gowin_Programmer用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG502-1.3_Gowin_Programmer%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n   - [SUG114-2.5_Gowin在线逻辑分析仪用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG114-2.5_Gowin%E5%9C%A8%E7%BA%BF%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90%E4%BB%AA%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)\n\n   上面的所有文档都已经打包进了下载站[点我跳转](https://dl.sipeed.com/shareURL/TANG/Primer_20K/07_Chip_manual/CN/%E9%80%9A%E7%94%A8%E6%8C%87%E5%BC%95)，需要的话可以点击压缩包全都下载下来。\n\n## 例程汇总\n\nhttps://github.com/sipeed/TangPrimer-20K-example\n\n部分教程：\n\n- LED drive ：<a href=\"https://wiki.sipeed.com/news/others/20k_lite_start/20k_lite_start.html\" target=\"blank\">点我跳转</a>\n\n## 交流方式\n\n- **交流论坛: [bbs.sipeed.com](bbs.sipeed.com)**\n- **QQ 交流群：[834585530](https://jq.qq.com/?_wv=1027&k=wBb8XUan)**\n- 直接本页下方留言\n\n## 补充说明\n\n对于板子上的 bank 0、bank 1、bank 7 这 3 个 bank 电压，默认所接的是 3.3V，对应的 bank IO 会对外输出 3.3V 电压。如果需要输入自定义的 IO bank 电压，请拆除 R5 和 R9，请参考对应 Assembly [点我跳转](https://dl.sipeed.com/shareURL/TANG/Primer_20K/03_Bit_number_map) 图来确定 R5 和 R9 的位置。\n\n![io_vltage](./assets/io_vltage.png)\n\n对应核心板原理图上在金手指处的说明如下\n\n![sodimm_voltage](./assets/sodimm_voltage.png)\n\n## 相关问题\n\n### 如何下载到外部 FLASH\n进行如下选项设置：\n<img src=\"./assets/flash_mode.png\" alt=\"flash_mode\" width=75%>\n<!-- ![flash_mode](./assets/flash_mode.png) -->\n\n### 烧录后没反应或者引脚现象不对\n首先确定选择了正确的型号，下图中的每一个参数都要求一致\n<img src=\"./assets/device_choose.png\" alt=\"device_choose\" width=75%><br>\n<!-- ![device_choose](./assets/device_choose.png) -->\n然后检查自己的代码和对应的仿真波形是否满足要求\n\n### 之前成功烧录过一次外部 Flash 后 Programmer 软件无法再烧录\n\n注意描述是之前成功烧录过一次 Flash。\n\n这种情况默认为启用了错误的引脚复用而导致下载器不能再识别到 FPGA 的 JTAG。解决办法是在芯片通电前将核心板上的 Flash 使能引脚拉高来阻止 FPGA 加载固件。使用金属将板子上的 Flash 短接后再通电即可解决。短接的具体位置见下图 Flash 处两侧的红框处。\n\n![flash_cs](./assets/flash_cs.png)\n\n### 更多问题及其解决办法前往[相关问题](./../Tang-Nano-Doc/questions.html)查看"}, "/hardware/zh/tang/tang-primer-20k/examples/LED.html": {"title": "", "content": "# 施工中"}, "/hardware/zh/tang/tang-primer-20k/examples/LCD.html": {"title": "", "content": "# 施工中"}, "/hardware/zh/tang/Tang-Nano/Nano.html": {"title": "Tang Nano", "content": "# Tang Nano\n\n> 已停产\n\n## 概述\n\nTang Nano是基于高云半导体的小蜜蜂系列GW1N-1 FPGA设计的简约型开发板。开发板设计小巧精致，将芯片的所有资源都引出，板载Type-C、USB-JTAG、PSRAM、RGB接口(可接LCD屏、VGA等外设)等，并把所有IO资源引出，方便开发者拓展使用，非常适用于小型数字逻辑的设计和实验。\n\n![](/hardware/assets/Tang/Nano/Tang_Nano.jpg)\n\n## 参数\n\nTang Nano开发板板载的GW1N-1 FPGA芯片功能非常强大，具有较丰富的逻辑资源，支持多种I/O电平标准，内嵌块状静态随机存储器、锁相环、Flash等资源，是一款具有非易失性的FPGA产品;另外，板载64Mbits PSRAM，为FPGA提供了丰富的存储资源。\n\n![Nano](/hardware/assets/Tang/Nano/Tang-Nano-4.png)\n\n| 项目             | 参数        |\n| ---------------- | ----------- |\n| 核心             | GW1N-1 FPGA |\n| 逻辑单元(LUT4)   | 1152        |\n| 寄存器(FF)       | 864         |\n| Block SRAM(bits) | 72K         |\n| B-SRAM块个数     | 4           |\n| 用户闪存(bits)   | 96K         |\n| 锁相环PLL        | 1           |\n| I/O Bank总数     | 4           |\n| 最多用户I/O数    | 41          |\n| 核电压           | 1.2V        |\n\n\n![Nano-Pin](/hardware/assets/Tang/Nano/Tang-Nano-Pin.png)\n\n## 产品技术支持\nTang Nano开发板可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>\n\n## 资料\n\n[相关例程](./../Tang-Nano-Doc/examples.html#板型)\n[资料下载](https://dl.sipeed.com/shareURL/TANG/Nano)"}, "/hardware/zh/tang/Tang-Nano/start.html": {"title": "摄像头和HDIM屏幕显示", "content": "# 摄像头和HDIM屏幕显示\n\n具体工程[文件](https://github.com/sipeed/TangNano-4K-example)\n\n接好摄像头和HDMI显示器之后，将这个工程烧录到开发板上即可使用了。"}, "/hardware/zh/tang/Tang-Nano/Tang-nano.html": {"title": "Tang nano 一些例程", "content": "---\ntitle: Tang nano 一些例程\n---\n\n对于Programmer(下载程序)建议使用 https://dl.sipeed.com/shareURL/TANG/programmer 里面的文件。\n下载后解压替换掉Gowin对应安装目录的Programmer文件夹即可。\n不会替换的话可以在下载解压后的Programmer程序中手动添加对应下载文件来进行烧录。\n\n\n## 例程\n- [点灯例程](./examples/1_led.html)\n- [驱屏教程](./examples/2_lcd.html)"}, "/hardware/zh/tang/Tang-Nano/user.html": {"title": "一些例程", "content": "# 一些例程\n\n## 点灯LED\n\n1. 新建工程：File-->NEW-->FPGA Dsign Project-->OK\n    ![](./assets/LED-1.png)\n\n2. 弹出的选项框选择存储路径和工程名称（路径和文件名称要求是英文路径）\n    ![](./assets/LED-2.png)\n\n3. 选择合适的型号：\n    ![](./assets/LED-3.png)![](./assets/LED-4.png)\n\n4. 新建好工程之后接下来进行代码编辑，在Design工作栏内新建“Verilog File”,如下图所示：\n    ![](./assets/LED-5.png)\n5. 为文件命名（要求写英文名，不然后续综合很容易报错）\n    ![](./assets/LED-6.png)![](./assets/LED-7.png)\n6. 双击文件，可以在右侧的编辑框中进行代码的编写。以编辑流水灯为例，将下方的“LED例程代码”粘贴到自己的文件中，也可以自己编写自己的代码，例程代码地址：<https://github.com/sipeed/TangNano-1K-examples>\n\n    ```v\n    module led (\n        input sys_clk,\n        input sys_rst_n,\n        output reg [2:0] led // 110 R, 101 B, 011 G\n    );\n\n    reg [31:0] counter;\n\n    always @(posedge sys_clk or negedge sys_rst_n) begin\n        if (!sys_rst_n) begin\n            counter <= 31'd0;\n            led <= 3'b110;\n        end\n        else if (counter < 31'd1350_0000)       // 0.5s delay\n            counter <= counter + 1'b1;\n        else begin\n            counter <= 31'd0;\n            led[2:0] <= {led[1:0],led[2]};\n        end\n    end\n\n    Endmodule\n\n    ```\n\n7. 代码编辑结束后转到“Process”界面下，对编辑好的代码进行综合，即运行“Systhesize”\n    ![](./assets/LED-8.png)\n    运行的结果如上图出现 ![](./assets/LED.png) 的形状，且下方结果栏不出现任何从报错，说明前面编辑的代码无误，如果有错，根据错误提示进行改正即可。\n\n8. 接下来通过  打开“FloorPlanner”实现管脚约束（前面的综合如果运行失败，这一步无法进行），第一次打开会弹出缺少.cst文件：\n    ![](./assets/LED-9.png)\n    选择“OK”即可；\n    初始界面如图：![](./assets/LED-10.png)![](./assets/LED-11.png)\n9. 将界面转到“Package View”界面，点击下方“I/O Constraints”编辑引脚数据，如下图所示：\n    ![](./assets/LED-12.png)![](./assets/LED-13.png)\n    引脚情况：\n    ![](./assets/LED-14.png)\n    引脚分布情况：\n\n| PORT | I/O | PIN | DESE |\n| --- | --- | --- | --- |\n| SYS_CLK | INPUT | 47 | 47 |\n| SYS-RST-N | INPUT | 13 | --- |\n| LED[0] | OUTPUT | 9 | --- |\n| LED[1] | OUTPUT | 10 | --- |\n| LED[2] | OUTPUT | 11 | --- |\n\n10.将界面转到“Package View”界面，点击下方“I/O Constraints”编辑引脚数据，如下图所示：\n![](./assets/LED-15.png)\n\n11.到“Process”下运行“Place&Route”，即运行管脚布局布线，运行结果如下图所示：\n![](./assets/LED-16.png)\n\n12.接下来是进行连接板子，烧录固件，可参照下图选择版型：\n![](./assets/LED-17.png)\n\n13.以烧录进SRAM为例进行说明，如下图：\n![](./assets/LED-18.png)![](./assets/LED-19.png)\n\n最后运行：\n![](./assets/LED-20.png)\n\n14、结果显示：\n【此处放置LED闪烁动图】\n\n15、解说烧录到FLASH中的方式：\n![](./assets/LED-21.png)![](./assets/LED-22.png)\n\n点灯步骤到此结束。\n\n\n\n> 说明：\n> 01、只测试过下载站下班的版本以及1.9.8版本测试正常，其他版本需用户自行确认。\n> 02、不要使用中文路径-->错误：![](./assets/LED-23.png)\n\n\n## 驱屏教程\n\n例程代码地址：<https://github.com/sipeed/TangNano-1K-examples>\n\n![](./assets/pin-1.png)![](./assets/pin-2.png)![](./assets/pin-3.png)\n\n引脚分布情况：\n\n| PORT | I/O | PIN | DESE |\n| --- | --- | --- | --- |\n| KEY | INPUT | 13 | 47  |\n| LCD_B[0] | INPUT | 19 | --- |\n| LCD_B[1] | OUTPUT | 20 | --- |\n| LCD_B[2] | OUTPUT | 22 | --- |\n| LCD_B[3] | OUTPUT | 23 | --- |\n| LCD_B[4] | OUTPUT | 24 | --- |\n| LCD_CLK | OUTPUT | 8 | --- |\n| LCD_DEN | OUTPUT | 21 | --- |\n| LCD_G[0] | OUTPUT | 28 | --- |\n| LCD_G[1] | OUTPUT | 27 | --- |\n| LCD_G[2] | OUTPUT | 15 | --- |\n| LCD_G[3] | OUTPUT | 16 | --- |\n| LCD_G[4] | OUTPUT | 17 | --- |\n| LCD_G[5] | OUTPUT | 18 | --- |\n| LCD_HYNC | OUTPUT | 33 | --- |\n| LCD_R[0] | OUTPUT | 15 | --- |\n| LCD_R[2] | OUTPUT | 34 | --- |\n| LCD_R[3] | OUTPUT | 31 | --- |\n| LCD_R[4] | OUTPUT | 30 | --- |\n| LCD_R[4] | OUTPUT | 29 | --- |\n| LCD_SYNC | OUTPUT | 32 | --- |\n| LED_B | OUTPUT | 10 | --- |\n| LED_G | OUTPUT | 11 | --- |\n| LED_R | OUTPUT | 9 | --- |\n| XTAL_IN | INPUT | 47 | --- |\n| nRST | INPUT | 44 | --- |\n\n详细代码和工程建立步骤请参照LED点灯例程。"}, "/hardware/zh/tang/Tang-Nano/examples/1_led.html": {"title": "点灯", "content": "# 点灯\n\n> 编辑于2022年3月29日\n\n## 前言\n本文提供两种方法点灯\n- [使用github仓库](./led/github_sourcecode.html)\n- [自己新建项目](./led/self_create.html)  \n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano/examples/led/github_sourcecode.html": {"title": "使用github例程", "content": "# 使用github例程\n\n- 首先获得仓库文件 https://github.com/sipeed/Tang-Nano-examples\n\n- 打开 Tang-Nano-examples\\example_led\\led_prj 目录下的 led_prj.gprj 文件\n\n- 在process界面右键选择 clean&Rerun all\n    ![](./assets/github_place&route.png)\n    \n- 紧接着会报错（这是历史问题，有兴趣可以自己查查）。\n  顶部菜单栏 Project -> Configuration -> Syntheize 选择 GowinSyntheize 后点击**确定**，然后重新在 Place&Route 右键 clean&Rerun all\n   ![](./assets/Change_Synthesis.png)\n  \n- 然后是进行连接板子，烧录固件。在Process界面双击`Program Device` 后打开烧录工具\n   ![](./assets/Open_Programmer.png)\n   \n- 接下来选择sram烧录即可验证程序。\n    ![](./assets/Success_led.png)\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano/examples/led/self_create.html": {"title": "自己点灯", "content": "# 自己点灯\n\n## 新建项目\n\n新建工程：File-->NEW-->FPGA Design Project-->OK\n    ![](./../../assets/LED-1.png)\n\n弹出的选项框选择存储路径和工程名称（路径和文件名称要求是英文路径）\n    ![](./../../assets/LED-2.png)\n\n选择对应的型号：\n    ![Tang_nano_1k_device_choose](./assets/Nano_device_choose.png)\n    \n## 编写代码\n\n新建好工程之后接下来进行代码编辑，在Design工作栏内新建“Verilog File”,如下图所示：\n    ![](./../../assets/LED-5.png)\n    \n为文件命名（要求写英文名，不然后续综合很容易报错）； \n   一般来说对于verolog文件建议文件名称与文件module名称应当相同\n    ![](./../../assets/LED-6.png)\n\n双击新建的 .v 文件，可以在右侧的编辑框中编写代码。\n    ![](./../../assets/LED-7.png)\n\n\n### Verilog 预备知识\n\n这里只介绍接下来会用到的相关语法，更多的可以参考 《Verilog 数字系统设计教程》\n\nVerilog 的基本设计单元是模块，一个模块是由两部分组成的，一部分描述接口，另一部分描述逻辑功能，即描述输出和输入的关系的。\n\n模块就像我们平时提到的黑匣子，当我们实现了模块后，就不需要去关心模块内部，只需要根据模块定义的输入输出格式，将模块实例化，给模块提供输入，就可以让模块自己工作了\n\n一个模块长成这样\n\n```v\nmodule module_name \n#(parameter)\n(port) ;\n    Function description;\nendmodule\n```\n\n模块整体结构由 module 和 endmodule 组成，module 后面跟着的是模块的名称，可传递变量参数，接口的定义，声明了端口的方向\n\n模块内部有时候会使用内部的信号，内部信号有 wire 和 reg 类型\n\n功能的定义可以通过 assign 和 always 块完成。 assign 是描述组合逻辑最常用的方法之一； always 可用于描述组合逻辑，也可描述时序逻辑\n\n### 示例代码\n\n以流水灯为例；将下方的代码粘贴到自己的文件中，也可以自己编写代码。\n\n```verilog\nmodule led (\n    input sys_clk,\n    input sys_rst_n,\n    output reg [2:0] led // 110 B, 101 R, 011 G\n);\n\nreg [23:0] counter;\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        counter <= 24'd0;\n    else if (counter < 24'd1199_9999)       // 0.5s delay\n        counter <= counter + 1'b1;\n    else\n        counter <= 24'd0;\nend\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        led <= 3'b110;\n    else if (counter == 24'd1199_9999)       // 0.5s delay\n        led[2:0] <= {led[1:0],led[2]};\n    else\n        led <= led;\nend\n\nendmodule\n\n ```\n\n## 综合、约束、布局布线\n\n### 综合\n\n保存编辑的代码后转到“Process”界面下，对编辑好的代码进行综合，即双击“Systhesize”\n    ![](./../../../Tang-Nano-9K/nano_9k/nano_9k_synthsize.png)\n\n运行之后如没有报错而且 Synthesize 变成下图里的图标\n    ![](./../../../Tang-Nano/assets/LED.png) \n\n说明前面编辑的代码无误；如果有错，根据错误提示进行改正即可。        \n\n### 约束\n\n- 此处未涉及时钟约束\n\n想让 Fpga 实现代码的功能，必须将代码中涉及的 端口 绑定到 Fpga 实际的引脚上。\n\n如下图，在左边的工作区点击 process，然后双击 FloorPlanner\n\n![](./../../../assets/examples/led_pjt_2.png)\n\n接下来通过 双击 Process 界面里的FloorPlanner来设置管脚约束。第一次打开会弹出缺少.cst文件.选择“OK”即可；\n    ![](./../../assets/LED-9.pngassets/LED-9.png)\n\nnano 的 rgb led电路图如下所示\n    ![](./assets/nano_led_pins.png \"nano rgb pins\")\n\n整个项目需要约束的引脚如下\n\n| port      | I/O    | pin | desc       |\n| --------- | ------ | --- | ---------- |\n| sys_clk   | input  | 35  | 时钟输入脚  |\n| sys_rst_n | input  | 15  | 系统复位脚  |\n| led[0]    | output | 16  | 绿灯       |\n| led[1]    | output | 17  | 蓝灯       |\n| led[2]    | output | 18  | 红灯       |\n\n对于交互式管脚约束有下图中的两种方法\n- 将对应的端口拖拽到芯片引脚上\n- 在IO约束中输入端口对应的引脚编号\n\n在打开的界面中按照序号的顺序来进行相应的操作（两种方式选择一种即可）\n![](./assets/pin_constrain_1.png)\n![](./assets/pin_constrain_2.png)\n\n- 直接编写约束文件方法用户自行研究\n\n关于 FloorPlanner 更多的相关说明，可以参考 [SUG935-1.3_Gowin设计物理约束用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG935-1.3_Gowin%E8%AE%BE%E8%AE%A1%E7%89%A9%E7%90%86%E7%BA%A6%E6%9D%9F%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)。里面的内容都很有用\n\n### 布局布线\n\n到“Process”下运行“Place&Route”，即运行管脚布局布线，运行结果如下图所示：\n    ![](./assets/RGB_LED_Place&Route.png)\n    \n## 烧录\n\n接下来是连接板子，烧录固件。在Process界面双击 `Program Device` 后打开烧录工具\n    ![](./assets/Open_Programmer.png)\n\n可以在图中进行相应的修改\n    ![](./../../../../../zh/tang/Tang-Nano/examples/led/assets/tang-nano-programmer-config.png)\n\n接下来选择sram烧录即可验证程序。\n    ![](./assets/Success_led.png)\n    \n点灯验证到此结束。\n\n## 结语\n\n有问题的话可以在下方留言。\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano/examples/2_lcd.html": {"title": "RGB LCD 示例", "content": "# RGB LCD 示例\n\n> 编辑于2022.04.12\n\n## 先介绍时序\n\nRGB LCD 显示协议和 VGA 类似，通信都有专用的行同步、场同步信号线。它们的主要区别是前者传输用的是数字信号，后者传输走的是模拟信号。\n\n下面就介绍 VGA 的时序\n\n![](./../../assets/examples/lcd_pjt_1.png)\n\n上图分别是 VGA 在数据传输中的行同步、场同步时序\n\n从时序图中可以看出，不论是显示一行数据还是一列数据，都需要一个对应的同步(sync)信号，数据的传输在两个同步信号的脉冲之间完成\n\n每一行的数据包括显示前沿(back porch)、有效数据(active video)、显示后沿(front porch)三个阶段\n\n其中的有效数据就是我们常说的分辨率，而显示前后沿的参数需要参考具体的分辨率与帧数进行设置，相关参数可以参考典型参数，链接在此： http://www.tinyvga.com/vga-timing\n\n这块5寸屏幕的控制时序略有不同，相关参数的设置可以查看[规格书](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/CN/LCD_Datasheet/5.0inch_LCD_Datashet%20RGB.pdf)\n\n其他尺寸的屏幕相关规格书均可以在这里下载 [点我](https://dl.sipeed.com/shareURL/TANG/Nano%209K/6_Chip_Manual/CN/LCD_Datasheet)\n\n下面为这块 LCD 时序相关的截图\n\n![](./../../assets/examples/lcd_pjt_2.png)\n\n![](./../../assets/examples/lcd_pjt_3.png)\n\n上面一张图是时序中的参数表，下面的图是时序图\n\n从时序图中看出，这块屏幕可以不用设置前后沿，可以只设置消影(blanking)时间，通过实际的程序证明，两种方式都是可以的\n\n## 新建工程\n\n新建工程方法参考[自建点灯文章(点我)](./led/self_create.html)\n\n\n## 生成屏幕时钟\n\n- 这里需要用到高云半导体官方的IP核\n\n板载的晶振时钟为 24MHz ，但是我们的屏幕要求 33.3MHZ 的时钟，所以我们需要使用对应的ip核来生成相应的时钟\n\n### pll\n\n\n这里需要使用到 `IP Core Generate` ，位置在 Tools -> IP Core Generate\n\n![](./../../Tang-Nano-1K/assets/Gowin_IP_rpll.png)\n\n双击 `rPLL` ，在弹出窗口 language 选择 Verilog ，CLKIN 为 24MHz ，CLKOUT 为 200MHz，CLKOUTD 要选择 Enable，然后生成时钟为 33.33MHz，Tolerance 选择 0.2%\n\n![](./../../assets/examples/lcd_pjt_5.png)\n\n点击ok后提示是否需要添加到当前工程，此时应当选择确定\n  ![](./led/assets/add_ip_file_in_project.png)\n\n接着会出现一个例化的tmp文件，用来例化所设置的ip。比如下图中例子\n![](./led/assets/ip_examples.png)\n\n### osc\n\n**这一步可以不做**\n\n系统的时钟可以由外部时钟提供，也可以使用 OSC 生成的时钟\n\n同样也是使用 `IP Core Generate`\n\n找到 `OSC` 并双击打开进行分频的设置\n\n在帮助页面可以知道，GW1N-1 系列的 fpga 的 OSC 是从 240MHz 进行分频的，所以要产生 24MHz 的时钟，只需要进行 10 的分频\n\n## 屏幕驱动代码\n\n- **首先新建一个额外的verilog文件来保存下面要编写的代码**\n\n### 端口定义\n\n首先需要先定义出驱动屏幕所需要的端口\n\n```verilog\nmodule VGAMod\n(\n    input                   CLK,\n    input                   nRST,\n\n    input                   PixelClk,\n\n    output                  LCD_DE,\n    output                  LCD_HSYNC,\n    output                  LCD_VSYNC,\n\n\toutput          [4:0]   LCD_B,\n\toutput          [5:0]   LCD_G,\n\toutput          [4:0]   LCD_R\n);\n```\n\n本例程使用RGB565作为驱动方式；\n\n### 时序常量\n\n接着定义出时序图上所要求的常量\n\n```verilog\n\nlocalparam      V_BackPorch = 16'd6; //0 or 45\nlocalparam      V_Pluse \t= 16'd5; \nlocalparam      HightPixel  = 16'd480;\nlocalparam      V_FrontPorch= 16'd62; //45 or 0\n\nlocalparam      H_BackPorch = 16'd182; \t\nlocalparam      H_Pluse \t= 16'd1; \nlocalparam      WidthPixel  = 16'd800;\nlocalparam      H_FrontPorch= 16'd210;\n\nlocalparam      PixelForHS  =   WidthPixel + H_BackPorch + H_FrontPorch;  \t\nlocalparam      LineForVS   =   HightPixel + V_BackPorch + V_FrontPorch;\n\n```\n\n首先是设置时序相关的参数：前沿、后沿、有效像素\n\n关于显示前沿、后沿，前面也说了，可以合并为一个消影时间，就是可以把其中一个设置为0，另一个设置为消影时间。反正前后沿的时间加起来符合表中的时间要求就可以\n\n### 定义变量\n\n- 定义一些变量能够容易编写程序\n  \n```verilog\n\nreg [15:0] LineCount;\nreg [15:0] PixelCount;\n\nreg\t[9:0]  Data_R;\nreg\t[9:0]  Data_G;\nreg\t[9:0]  Data_B;\n\n```\n\n### 同步信号\n\n这段代码产生同步信号，需要注意的是，这块屏幕的同步信号是负极性使能\n\n```verilog\n    always @(  posedge PixelClk or negedge nRST  )begin\n        if( !nRST ) begin\n            LineCount       <=  16'b0;    \n            PixelCount      <=  16'b0;\n            end\n        else if(  PixelCount  ==  PixelForHS ) begin\n            PixelCount      <=  16'b0;\n            LineCount       <=  LineCount + 1'b1;\n            end\n        else if(  LineCount  == LineForVS  ) begin\n            LineCount       <=  16'b0;\n            PixelCount      <=  16'b0;\n            end\n        else\n            PixelCount      <=  PixelCount + 1'b1;\n    end\n\n   always @(  posedge PixelClk or negedge nRST  )begin\n        if( !nRST ) begin\n\t\t\tData_R <= 9'b0;\n\t\t\tData_G <= 9'b0;\n\t\t\tData_B <= 9'b0;\n            end\n        else begin\n\t\t\tend\n\tend\n\n//注意这里HSYNC和VSYNC负极性\nassign  LCD_HSYNC = (( PixelCount >= H_Pluse)&&( PixelCount <= (PixelForHS-H_FrontPorch))) ? 1'b0 : 1'b1;\nassign  LCD_VSYNC = ((( LineCount  >= V_Pluse )&&( LineCount  <= (LineForVS-0) )) ) ? 1'b0 : 1'b1;\n```\n\n### 使能信号\n\n这段代码设置 LCD 使能图像显示，这块屏幕需要控制一个管脚用作显示开关，实际这个信号就是传输图像有效的那 800*480 的数据时置 1\n  \n```verilog\nassign  LCD_DE = (  ( PixelCount >= H_BackPorch )&&\n                    ( PixelCount <= PixelForHS-H_FrontPorch ) &&\n                    ( LineCount >= V_BackPorch ) &&\n                    ( LineCount <= LineForVS-V_FrontPorch-1 ))  ? 1'b1 : 1'b0;\n                    //这里不减一，会抖动\n```\n\n### 测试彩条\n\n- 这段代码用来产生 LCD 的测试数据，产生彩条显示\n\n```verilog\nassign  LCD_R   =   (PixelCount<200)? 5'b00000 : \n                    (PixelCount<240 ? 5'b00001 :    \n                    (PixelCount<280 ? 5'b00010 :    \n                    (PixelCount<320 ? 5'b00100 :    \n                    (PixelCount<360 ? 5'b01000 :    \n                    (PixelCount<400 ? 5'b10000 :  5'b00000 )))));\n\nassign  LCD_G   =   (PixelCount<400)? 6'b000000 : \n                    (PixelCount<440 ? 6'b000001 :    \n                    (PixelCount<480 ? 6'b000010 :    \n                    (PixelCount<520 ? 6'b000100 :    \n                    (PixelCount<560 ? 6'b001000 :    \n                    (PixelCount<600 ? 6'b010000 :  \n                    (PixelCount<640 ? 6'b100000 : 6'b000000 ))))));\n\nassign  LCD_B   =   (PixelCount<640)? 5'b00000 : \n                    (PixelCount<680 ? 5'b00001 :    \n                    (PixelCount<720 ? 5'b00010 :    \n                    (PixelCount<760 ? 5'b00100 :    \n                    (PixelCount<800 ? 5'b01000 :    \n                    (PixelCount<840 ? 5'b10000 :  5'b00000 )))));\n```\n\n\n**当然在最后的驱动文件最后别忘记换行加上 endmodule** \n\n到这里驱动模块的编写已经完成了。\n\n## 在顶层模块中例化\n\n- **这里也是要新建verilog文件的**\n- 新建文件之后直接把下面的内容复制进去保存即可\n\n```verilog\nmodule TOP //设置顶层模块\n(\n\tinput\t\t\tnRST,\n    input           XTAL_IN,\n\n\toutput\t\t\tLCD_CLK,\n\toutput\t\t\tLCD_HYNC,\n\toutput\t\t\tLCD_SYNC,\n\toutput\t\t\tLCD_DEN,\n\toutput\t[4:0]\tLCD_R,\n\toutput\t[5:0]\tLCD_G,\n\toutput\t[4:0]\tLCD_B\n\n); // 列出需要的端口\n\n\twire\t\tCLK_SYS;\t\n\twire\t\tCLK_PIX;\n    \n    //例化pll\n    Gowin_rPLL chip_pll(\n        .clkout(CLK_SYS), //output clkout     //200M\n        .clkoutd(CLK_PIX), //output clkoutd   //33.00M\n        .clkin(XTAL_IN)    //input clkin\n    );\t\n\n\tVGAMod\tVGAMod_inst //例化vga驱动\n\t(\n\t\t.CLK\t\t(\tCLK_SYS     ),\n\t\t.nRST\t\t(\tnRST\t\t),\n\n\t\t.PixelClk\t(\tCLK_PIX\t\t),\n\t\t.LCD_DE\t\t(\tLCD_DEN\t \t),\n\t\t.LCD_HSYNC\t(\tLCD_HYNC \t),\n    \t.LCD_VSYNC\t(\tLCD_SYNC \t),\n\n\t\t.LCD_B\t\t(\tLCD_B\t\t),\n\t\t.LCD_G\t\t(\tLCD_G\t\t),\n\t\t.LCD_R\t\t(\tLCD_R\t\t)\n\t);\n\n\tassign\t\tLCD_CLK\t\t=\tCLK_PIX;\n\nendmodule\n```\n\n## 综合、约束、布局布线\n\n### 综合\n\n完成上面步骤后转到“Process”界面下，对编辑好的代码进行综合，即运行“Systhesize” \n![](./../../Tang-Nano-9K/nano_9k/nano_9k_synthsize.png)\n\n运行的结果如下图出现 \n![](./../../Tang-Nano/assets/LED.png)\n\n说明前面编辑的代码无误；如果有错，根据错误提示进行改正即可。\n\n### 管脚约束\n\n对应的管脚约束如下表格所示；\n关于管脚约束方法可以参考[自建点灯文章(点我)](./led/self_create.html)里面的约束方法。\n感觉麻烦的话也可以直接复制准备好的[文件(点我)](./lcd_constrains.html)，将页面里的内容复制到工程目录里 .cst 文件中（如果没有.cst 文件那么自己新建一个**物理管脚约束文件**） 即可。\n\n|   PORT   |  PIN  |   PORT   |  PIN  |   PORT   |  PIN  |\n| :------: | :---: | :------: | :---: | :------: | :---: |\n| LCD_CLK  |  11   |   nRST   |  14   | XTAL_IN  |  35   |\n| LCD_B[4] |  45   | LCD_B[3] |  44   | LCD_B[2] |  43   |\n| LCD_B[1] |  42   | LCD_B[0] |  41   | LCD_G[5] |  40   |\n| LCD_G[4] |  39   | LCD_G[3] |  38   | LCD_G[2] |  34   |\n| LCD_G[1] |  33   | LCD_G[0] |  32   | LCD_R[4] |  31   |\n| LCD_R[3] |  30   | LCD_R[2] |  29   | LCD_R[1] |  28   |\n| LCD_R[0] |  27   | LCD_DEN  |   5   | LCD_SYNC |  46   |\n| LCD_HYNC |  10   |\n\n### 布局布线\n\n管脚约束之后需要在设置里面开启引脚复用才能完成布局布线。\n具体位置在 软件顶部菜单栏 Project -> Configuration -> Place&Route -> Dual-Purpose Pin\n![](./led/assets/enable_io_mux.png)\n\n设置完上面的之后。\n就可以开始布局布线(Place&Route)了。\n完成后就可以给开发板验证代码内容了。\n\n## 烧录\n\n布局布线结束后生成比特流，就可以烧录开发板了。\n\n\n## 结束\n\n上面差不多叙述了所有代码。\n整个工程可以参考 [这里](https://github.com/sipeed/Tang-Nano-examples/tree/master/example_lcd) \n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano/examples/lcd_constrains.html": {"title": "LCD constrain file content", "content": "---\ntitle: LCD constrain file content\n---\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>\n\n```cst\nIO_LOC \"LCD_B[4]\" 45;\nIO_PORT \"LCD_B[4]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[3]\" 44;\nIO_PORT \"LCD_B[3]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[2]\" 43;\nIO_PORT \"LCD_B[2]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[1]\" 42;\nIO_PORT \"LCD_B[1]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[0]\" 41;\nIO_PORT \"LCD_B[0]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[5]\" 40;\nIO_PORT \"LCD_G[5]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[4]\" 39;\nIO_PORT \"LCD_G[4]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[3]\" 38;\nIO_PORT \"LCD_G[3]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[2]\" 34;\nIO_PORT \"LCD_G[2]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[1]\" 33;\nIO_PORT \"LCD_G[1]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[0]\" 32;\nIO_PORT \"LCD_G[0]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[4]\" 31;\nIO_PORT \"LCD_R[4]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[3]\" 30;\nIO_PORT \"LCD_R[3]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[2]\" 29;\nIO_PORT \"LCD_R[2]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[1]\" 28;\nIO_PORT \"LCD_R[1]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[0]\" 27;\nIO_PORT \"LCD_R[0]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_DEN\" 5;\nIO_PORT \"LCD_DEN\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_SYNC\" 46;\nIO_PORT \"LCD_SYNC\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_HYNC\" 10;\nIO_PORT \"LCD_HYNC\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_CLK\" 11;\nIO_PORT \"LCD_CLK\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"nRST\" 14;\nIO_PORT \"nRST\" IO_TYPE=LVCMOS33 PULL_MODE=UP;\nIO_LOC \"XTAL_IN\" 35;\nIO_PORT \"XTAL_IN\" IO_TYPE=LVCMOS33 PULL_MODE=UP;\n```\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano-1K/Tang-nano-1k.html": {"title": "Tang nano 1k 一些例程", "content": "---\ntitle: Tang nano 1k 一些例程\n---\n\n\n对于Programmer(下载程序)建议使用 https://dl.sipeed.com/shareURL/TANG/programmer 里面的文件。\n下载后解压替换掉Gowin对应安装目录的Programmer文件夹即可。\n不会替换的话可以在下载解压后的Programmer程序中手动添加对应下载文件来进行烧录。\n\n\n- [点灯例程](./examples/LED.html)\n- [驱屏教程](./examples/LCD.html)"}, "/hardware/zh/tang/Tang-Nano-1K/Nano-1k.html": {"title": "Tang Nano 1K", "content": "# Tang Nano 1K\n\n## 概述\n\nTang Nano 1K 是基于高云半导体的小蜜蜂系列 GW1NZ-LV1 FPGA设计的简约型开发板。开发板设计小巧精致，将芯片的所有资源都引出，板载Type-C、USB-JTAG、有源晶振、RGB(可接LCD屏、VGA等外设)等，并把所有IO资源引出，方便开发者拓展使用，非常适用于小型数字逻辑的设计和实验。\n\n![Nano-1](./../Tang-Nano/assets/1k-1.jpg)\n![Nano-2](./../Tang-Nano/assets/1k-2.jpg)\n\n## 参数\n\nTang Nano 1K 开发板板载的GW1NZ-LV1 FPGA芯片功能非常强大，具有较丰富的逻辑资源，支持多种I/O电平标准，内嵌块状静态随机存储器、锁相环、Flash等资源，是一款具有非易失性的FPGA产品;另外，板载24MHz有源晶振，为FPGA各种时序操作提供了更精准的频率。\n\n|       项目       |      参数      |\n| :--------------: | :------------: |\n|       核心       | GW1NZ-LV1 FPGA |\n|  逻辑单元(LUT4)  |      1152      |\n|    寄存器(FF)    |      864       |\n| Block SRAM(bits) |      72K       |\n|   B-SRAM块个数   |       4        |\n|  用户闪存(bits)  |      64K       |\n|    锁相环PLL     |       1        |\n|   I/O Bank总数   |       2        |\n|  最多用户I/O数   |       48       |\n|      核电压      |      1.2V      |\n\n### 引脚图\n\n![pin_map](./../Tang-Nano/assets/1k-pin.png)\n\n## 资料\n\n- [相关例程](./../Tang-Nano-Doc/examples.html)\n- [资料下载](https://dl.sipeed.com/shareURL/TANG/Nano%201K)\n- [原理图](https://dl.sipeed.com/shareURL/TANG/Nano%201K/2_Schematic)\n\n## 补充\n\n1. 如果有什么疑问，欢迎加群 `834585530`, 或者去[论坛](bbs.sipeed.com)发帖。\n2. 下载 FPGA 是要求使用 [这里](https://dl.sipeed.com/shareURL/TANG/programmer) 的 Programmer 软件。不然有极大概率不能下载固件到板子。\n3. 有问题的话先去 [常见问题](./../Tang-Nano-Doc/questions.html) 自查，通常来说使用 [这里](https://dl.sipeed.com/shareURL/TANG/programmer) 的 Programmer 软件能解决 99% 问题。"}, "/hardware/zh/tang/Tang-Nano-1K/examples/LED.html": {"title": "点灯", "content": "# 点灯\n\n> 编辑于2022年3月29日\n\n## 前言\n此处提供两种方法点灯\n对于文章中有什么疑问或者错误的地方欢迎到 [论坛](https://bbs.sipeed.com) 或 QQ群 提出\n- [使用github仓库](./led/github_sourcecode.html)\n- [自己新建项目](./led/self_create.html)  \n\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano-1K/examples/led/github_sourcecode.html": {"title": "使用github例程", "content": "---\ntitle: 使用github例程\n---\n\n- 首先获得仓库文件 https://github.com/sipeed/TangNano-1K-examples\n\n- 打开 TangNano-1K-examples\\example_led\\led_prj 目录下的 led_prj.gprj 文件\n  \n- 在process界面直接双击  Place&Route\n    ![](./assets/github_nano1K_place&route.png)\n    \n- 然后是进行连接板子，烧录固件。在Process界面双击`Program Device` 后打开烧录工具\n    ![](./assets/Open_Programmer_nano_1k.png)\n\n- 接下来选择sram烧录即可验证程序。\n    ![](./assets/Success_led_nano_1k.png)\n\n\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano-1K/examples/led/self_create.html": {"title": "点灯LED RGB", "content": "---\ntitle: 点灯LED RGB\n---\n\n> 编辑于2022年4月13日\n\n## 新建项目\n\n新建工程：File-->NEW-->FPGA Design Project-->OK\n    ![](./../../../Tang-Nano/assets/LED-1.png)\n\n弹出的选项框选择存储路径和工程名称（路径和文件名称要求是英文路径）\n    ![](./../../../Tang-Nano/assets/LED-2.png)\n\n选择对应的型号：\n    ![Tang_nano_1k_device_choose](./../../assets/Nano_1K_device_choose.png)\n\n## 编写代码\n\n新建工程之后接下来进行代码编辑，在Design工作栏内新建“Verilog File”,如下图所示：\n    ![](./../../../Tang-Nano/assets/LED-5.png)\n\n为文件命名（要求写英文名，不然后续综合很容易报错）；\n   一般来说文件名称应该和文件内容模块名称相同\n    ![](./../../../Tang-Nano/assets/LED-6.png)\n\n双击文件，可以在右侧的编辑框中进行代码的编写。\n    ![](./../../../Tang-Nano/assets/LED-7.png)\n\n以流水灯为例，将下方的“LED例程代码”粘贴到自己的文件中，也可以自己编写自己的代码。\n\n```verilog\nmodule led (\n    input sys_clk,          // clk input\n    input sys_rst_n,        // reset input\n    output reg [2:0] led    // 110 B, 101 G,001 R\n);\n\nreg [23:0] counter;\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        counter <= 24'd0;\n    else if (counter < 24'd1349_9999)       // 0.5s delay\n        counter <= counter + 1'b1;\n    else\n        counter <= 24'd0;\nend\n\nalways @(posedge sys_clk or negedge sys_rst_n) begin\n    if (!sys_rst_n)\n        led <= 3'b110;\n    else if (counter == 24'd1349_9999)       // 0.5s delay\n        led[2:0] <= {led[1:0],led[2]};\n    else\n        led <= led;\nend\n\nendmodule\n\n ```\n\n## 综合、约束、布局布线\n\n### 综合\n\n保存编辑的代码后转到“Process”界面下，对编辑好的代码进行综合，即双击“Systhesize”\n    ![](./../../../Tang-Nano-9K/nano_9k/nano_9k_synthsize.png)\n\n运行之后如没有报错而且 Synthesize 变成下图里的图标\n    ![](./../../../Tang-Nano/assets/LED.png) \n\n说明前面编辑的代码无误；如果有错，根据错误提示进行改正即可。\n\n### 约束\n\n- 此处未涉及时钟约束\n\n想让 Fpga 实现代码的功能，必须将代码中涉及的 端口 绑定到 Fpga 实际的引脚上。\n如下图，在左边的工作区点击 process，然后双击 FloorPlanner\n   ![](./../../assets/examples/led_pjt_2.png)\n   \n在工程中第一次点击，可能会提示创建文件，点击确定即可\n   ![](./../../../Tang-Nano/assets/LED-9.png)\n\nnano 1k的rgb led电路图如下所示\n    ![](./../../assets/Nano_1K_RGB_pins.png \"nano 1k rgb pins\")    \n\n对于交互式管脚约束有下图中的两种方法\n- 将对应的端口拖拽到芯片引脚上\n- 在IO约束中输入端口对应的引脚编号\n\n因此在打开的界面中按照序号的顺序来进行相应的操作（两种方式选择一种即可）\n    ![](./../../assets/RGB_LED_Constrains.png)\n\n关于 FloorPlanner 更多的相关说明，可以参考 [SUG935-1.3_Gowin设计物理约束用户指南.pdf](http://cdn.gowinsemi.com.cn/SUG935-1.3_Gowin%E8%AE%BE%E8%AE%A1%E7%89%A9%E7%90%86%E7%BA%A6%E6%9D%9F%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97.pdf)。里面的内容都很有用\n\n**完成约束后记得保存~**\n\n\n### 布局布线\n\n到“Process”下运行“Place&Route”，即运行管脚布局布线，运行结果如下图所示：\n    ![](./../../assets/RGB_LED_Place&Route.png)\n\n如果没有成功运行，那自己修修。\n\n## 烧录\n\n- 成功完成上面步骤后就已经生成高云半导体的比特流文件了，可以进行下面的步骤来将文件烧录到板子了。\n\n接下来是连接板子，烧录固件。在Process界面双击`Program Device` 后打开烧录工具\n    ![](./../../assets/Open_Programmer.png)\n\n可以从下面的图中选择烧录模式；再此以烧录到SRAM作为示例\n![](./../../../Tang-Nano/examples/led/assets/tang-nano-programmer-config.png)\n\n接下来选择运行即可验证程序。有固化需求的自行选择下载到flash即可。\n\n点灯验证到此结束。\n\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano-1K/examples/led/lcd_constrains.html": {"title": "", "content": "---\ntitle: LCD 约束文件内容\n```\nIO_LOC \"LED_B\" 10;\nIO_PORT \"LED_B\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LED_G\" 11;\nIO_PORT \"LED_G\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LED_R\" 9;\nIO_PORT \"LED_R\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[4]\" 24;\nIO_PORT \"LCD_B[4]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[3]\" 23;\nIO_PORT \"LCD_B[3]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[2]\" 22;\nIO_PORT \"LCD_B[2]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[1]\" 20;\nIO_PORT \"LCD_B[1]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[0]\" 19;\nIO_PORT \"LCD_B[0]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[5]\" 18;\nIO_PORT \"LCD_G[5]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[4]\" 17;\nIO_PORT \"LCD_G[4]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[3]\" 16;\nIO_PORT \"LCD_G[3]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[2]\" 15;\nIO_PORT \"LCD_G[2]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[1]\" 27;\nIO_PORT \"LCD_G[1]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[0]\" 28;\nIO_PORT \"LCD_G[0]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[4]\" 29;\nIO_PORT \"LCD_R[4]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[3]\" 30;\nIO_PORT \"LCD_R[3]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[2]\" 31;\nIO_PORT \"LCD_R[2]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[1]\" 34;\nIO_PORT \"LCD_R[1]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[0]\" 35;\nIO_PORT \"LCD_R[0]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_DEN\" 21;\nIO_PORT \"LCD_DEN\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_SYNC\" 32;\nIO_PORT \"LCD_SYNC\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_HYNC\" 33;\nIO_PORT \"LCD_HYNC\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_CLK\" 8;\nIO_PORT \"LCD_CLK\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"XTAL_IN\" 47;\nIO_PORT \"XTAL_IN\" IO_TYPE=LVCMOS33 PULL_MODE=UP;\nIO_LOC \"nRST\" 44;\nIO_PORT \"nRST\" IO_TYPE=LVCMOS33 PULL_MODE=UP;\nIO_LOC \"KEY\" 13;\nIO_PORT \"KEY\" IO_TYPE=LVCMOS33 PULL_MODE=UP;\n\n```"}, "/hardware/zh/tang/Tang-Nano-1K/examples/LCD.html": {"title": "RGB LCD 示例", "content": "---\ntitle: RGB LCD 示例\n---\n\n> 编辑于2022年3月30日\n\n## 先介绍时序\n\nRGB LCD 显示协议和 VGA 类似，通信都有专用的行同步、场同步信号线。它们的主要区别是前者传输用的是数字信号，后者传输走的是模拟信号。\n\n下面就介绍 VGA 的时序\n\n![](./../../assets/examples/lcd_pjt_1.png)\n\n上图分别是 VGA 在数据传输中的行同步、场同步时序\n\n从时序图中可以看出，不论是显示一行数据还是一列数据，都需要一个对应的同步(sync)信号，数据的传输在两个同步信号的脉冲之间完成\n\n每一行的数据包括显示前沿(back porch)、有效数据(active video)、显示后沿(front porch)三个阶段\n\n其中的有效数据就是我们常说的分辨率，而显示前后沿的参数需要参考具体的分辨率与帧数进行设置，相关参数可以参考典型参数，链接在此： http://www.tinyvga.com/vga-timing\n\n这块5寸屏幕的控制时序略有不同，相关参数的设置可以查看[规格书](https://dl.sipeed.com/fileList/TANG/Nano%209K/6_Chip_Manual/CN/LCD_Datasheet/5.0inch_LCD_Datashet%20RGB.pdf)\n\n其他尺寸的屏幕相关规格书均可以在这里下载 [点我](https://dl.sipeed.com/shareURL/TANG/Nano%209K/6_Chip_Manual/CN/LCD_Datasheet)\n\n下面为这块 LCD 时序相关的截图\n\n![](./../../assets/examples/lcd_pjt_2.png)\n\n![](./../../assets/examples/lcd_pjt_3.png)\n\n上面一张图是时序中的参数表，下面的图是时序图\n\n从时序图中看出，这块屏幕可以不用设置前后沿，可以只设置消影(blanking)时间，通过实际的程序证明，两种方式都是可以的\n\n## 新建工程\n\n新建工程方法参考[自建点灯文章(点我)](./led/self_create.html)\n\n\n## 生成屏幕时钟\n\n- 这里需要用到高云半导体官方的IP核\n\n### pll\n\n板载的晶振时钟为 27MHz ，但是我们的屏幕要求 33.3MHZ 的时钟，所以我们需要使用相应的ip核来生成需要的时钟\n\n这里需要使用到 `IP Core Generate` ，位置在 Tools -> IP Core Generate\n\n![](./../assets/Gowin_IP_rpll.png)\n\n双击 `rpll` ，在弹出窗口 language 选择 Verilog ，CLKIN 为 27MHz ，CLKOUT 为  33.00MHz。\n\n![](./../assets/lcd_rpll.png)\n\n点击ok后提示是否需要添加到当前工程，此时应当选择确定\n  ![](./led/assets/add_ip_file_in_project.png)\n\n接着会出现一个例化的tmp文件，用来例化所设置的ip。比如下图中例子\n![](./../../Tang-Nano/examples/led/assets/ip_examples.png)\n\n## 屏幕驱动代码\n\n- **首先新建一个额外的verilog文件来保存下面要编写的代码**\n  \n### 端口定义\n\n首先需要先定义出驱动屏幕所需要的端口\n\n```verilog\nmodule VGAMod\n(\n    input                   CLK,\n    input                   nRST,\n\n    input                   PixelClk,\n\n    output                  LCD_DE,\n    output                  LCD_HSYNC,\n    output                  LCD_VSYNC,\n\n\toutput          [4:0]   LCD_B,\n\toutput          [5:0]   LCD_G,\n\toutput          [4:0]   LCD_R\n);\n```\n\n本例程使用RGB565作为驱动方式；\n\n### 时序常量\n\n接着定义出时序图上所要求的常量\n\n```verilog\nlocalparam      V_BackPorch = 16'd6; //0 or 45\nlocalparam      V_Pluse \t= 16'd5; \nlocalparam      HightPixel  = 16'd480;\nlocalparam      V_FrontPorch= 16'd62; //45 or 0\n\nlocalparam      H_BackPorch = 16'd182; \t\nlocalparam      H_Pluse \t= 16'd1; \nlocalparam      WidthPixel  = 16'd800;\nlocalparam      H_FrontPorch= 16'd210;\n\nlocalparam      PixelForHS  =   WidthPixel + H_BackPorch + H_FrontPorch;  \t\nlocalparam      LineForVS   =   HightPixel + V_BackPorch + V_FrontPorch;\n```\n\n首先是设置时序相关的参数：前沿、后沿、有效像素\n\n关于显示前沿、后沿，前面也说了，可以合并为一个消影时间，就是可以把其中一个设置为0，另一个设置为消影时间。反正前后沿的时间加起来符合表中的时间要求就可以\n\n### 计数变量\n\n- 定义一些变量能够容易编写程序\n\n```verilog\n\nreg [15:0] LineCount;\nreg [15:0] PixelCount;\n\nreg\t[9:0]  Data_R;\nreg\t[9:0]  Data_G;\nreg\t[9:0]  Data_B;\n\n```\n\n### 同步信号\n\n这段代码产生同步信号，需要注意的是，这块屏幕的同步信号是负极性使能\n\n```verilog\n    always @(  posedge PixelClk or negedge nRST  )begin\n        if( !nRST ) begin\n            LineCount       <=  16'b0;    \n            PixelCount      <=  16'b0;\n            end\n        else if(  PixelCount  ==  PixelForHS ) begin\n            PixelCount      <=  16'b0;\n            LineCount       <=  LineCount + 1'b1;\n            end\n        else if(  LineCount  == LineForVS  ) begin\n            LineCount       <=  16'b0;\n            PixelCount      <=  16'b0;\n            end\n        else\n            PixelCount      <=  PixelCount + 1'b1;\n    end\n\n   always @(  posedge PixelClk or negedge nRST  )begin\n        if( !nRST ) begin\n\t\t\tData_R <= 9'b0;\n\t\t\tData_G <= 9'b0;\n\t\t\tData_B <= 9'b0;\n            end\n        else begin\n\t\t\tend\n\tend\n\n//注意这里HSYNC和VSYNC负极性\nassign  LCD_HSYNC = (( PixelCount >= H_Pluse)&&( PixelCount <= (PixelForHS-H_FrontPorch))) ? 1'b0 : 1'b1;\nassign  LCD_VSYNC = ((( LineCount  >= V_Pluse )&&( LineCount  <= (LineForVS-0) )) ) ? 1'b0 : 1'b1;\n```\n\n### 使能信号\n\n这段代码设置 LCD 使能图像显示，这块屏幕需要控制一个管脚用作显示开关，实际这个信号就是传输图像有效的那 800*480 的数据时置 1\n  \n```verilog\nassign  LCD_DE = (  ( PixelCount >= H_BackPorch )&&\n                    ( PixelCount <= PixelForHS-H_FrontPorch ) &&\n                    ( LineCount >= V_BackPorch ) &&\n                    ( LineCount <= LineForVS-V_FrontPorch-1 ))  ? 1'b1 : 1'b0;\n                    //这里不减一，会抖动\n```\n\n### 测试彩条\n\n这段代码用来产生 LCD 的测试数据，产生彩条显示\n\n```verilog\nassign  LCD_R   =   (PixelCount<200)? 5'b00000 : \n                    (PixelCount<240 ? 5'b00001 :    \n                    (PixelCount<280 ? 5'b00010 :    \n                    (PixelCount<320 ? 5'b00100 :    \n                    (PixelCount<360 ? 5'b01000 :    \n                    (PixelCount<400 ? 5'b10000 :  5'b00000 )))));\n\nassign  LCD_G   =   (PixelCount<400)? 6'b000000 : \n                    (PixelCount<440 ? 6'b000001 :    \n                    (PixelCount<480 ? 6'b000010 :    \n                    (PixelCount<520 ? 6'b000100 :    \n                    (PixelCount<560 ? 6'b001000 :    \n                    (PixelCount<600 ? 6'b010000 :  \n                    (PixelCount<640 ? 6'b100000 : 6'b000000 ))))));\n\nassign  LCD_B   =   (PixelCount<640)? 5'b00000 : \n                    (PixelCount<680 ? 5'b00001 :    \n                    (PixelCount<720 ? 5'b00010 :    \n                    (PixelCount<760 ? 5'b00100 :    \n                    (PixelCount<800 ? 5'b01000 :    \n                    (PixelCount<840 ? 5'b10000 :  5'b00000 )))));\n```\n\n\n**当然在最后的驱动文件最后别忘记换行加上 endmodule** \n\n到这里驱动模块的编写已经完成了。\n\n## 在顶层模块中例化\n\n- **这里也是要新建文件的**\n\n```verilog\nmodule TOP //设置顶层模块\n(\n\tinput\t\t\tnRST,\n    input           XTAL_IN,\n\n\toutput\t\t\tLCD_CLK,\n\toutput\t\t\tLCD_HYNC,\n\toutput\t\t\tLCD_SYNC,\n\toutput\t\t\tLCD_DEN,\n\toutput\t[4:0]\tLCD_R,\n\toutput\t[5:0]\tLCD_G,\n\toutput\t[4:0]\tLCD_B\n\n); // 罗列需要的端口\n\n\twire\t\tCLK_SYS;\t\n\twire\t\tCLK_PIX;\n    \n    //例化pll\n    Gowin_rPLL chip_pll(\n        .clkout(CLK_SYS), //output clkout     //200M\n        .clkoutd(CLK_PIX), //output clkoutd   //33.00M\n        .clkin(XTAL_IN)    //input clkin\n    );\t\n\n\tVGAMod\tVGAMod_inst //例化vga驱动\n\t(\n\t\t.CLK\t\t(\tCLK_SYS     ),\n\t\t.nRST\t\t(\tnRST\t\t),\n\n\t\t.PixelClk\t(\tCLK_PIX\t\t),\n\t\t.LCD_DE\t\t(\tLCD_DEN\t \t),\n\t\t.LCD_HSYNC\t(\tLCD_HYNC \t),\n    \t.LCD_VSYNC\t(\tLCD_SYNC \t),\n\n\t\t.LCD_B\t\t(\tLCD_B\t\t),\n\t\t.LCD_G\t\t(\tLCD_G\t\t),\n\t\t.LCD_R\t\t(\tLCD_R\t\t)\n\t);\n\n\tassign\t\tLCD_CLK\t\t=\tCLK_PIX;\n\nendmodule\n```\n\n## 综合、约束、布局布线\n\n### 综合\n\n完成上面步骤后转到“Process”界面下，对编辑好的代码进行综合，即运行“Systhesize” \n![](./../../Tang-Nano-9K/nano_9k/nano_9k_synthsize.png)\n\n运行的结果如下图出现 \n![](./../../Tang-Nano/assets/LED.png) \n\n且下方结果栏不出现任何从报错，说明前面编辑的代码无误，如果有错，根据错误提示进行改正即可。\n\n### 约束 \n\n- 此处仅管脚约束\n\n对应的管脚约束如下表格；\n关于管脚约束可以参考[自建点灯文章(点我)](./led/self_create.html)里面的约束方法\n如果感觉麻烦的话也可以直接复制准备好的[文件(点我)](./lcd_constrains.html)，将页面里的内容复制到工程目录里 .cst 文件中（如果没有.cst 文件那么自己新建一个）**物理管脚约束文件** 即可。\n\n|   PORT   |  PIN  |   PORT   |  PIN  |\n| :------: | :---: | :------: | :---: |\n|  LED_B   |  10   |  LED_G   |  11   |\n|  LED_R   |   9   | LCD_B[4] |  24   |\n| LCD_B[3] |  23   | LCD_B[2] |  22   |\n| LCD_B[1] |  20   | LCD_B[0] |  19   |\n| LCD_G[5] |  18   | LCD_G[4] |  17   |\n| LCD_G[3] |  16   | LCD_G[2] |  15   |\n| LCD_G[1] |  27   | LCD_G[0] |  28   |\n| LCD_R[4] |  29   | LCD_R[3] |  30   |\n| LCD_R[2] |  31   | LCD_R[1] |  34   |\n| LCD_R[0] |  35   | LCD_DEN  |  21   |\n| LCD_SYNC |  32   | LCD_HYNC |  33   |\n| LCD_CLK  |   8   | XTAL_IN  |  47   |\n|   nRST   |  44   |          |       |\n\n\n### 布局布线\n\n管脚约束之后需要在设置里面开启引脚复用才能完成布局布线。\n具体位置在 软件顶部菜单栏 Project -> Configuration -> Place&Route -> Dual-Purpose Pin\n![](./led/assets/enable_io_mux.png)\n\n设置完上面的之后。\n就可以开始布局布线(Place&Route)了。\n完成后就可以给开发板验证代码内容了。\n\n## 烧录\n\n布局布线结束后生成比特流，就可以烧录开发板了。\n\n## 结束\n\n上面差不多叙述了所需要的代码。\n整个工程可以参考 [这里](https://github.com/sipeed/TangNano-1K-examples/tree/main/example_lcd/) \n\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/Tang-Nano-1K/examples/lcd_constrains.html": {"title": "LCD constrain file content", "content": "---\ntitle: LCD constrain file content\n---\n\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">Previous page</a>\n</p>\n\n```cst\nIO_LOC \"LCD_B[4]\" 24;\nIO_PORT \"LCD_B[4]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[3]\" 23;\nIO_PORT \"LCD_B[3]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[2]\" 22;\nIO_PORT \"LCD_B[2]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[1]\" 20;\nIO_PORT \"LCD_B[1]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_B[0]\" 19;\nIO_PORT \"LCD_B[0]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[5]\" 18;\nIO_PORT \"LCD_G[5]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[4]\" 17;\nIO_PORT \"LCD_G[4]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[3]\" 16;\nIO_PORT \"LCD_G[3]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[2]\" 15;\nIO_PORT \"LCD_G[2]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[1]\" 27;\nIO_PORT \"LCD_G[1]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_G[0]\" 28;\nIO_PORT \"LCD_G[0]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[4]\" 29;\nIO_PORT \"LCD_R[4]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[3]\" 30;\nIO_PORT \"LCD_R[3]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[2]\" 31;\nIO_PORT \"LCD_R[2]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[1]\" 34;\nIO_PORT \"LCD_R[1]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_R[0]\" 35;\nIO_PORT \"LCD_R[0]\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_DEN\" 21;\nIO_PORT \"LCD_DEN\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_SYNC\" 32;\nIO_PORT \"LCD_SYNC\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_HYNC\" 33;\nIO_PORT \"LCD_HYNC\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"LCD_CLK\" 8;\nIO_PORT \"LCD_CLK\" IO_TYPE=LVCMOS33 PULL_MODE=UP DRIVE=8;\nIO_LOC \"XTAL_IN\" 47;\nIO_PORT \"XTAL_IN\" IO_TYPE=LVCMOS33 PULL_MODE=UP;\nIO_LOC \"nRST\" 44;\nIO_PORT \"nRST\" IO_TYPE=LVCMOS33 PULL_MODE=UP;\n```\n\n<p id=\"back\">\n    <a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>\n</p>"}, "/hardware/zh/tang/index.html": {"title": "Tang 系列开发板", "content": "---\ntitle: Tang 系列开发板\n---\n\nTang 系列开发板主要分为 Tang Nano 和 Tang Primer 两个系列。\n\n## 当前产品\n\n### 外观总览\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Tang Primer 20K（核心板）</th>\n<th style=\"text-align:center\">Tang Nano 1K</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"./tang-primer-20k/primer-20k.html\"><img src=\"./../../assets/Tang/primer_20k/primer_20k.png\" alt=\"Tang Primer 20K（核心板）\"></a></td>\n<td style=\"text-align:center\"><a href=\"./Tang-Nano-1K/Nano-1k.html\"><img src=\"./../../assets/Tang/Nano-1K/1K.png\" alt=\"Tang Nano 1K\"></a></td>\n</tr>\n</tbody>\n<thead>\n<tr>\n<th style=\"text-align:center\">Tang Nano 4K</th>\n<th style=\"text-align:center\">Tang Nano 9K</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"./Tang-Nano-4K/Nano-4K.html\"><img src=\"./../../assets/Tang/Nano_4K/Nano_4K.png\" alt=\"Tang Nano 4K\"></a></td>\n<td style=\"text-align:center\"><a href=\"./Tang-Nano-9K/Nano-9K.html\"><img src=\"./../../assets/Tang/Nano-9K/9K.png\" alt=\"Tang Nano 9K\"></a></td>\n</tr>\n</tbody>\n</table>\n\n### 主要参数对比\n\n| 条目            |<p style=\"white-space:nowrap\">Tang Primer 20K</p>| <p style=\"white-space:nowrap\">Tang Nano 9K</p>|<p style=\"white-space:nowrap\">Tang Nano 4K</p>|<p style=\"white-space:nowrap\">Tang Nano 1K</p>|\n| :-------------- | :---------------- | :---------------- | :---------------- | ------------ |\n| 逻辑单元(LUT4)  | 20736             | 8640              | 4608              | 1152         |\n| 寄存器（FF）    | 15552             | 6480              | 3456              | 864          |\n| S-SRAM (bits)   | 41472             | 17280             |                   |              |\n| B-SRAM (bits)   | 828K x 46         | 468K x 26         | 180K x 10         | 72K x 4      |\n| 用户闪存 (bits) |                   | 608K              | 256K              | 96K          |\n| 锁相环 (PLL)    | 4                 | 2                 | 2                 | 1            |\n| 板载 Flash      | 32Mbits NOR Flash | 32Mbits NOR Flash | 32Mbits NOR Flash | 预留焊盘     |\n| 硬核处理器      |                   |                   | Cortex-M3         |              | |\n\n## 停产产品\n\n|                                  Tang Nano                                  |                                         Tang Primer                                          |\n| :-------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------: |\n| [![Tang Nano](./../../assets/Tang/Nano/Tang_Nano.jpg)](./Tang-Nano/Nano.html) | [![Tang Primer](./../../assets/Tang/permier/Tang_permier.jpg)](./Tang-primer/Tang-primer.html) |"}, "/hardware/zh/lichee/RV/86_panel.html": {"title": "Lichee 86 Panel", "content": "# Lichee 86 Panel\n\n## 概述\n\nLichee RV-86 Panel是为智能家居中控应用场景而设计的开发套件。在硬件上，套件包含了LicheeRV 核心板（全志D1+512MB DDR3)、4英寸 IPS 显示屏+电容触摸屏、WIFI + BT、以太网、双数字硅麦和 GPIO 拓展接口等。\n在软件上，我们提供了 Linux 系统（OpenWRT 及 Debian )和阿里 WAFT 开发环境( WAFT 是阿里基于 WebAssembly 和自研的渲染引擎打造的一款面向 AIOT 的高性能应用框架)。\n\n![裸板视图](./../assets/RV/86_2.png)\n\n## 参数\n| 项目 | 参数 |\n| --- | --- |\n| 核心模块 | Sipeed LicheeRV 哪吒计算条 |\n| 显示 | 默认搭配为4英寸480\\*480 IPS标清电容触摸屏<br>可选升级为4英寸720\\*720 IPS高清电容触摸屏<br>预留8英寸1280\\*800 IPS电容触摸屏接口 |\n| 音频 | 板载1W小扬声器，双路数字硅麦 |\n| 网络 | XR829 WIFI+BT无线模块<br>RTL8201F百兆以太网<br>预留板载RJ45以太网接口 |\n| USB | 核心板带有USB-C OTG接口 <br>底板预留USB-C HOST 与USB转串口电路 |\n| 电源 | 支持5V,12V供电(板载DC-DC ) |\n| 扩展引脚 | 双2x8Pin 2.54mm 排针，预留FPCIO引出 | \n| 外壳 | 选配86盒3D打印外壳，图纸开源 |\n| 尺寸 | 86x86mm |\n| 适用场景 | 智能家居中控，WAFT UI评估 |\n| 开发框架 | 支持WAFT (WebAssembly Framework For Things）环境 |\n| 系统支持 | 支持 OpenWRT及 Debian系统 |\n| 开发资源 | 提供原厂SDK的 Docker开发镜像 |\n\n![板子功能](./../assets/RV/86_pin.png)\n\n## 相关链接\n\n[下载站](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV_86_panel)\n\n[烧录系统](./flash.html)\n\n[相关使用](./user.html)\n\n## 产品技术支持\n\nLichee RV-86 Panel 可以在多种场景实现客户不同方面的需要，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务 <support@sipeed.com>。"}, "/hardware/zh/lichee/RV/Dock.html": {"title": "Lichee Dock", "content": "# Lichee Dock\n\n## 概述\n\nLichee RV Dock 是为开源开发者而设计的一款功能**集成度高**、**体积小**且价格亲民的RISC-V Linux开发板套件。它不仅支持 **HDMI 输出**，搭配屏幕转接板更可以支持多种的屏幕显示（**MIPI、RGB和MCU接口**）。它同时具备丰富的外设，包括一个主机 **USB-A** 接口，**2.4G Wi-Fi+BT** 模块，一个模拟麦克风和扬声器插口等。使用者拿到套件之后，无需等待和焊接，即可用套件连接显示器和 USB 设备快速上手开发各种有趣且实用的 Linux 应用，较大地**加速了**开发者的试研和开发工作。除此之外，用户还可以利用开发板的多种显示接口，无线功能和 GPIO ，搭配板载麦克风和扬声器，快速实现各种创意。\n\n![外观图](./../assets/RV/RV-Dock.jpg)\n\n## 参数\n\n| 项目 | 参数 |\n| --- | --- |\n|支持的核心板 | Lichee RV 核心板 |\n| 显示输出接口 | 板载一个显示输出连接器；<br>RGB屏幕信号和MIPI屏幕信号连接到2x20P排针焊盘 <br>（可以使用我们的屏幕转接板驱动RGB接口或者MIPI接口的屏幕） |\n| 网络连接 | 板载2.4G WIFI+BT模组、2.4G 贴片天线、IPEX连接器 |\n| USB | 板载一个USB type-A母座 |\n| 音频 | 板载扬声器驱动电路（最高支持4Ω3W扬声器）和扬声器连接器<br>板载驻极体麦克风电路 |\n| 存储 | 预留了一个SOP8焊盘，SPI协议，默认不焊接元件 |\n| 拓展连接器 | 板载30P FPC连接器，可以直接连接到我们的Mic Array R6 麦克风阵列板 |\n| GPIO拓展 | 通过2x20P 2.54mm 焊盘引出GPIO供用户使用 |\n| LED | 板载一个WS2812 RGB LED<br>板载一个电源指示灯 |\n| 按键 | 板载一个复位RST按键<br>板载一个用户按键 |\n\n\n## 相关链接\n\n[下载站](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV-Dock)\n\n[使用教程](./flash.html)\n\n## 产品技术支持\n\nLichee RV Dock 可以在多种场景实现客户不同方面的需要，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务 support@sipeed.com。"}, "/hardware/zh/lichee/RV/flash.html": {"title": "Lichee RV 烧录系统", "content": "# Lichee RV 烧录系统\n\n系统镜像分为 Tina与Debian两种，Tina为专用小linux镜像，Debian为桌面级镜像\n\n## 准备\n\n1. Lichee RV 核心板\n2. TF 内存卡（建议使用[官方店](https://shop365481095.taobao.com/)的的内存卡，其他的卡可能会有各种奇怪的问题）\n3. 烧录工具 [PhoenixCard](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/tool)\n4. 系统镜像下载\n    国内用户：[百度网盘](https://pan.baidu.com/s/1QJTaDw6kkTM4c_GAlmG0hg) 提取码：wbef\n    国外用户：[Mega](https://mega.nz/folder/lx4CyZBA#PiFhY7oSVQ3gp2ZZ_AnwYA)\n\n| 镜像词缀说明 | 含义 | 备注 |\n| --- | --- | --- |\n| LicheeRV | Sipeed 专用的 RISCV D1 Linux 系列系统。 | --- |\n| Tina | 标记为 tina openwrt 系统。 | --- |\n| debian | 标记为 riscv debian 系统。 | --- |\n| 86panel | [taobao 86panel](https://item.taobao.com/item.htm?spm=a230r.1.14.18.30b534187YMsRx&id=663345415205&ns=1&abbucket=7#detail) | --- |\n| dock | [taobao dock](https://item.taobao.com/item.htm?spm=a1z10.3-c-s.w4002-21410578028.20.35765d54K9XCOt&id=666274331852) | --- |\n| hdmi | 表示屏幕默认输出到 HDMI 屏幕上。 |  |\n| 800480 / 480P | 表示屏幕默认输出到 LCD 屏幕上，分辨率可以是 800*480 或 480P (640X480)。 |  |\n| 8723ds | 表示该镜像支持 8723ds WIFI / BLE 驱动。 |  |\n| xr829 | 表示该镜像支持 xr829 WIFI / BLE 驱动。 |  |\n| waft | 是否内置 waft 软件。 |  |\n\n\n## 烧录镜像\n\n### 烧录步骤\n\n烧录前最好使用[SD card Formatter](https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip)先把内存卡格式化一次，格式化的时候注意不要选择错了镜像。\n\n- 打开烧录软件 [PhoenixCard](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/tool)，选择烧录的固件，将内存卡通过读卡器插入电脑中\n- 选择 `启动卡` 选项\n- 选择正确的盘符\n- 点击 `烧卡`\n- 根据状态栏的颜色可以判断烧录结果：红色的话说明烧录失败了，建议使用[SD card Formatter](https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip)格式化后再重新烧录一次；绿色则表示一切正常。\n\n![](./../assets/RV/flash.png)\n\n要注意 Windows 默认打不开 linux 的文件系统，所以对于烧录过 linux 镜像的 sd 卡在 Windows 上会不能直接被打开，且被提示需要格式化之类的。\n这时可以使用[SD card Formatter](https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip)来格式化 sd 卡来恢复到 Windows 系统可用的状态。\n对于嵌入式 linux，建议持有两张以上的 sd 卡。\n\n> 并不能保证每台电脑和每个人的内存卡都是可以烧录的，烧录失败的话建议购买官方的镜像卡。\n\n等待烧录结束；烧录 Tina 系统镜像会比较快，烧录 Debian 系统镜像将会久一点，可能多用10分钟。\n\n### 烧录失败相关\n\n如果在烧录时提示格式化失败，或者使用烧录过的卡但是电脑上没有显示盘符，可以按以下操作来解决：\n\n1. 在此下载磁盘处理软件： https://www.diskgenius.cn/\n2. 电脑上显示不出的盘符，会在该软件里显示出来，使用该软件进行快速分区：\n    ![attachmentId-2788](./../assets/RV/Diskgenius.png)\n3. 分区完成后，电脑上就能够看到盘符，PhoenixCard 里也能看到，在 PhoenixCard 里点击恢复卡即可恢复卡到正常状态\n4. 按之前步骤继续烧录即可\n\n## 启动\n\n启动后若提示需要用户名和密码的话的分别如下：\n\n- Tina 系统登录用户名：`root`  密码：`tina`\n\n- Debian 系统登录用户名：`sipeed` 密码：`licheepi`\n\n插卡启动，可以在串口工具中查看到启动信息:\n\n- debian 启动的打印信息\n\n<details>\n  <summary><font color=\"#4F84FF\">点开查看部分debian启动日志</font></summary>\n<pre><code class=\"language-shell\">\n[270]HELLO! BOOT0 is starting!\n[273]BOOT0 commit : 27369ab\n\nOpenSBI v0.6\n   ____                    _____ ____ _____\n  / __ \\                  / ____|  _ \\_   _|\n | |  | |_ __   ___ _ __ | (___ | |_) || |\n | |  | | '_ \\ / _ \\ '_ \\ \\___ \\|  _ < | |\n | |__| | |_) |  __/ | | |____) | |_) || |_\n  \\____/| .__/ \\___|_| |_|_____/|____/_____|\n        | |\n        |_|\n</code></pre>\n</details>\n\n- Tina 启动的打印信息\n\n<details>\n  <summary><font color=\"#4F84FF\">点开查看Tina启动日志</font></summary>\n<pre><code class=\"language-shell\">\nBusyBox v1.27.2 () built-in shell (ash)\n\n    __  ___     _        __   _\n   /  |/  /__ _(_)_ __  / /  (_)__  __ ____ __\n  / /|_/ / _ `/ /\\ \\ / / /__/ / _ \\/ // /\\ \\ /\n /_/  /_/\\_,_/_//_\\_\\ /____/_/_//_/\\_,_//_\\_\\\n ----------------------------------------------\n Maix Linux (Neptune, 5C1C9C53)\n ----------------------------------------------\nroot@MaixLinux:/#\n</code></pre>\n</details>\n\n## 相关问题\n\n[点我跳转](./problems.html)"}, "/hardware/zh/lichee/RV/problems.html": {"title": "相关问题", "content": "---\ntitle: 相关问题\nkeywords: debian, Rv, Problam, apt, img, sipeed\n---\n\n## apt 相关\n\n- 在使用默认debian镜像时，如果进行apt操作，发现以下报错：\n  \n> GPG error: http://ftp.ports.debian.org/debian-ports sid InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY E852514F5DF312F6\n\n说明内置的密钥到期了，需要手工更新下密钥；下面是两种下载密钥的方式：\n - 网页下载：https://packages.debian.org/sid/all/debian-ports-archive-keyring/download\n - wget方式 `wget http://ftp.cn.debian.org/debian/pool/main/d/debian-ports-archive-keyring/debian-ports-archive-keyring_2022.02.15_all.deb`\n  \n将密钥拷贝（使用scp或者lrzsz工具）到LicheeRV板上，执行：\n\n> sudo dpkg -i debian-ports-archive-keyring_2022.02.15_all.deb\n\n即可更新密钥，然后可以正常进行apt更新：`sudo apt-get update`\n\n## 启动无反应\n\n- 确认自己在使用 PhoenixCard 的时候选择的是 `启动卡`\n  ![](./../assets/RV/flash.png)\n- 对于使用Tina系统的是可以用adb终端来连接进行通信\n  直接将电脑与核心板相连即可\n  ![](./../assets/RV/adb-shell.png)\n- 对于debian系统只能使用串口来通信\n\n## 86 panel 烧录后屏幕无反应/显示不对\n\n需要在linux系统中使用下面命令来和对应的fex文件来覆盖板级配置\nfex下载地址 https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/SDK/board\n覆盖指令为\n```bash\nsudo dd if=boot_package_XXX.fex of=/dev/sdX bs=1K seek=16400\n```\n上面命令中的 sdX 为 TF 卡在 linux 系统中的命名。\n\n有问题的话可以去[论坛](https://bbs.sipeed.com/)发帖"}, "/hardware/zh/lichee/RV/user.html": {"title": "基础上手", "content": "# 基础上手\n\n> 编辑于20220616\n\n## Dock 相关使用\n\n### 连接板子\n\n- 我们可以很容易看到底板背部上有串口的 TX 和 RX 引脚标识。因此可以使用 ttl 电平的串口来使板子与电脑进行通信（Tina和Debian均适用）。\n\n- 对于 Tina 系统可以使用核心板上的 typec 接口和电脑上的 adb 终端来进行连接\n\n- 对于 Debian 系统可以外接键盘和鼠标来直接操作\n\n#### Debian 相关事项\n\n启动会比较慢，取决于TF卡的速度。\n\n用户名为 `root`  密码是 `licheepi`\n\n**使用串口与 debian 系统连接的话会一直打印内核信息。解决方法是：**\n- 使用root权限编辑 `/etc/rsyslog.conf` 并且把文件最后一行中的 `*.emerg` 改成 `#*.emerg` \n- 重启 rsyslog 服务，直接执行 `/etc/init.d/rsyslog restart` 即可\n\n**想要在图形化界面中调出命令行的方法：**\n键盘执行 `Alt+F2` 打开运行，接着在里面输入 `termit` 即可打开命令行终端。\n\n### 点灯示例\n\n当我们成功进入系统(Tina和debian均可)后，就可以进行基础的点灯操作啦！\n\n核心板的螺丝固定焊盘旁有一颗 LED ，查看尺寸图很容易看到：\n\n<details>\n  <summary><font color=\"#4F84FF\">点开查看尺寸图</font></summary>\n  <img src=\"./../assets/RV/rv_coreboard_dimension.png\">\n</details>\n\n从[原理图](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/HDK/2_Schematic)可以查到 LED 连接的是 PC0 引脚，根据简单的公式 ('C'-'A')x32 + 0 = 2x32+0 = 64\n\n当然我们也可以查看 pinmux-pins 文件中的内容来知道 IO 复用情况表：\n\n```bash\ncat /sys/kernel/debug/pinctrl/2000000.pinctrl/pinmux-pins\n...\npin 64 (PC0): device 2008000.ledc function ledc group PC0 #这里可以看到是LED引脚\npin 65 (PC1): UNCLAIMED\npin 66 (PC2): UNCLAIMED\npin 67 (PC3): UNCLAIMED\npin 68 (PC4): UNCLAIMED\npin 69 (PC5): UNCLAIMED\npin 70 (PC6): UNCLAIMED\npin 71 (PC7): UNCLAIMED\n...\n```\n\n我们先导出该 GPIO：\n\n```bash\necho 64 > /sys/class/gpio/export  #导出GPIO64\n```\n\n然后再将该 IO 置为输出状态，即可操作其电平：\n\n```bash\necho out>/sys/class/gpio/gpio64/direction #设置IO为输出\necho 1 > /sys/class/gpio/gpio64/value   #输出高电平\necho 0 > /sys/class/gpio/gpio64/value   #输出低电平\n```\n\n上面的是最简单的使用 IO 的操作了，就不细说了吧。\n\n不使用IO的话就取消导出\n\n```bash\necho 64 > /sys/class/gpio/unexport    #取消导出GPIO64\n```\n\n至此我们就成功在 RISC-V 64 D1上点灯啦~\n\n你也可以对 串行RGB LED WS2812 进行花式点灯：\n\n```bash\necho 255 > /sys/class/leds/sunxi_led0r/brightness #红灯亮\necho 0 > /sys/class/leds/sunxi_led0r/brightness   #红灯灭\necho 255 > /sys/class/leds/sunxi_led0g/brightness #绿灯亮\necho 0 > /sys/class/leds/sunxi_led0g/brightness   #绿灯灭\necho 255 > /sys/class/leds/sunxi_led0b/brightness #蓝灯亮\necho 0 > /sys/class/leds/sunxi_led0b/brightness   #蓝灯灭\n```\n\n### 外设功能验证\n\n#### 音频功能\n\n- 录音设备查看\n\n使用 `arecord -l` 命令\n\n```bash\nroot@MaixLinux:~# arecord -l\n**** List of CAPTURE Hardware Devices ****\ncard 0: audiocodec [audiocodec], device 0: SUNXI-CODEC 2030000.codec-0 []\n  Subdevices: 1/1\n  Subdevice 0: subdevice 0\ncard 1: snddmic [snddmic], device 0: 2031000.dmic-dmic-hifi dmic-hifi-0 []\n  Subdevices: 1/1\n  Subdevice 0: subdevice 0\ncard 2: sndhdmi [sndhdmi], device 0: 2034000.daudio-audiohdmi-dai 20340a4.hdmiaudio-0 []\n  Subdevices: 1/1\n  Subdevice 0: subdevice 0\n```\n\n- 播放设备查看\n\n使用 `aplay -l` 命令\n\n```bash\nroot@MaixLinux:~# aplay -l\n**** List of PLAYBACK Hardware Devices ****\ncard 0: audiocodec [audiocodec], device 0: SUNXI-CODEC 2030000.codec-0 []\n  Subdevices: 1/1\n  Subdevice 0: subdevice 0\ncard 2: sndhdmi [sndhdmi], device 0: 2034000.daudio-audiohdmi-dai 20340a4.hdmiaudio-0 []\n  Subdevices: 1/1\n  Subdevice 0: subdevice 0\n```\n\n录音播放测试：\n\n```bash\narecord -D hw:1,0 -f S16_LE -t wav -d 3 t.wav     #录音\n```\n```bash\naplay -D hw:0,0 t.wav                             #播放录音\n```\n\n另外可以使用 alsamixer 进行音量调整\n\n<details>\n  <summary><font color=\"#4F84FF\">点开查看运行alsamixer</font></summary>\n    <pre><code class=\"language-shell\">┌────────────────────────────── AlsaMixer v1.2.4 ──────────────────────────────┐\n│ Card: audiocodec                                     F1:  Help               │\n│ Chip:                                                F2:  System information │\n│ View: F3:[Playback] F4: Capture  F5: All             F6:  Select sound card  │\n│ Item: Headphone [dB gain: -24.00]                    Esc: Exit               │\n│                                                                              │\n│     ┌──┐                                                           ┌──┐      │\n│     │  │                                                           │  │      │\n│     │  │                                                           │  │      │\n│     │  │                                                           │  │      →\n│     │  │                                                           │  │      →\n│     │  │                                                           │▒▒│      →\n│     │  │                                                           │▒▒│      →\n│     │  │                                                           │▒▒│      →\n│     │  │                                                           │▒▒│      →\n│     │▒▒│                                                           │▒▒│      →\n│     │▒▒│                                                           │▒▒│      │\n│     │▒▒│                                                           │▒▒│      │\n│     ├──┤     ┌──┐     ┌──┐     Off      ┌──┐     ┌──┐     ┌──┐     └──┘      │\n│     │MM│     │MM│     │MM│              │MM│     │MM│     │MM│               │\n│     └──┘     └──┘     └──┘              └──┘     └──┘     └──┘               │\n│      25                                                             63       │\n│  &lt;Headphon>FMINL ga FMINR ga ADC1 ADC ADC1 Inp ADC1 Inp ADC1 Inp ADC1 vol    │\n└──────────────────────────────────────────────────────────────────────────────┘</code></pre>\n</details>\n\n#### USB功能\n\n默认内核支持外挂U盘的驱动，插上U盘后可以使用 `fdisk -l` 指令查看到新增的 /dev/sda 设备 <br>\n\n如果U盘没有被格式化，应该使用mkfs.vfat指令来格式化U盘，再使用mount指令挂载U盘。\n\n#### 无线网络\n\n##### **使用 Tina 系统**\n\n  LicheeRV 底板默认使用 XR829 或者 RTL8723BS wifi 模块，可以使用以下指令进行联网操作\n\n  先配置热点信息：需要手动在 /etc/wifi 目录下的 wpa_supplicant.conf 文件里添加下面内容\n\n  ```bash\n  network={  \n      ssid=\"WiFi_name\"  \n      psk=\"WiFi_password\"  \n  } \n  ```\n\n  配置完成后重启一下(执行 `reboot` 命令即可)，重启完成后执行 `ifconfig wlan0 up; udhcpc -iwlan0 &` 后即可连上对应的wifi。\n  连上网络后，就可以使用 ssh (自己记得设置一下密码)来远程登录板卡，或者使用 scp 来进行文件传输。\n\n##### **使用 debian 系统**\n\n> Debian 不支持命令行联网\n  \n  点击系统菜单--Preferenes--Connman Settings，打开 Network Settings ，查看网络属性中的 Interface 是否为 wlan0。双击网络名称，并输入 WiFi 密码进行连接\n\n  ![](./../assets/RV/wifi-1.jpg)\n\n  成功连接网络之后，通过系统系统菜单--Preferenes--Connman Settings，查看网络属性查看网络的 IP 地址\n\n  ![](./../assets/RV/wifi-2.jpg)\n\n#### 屏显触摸\n\nLicheeRV系列可以使用以下显示屏：\n- SPI屏\t\t1.14寸屏(TODO)\n- RGB屏\t\t4.3寸 480x272；5.0寸 800x480；\n- RGB+SPI屏\t4.0寸 480x480(st7701s); 4.0寸 720x720(nv3052c)\n- MIPI屏\t\t8.0寸 1280x720(ILI9881C)\n\n如果需要调试屏幕驱动，可以使用以下指令查看屏幕驱动信息：\n\n以下信息根据烧录镜像的不同而打印的不一样。\n\n```bash\ncat /sys/class/disp/disp/attr/sys\n\nscreen 0:\nde_rate 300000000 hz, ref_fps:60\nmgr0: 480x480 fmt[rgb] cs[0x204] range[full] eotf[0x4] bits[8bits] err[0] force_sync[0] unblank direct_show[false] iommu[1]\ndmabuf: cache[0] cache max[0] umap skip[0] overflow[0]\n\tlcd output\tbacklight( 50)\tfps:59.5\tesd level(0)\tfreq(60)\tpos(0)\treset(0)\t 480x 480\n\terr:0\tskip:184\tirq:230715\tvsync:0\tvsync_skip:0\n   BUF    enable ch[1] lyr[0] z[16] prem[N] a[globl 255] fmt[  0] fb[ 480, 480; 480, 480; 480, 480] crop[   0,   0, 480, 480] frame[   0,   0, 480, 480] addr[ffe00000,       0,       0] flags[0x       0] trd[0,0]\n```\n\n屏幕彩条测试：`echo 1 > /sys/class/disp/disp/attr/colorbar`\n\n#### 视频播放\n\n我们可以尝试在LicheeRV上播放BadApple啦~ [视频文件下载](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/MP4)\n\nTina镜像中内置了ffmpeg软件包；ffmpeg是强大的多媒体库，可以用于录屏或者播放\n\n录屏指令：\n\n```bash\nffmpeg -f fbdev -framerate 10 -i /dev/fb0 record.avi\n```\n\n播放指令（分别是扬声器播放音频和hdmi播放音频）：\n\n```bash\nffmpeg -i /mnt/UDISK/badapple_640480_xvid.mp4 -pix_fmt bgra -f fbdev /dev/fb0 -f alsa hw:0,0  \nffmpeg -i /mnt/UDISK/badapple_640480_xvid.mp4 -pix_fmt bgra -f fbdev /dev/fb0 -f alsa hw:2,0   \n```\n\n这里由于是CPU软解，所以测试最高分辨率约为720x540， 再高会变卡\n\n<iframe src=\"https://player.bilibili.com/player.html?aid=209723771&bvid=BV1xa411r7PP&cid=457742249&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n#### 麦克风阵列(仅debian系统)\n\n将板子与麦克风阵列连接好后（需要注意不要将排线接反和不要把引脚接反。），直接执行内置的 `micarr_0609` 指令即可即\n\n```bash\nsudo ./micarr_0609\n```\n\n有麦克风阵列相关的二次开发需求，可以联系 support@sipeed.com\n\n![](./../assets/RV/mic_array_picture.jpg)\n\n<iframe src=\"https://player.bilibili.com/player.html?aid=849734125&bvid=BV1HL4y1H7nv&cid=457750392&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n## 86Panel\n\n如果烧录后显示不正确或者不对劲的话，前往[相关问题](./problems.html)纠错一下\n\n下面仅进行简单的操作。另外上面 dock 板子的操作同样适用于 86Panel。\n\n对于使用 tina 系统的是没有 GUI 界面的。因此下面使用 debian 简单展示一下屏幕\n\n烧录 debian 系统后，插卡启动，等待2分钟左右，屏幕上就会显示登录界面\n\n![登录界面](./../assets/RV/LicheeRV_login_picture.png \"登录界面\")\n\n输入用户名 sipeed，密码 licheepi，即可进入桌面 （使用USB HOST口外接键盘鼠标进行输入）\n\n![桌面样式](./../assets/RV/desktop_appearance.png \"桌面样式\")\n\n进入桌面后可以进行一些基础操作\n\n- Alt+F2 可以打开 运行 ，接着输入 termit 即可打开命令行终端\n\n![基础操作](./../assets/RV/Basic_operation.png \"基础操作\")\n\n接下来让我们尝试在Debian下跑一下Hello World:\n\n![运行自制程序](./../assets/RV/Run_HelloWorld.png \"运行自制程序\")\n\n另有720P高清屏的效果对比，有米的朋友可以考虑入手。\n\n注意使用的时候应当烧录一下板级配置文件来成功显示，具体请看[86panel显示异常](problems.html#86-panel-烧录后屏幕无反应显示不对)\n\n实际显示效果如下：\n\n![高清显示_1](./../assets/RV/display_1.png)\n\n![高清显示_2](./../assets/RV/display_2.png)\n\n### 点灯操作\n\n由于 86Panel 的核心板的 LED 与底板外设复用了，因此不能直接使用核心板的灯了。\n\n将直插型 LED 正确地与预留的 IO 焊盘连接好后可以参考 dock 底板点灯的方式来点灯。\n\n### 连接网络\n\n#### 有线网络\n\n86 Panel 支持百兆网络，使用套餐附送的网线接上板子网口后，执行以下指令来连接有线网络\n\n```bash\nifconfig eth0 up\nudhcpc -ieth0\n```\n\n#### 无线网络\n\n可以参考 Dock 底板连接[网络的方法](#无线网络)\n\n### 其他\n\n与 dock 底板相关操作一致\n\n### 触摸屏测试\n\n<font color=#16B2C>仅 tina 系统内置 触摸demo</font>\n\n如果你购买的是86面板套餐，可以使用 ts_test 进行触摸测试。\n\n> 注意触摸驱动有瑕疵，ts_test测试时松开后，光标会不动，但是终端仍会正常打印信息\n\n```bash\nroot@MaixLinux:/# ts\nts_calibrate  ts_harvest    ts_print_mt   ts_test       ts_verify\nts_finddev    ts_print      ts_print_raw  ts_test_mt    tshowimg\n```\n\n## BSP SDK 开发指南\n\n为了方便用户自行开发，矽速整理发布了 LicheeRV 的bsp开发docker镜像，大家使用该镜像可以快速开始D1的系统级开发。\n\n国内用户：[百度网盘](https://pan.baidu.com/s/1QJTaDw6kkTM4c_GAlmG0hg)  提取码：wbef\n国外用户：[Mega](https://mega.nz/folder/lx4CyZBA#PiFhY7oSVQ3gp2ZZ_AnwYA)\n\n在网盘中下载对应的docker文件后，解压到tar文件后导入到docker\n\n```bash\ngzip -d licheerv_d1_compile.tar.gz #解压成tar文件\ndocker import licheerv_d1_compile.tar licheerv_d1_compile:latest #docker导入镜像\n```\n\n成功运行后应当重新登陆一次；用户名为 `nihao`，密码为 `sipeed123`\n\n```bash\nsudo docker run -it licheerv_d1_compile:latest /bin/bash # 交互模式启动D1镜像编译环境\nlogin #切换用户\n```\n\n进入容器后的基础编译操作为：\n\n```bash\ncd ~/sdk/tina-d1-open_new/\nsource build/envsetup.sh\nlunch   #选1\nmake menuconfig  #去掉里面的 alsa-plugin选项，否则编译不过\nmake -j8  #按实际CPU性能编译\npack  #打包\n```\n\nSDK内置了一些版型的dts，你可以自行选择编辑：\ndevice/config/chips/d1/configs/nezha/board_xxx.dts\n\n其他SDK的开发说明，可以参见全志开发平台上下载的相关文档\nhttps://open.allwinnertech.com/\n也可以加全志交流QQ群：`498263967`\n\n如果需要自己下载SDK开发，参考全志在线相关网页：https://d1.docs.aw-ol.com/\n\n## WAFT 开发指南\n\nTODO"}, "/hardware/zh/lichee/RV/RV.html": {"title": "Lichee RV - Nezha CM", "content": "# Lichee RV - Nezha CM\n\n## 概述\nLichee RV - Nezha CM是模块化设计的核心计算模组，搭载全志D1主控芯片(基于平头哥玄铁C906处理器），512MB DDR3内存，可选启动介质为TF卡或者SDNAND芯片，并使用两组M.2B - KEY 67 Pin金手指引出所有l0，方便量产使用，也方便安装替换。\n\n![](./../assets/RV/D1-4.jpg)\n\n![](./../assets/RV/D1-back.jpg)\n\n## 参数\n\n| 项目 | 参数 |\n| --- | --- |\n| CPU | 全志 D1 阿里平头哥 玄铁 C906 内核，主频 1GHz |\n| 内存 | 16bit 512MB DDR3，时钟频率 792MHz |\n| 存储 | 板载 TF 卡连接器，可插入 TF 卡作为存储，已测试能够识别1TB容量的卡； <br>预留 SD-NAND 焊盘（与 8pin LCD 接口冲突，用于商业应用定制） |\n| 显示接口 | MIPI：引出 4-lane MIPI DSI 至金手指 <br>RGB：引出 RGB888（部分与 DSI 复用） 至金手指 <br>MCU(I80)：引出 I80 接口至金手指 <br>SPI：板载 8pin SPI 液晶屏接口，可扩展 1.14 英寸液晶屏 |\n| 音频接口 | 模拟音频耳机输出(HPOUT)： 引出至金手指 <br>模拟音频线路输入(LINEIN)： 引出至金手指 <br>数字音频 (I2S/SPDIF)： 引出至金手指 <br>模拟麦克风接口(MIC3)： 引出至金手指 <br>数字麦克风接口(DMIC)： 引出至金手指 |\n| 以太网 | 引出 RMII/RGMII 接口至金手指（与部分 GPIO 复用） |\n| USB | 板载 TYPE-C USB-OTG 接口(USB0) <br>USB-HOST 引出至金手指(USB1) |\n| GPIO | 剩余 GPIO 全部引出至金手指 |\n| 按键 | • FEL 按键（进入下载模式）|\n| 指示灯 | • 一个电源指示灯 <br>• 一个用户指示灯（高电平有效） |\n|PCB | 板层 4 层 |\n| 固定方式 | 通过两组 M.2 B-KEY 金手指连接器与底板连接，使用一颗 M2 螺丝紧固 |\n| 支持开发语言 | C/C++, Python, Golang, etc... |\n| 系统镜像 | Tina Linux(基于OpenWRT 14.07)、 Debian、YoC (RTOS ) |\n\n\n![](./../assets/RV/D1-pin.png)\n\n## 底板之间的对比\n\n| 项目 | Lichee RV Dock | Lichee RV Panel |\n| :---: | --- | --- |\n| SOC | 全志D1（XuanTie C906 RISC-V） | 全志D1（XuanTie C906 RISC-V） |\n| 内存 | 1GByte | 1GByte |\n| 无线网络 | 可选择：<br>-2.4G WIFI+BT<br>-无（可以自行焊接其他型号的WIFI模块调试）\t| 2.4G WIFI+BT |\n| 有线网络 | 无\t| 支持100M以太网 |\n| 影像输出 | HDMI连接器 <br>SPI接口屏幕连接器 <br>连接屏幕转接板，可以实现：<br>-  常用RGB接口屏幕连接器（含TP引脚）（支持我们店铺的4.3寸/5.0寸屏）<br>-  MIPI接口屏幕连接器（兼容Nezha开发板适配的8寸屏） | sRGB接口屏幕连接器（含TP引脚）（支持标配的4寸IPS屏带TP） <br>MIPI接口屏幕连接器（兼容Nezha开发板适配的8寸屏）|\n| USB端口 | \"1个USB OTG(核心板板载的USB-C座子) <br> 1个USB Host(底板板载的USB-A座子) | 1个USB OTG(核心板板载的USB-C座子) <br>1个USB Host(底板板载的USB-C座子) |  \n| 拓展接口 | 支持麦克风阵列板<br>大部分GPIO通过2x20P直插焊盘引出 | 小部分GPIO通过直插焊盘引出 |\n| 音频 | 板载3W音频功放 <br>板载驻极体麦克风电路 | 板载3W音频功放 <br>板载2个MEMS数字麦克风 |\n| 按键\t| 1个FEL按键（进入下载模式）<br>1个RST按键（复位）<br>1个用户按键 | 1个FEL按键（进入下载模式） |\n| LED | 1个电源指示灯<br>1个2812 RGB LED | 1个电源指示灯 |\n| 外壳 | 无 | 有3D打印外壳 |\n| 尺寸 | 65.0mm x 40.0mm | 86.0mm x 86.0mm |\n\n\n\n## 连接1.14寸屏幕\n\n![](./../assets/RV/D1-1.png)![](./../assets/RV/D1-2.png)![](./../assets/RV/D1-3.png)\n\n> 目前 1.14 显示屏是点不亮的，需要等待后续的更新; \n\n## 系统烧录\n\n[烧录教程](./flash.html)\n\n## 注意事项\n\n当前核心板的USB Type-C连接器使用CC引脚作为自动OTG的识别引脚，但是与USB C to C 数据线的识别存在冲突，只能使用A to C数据线，可在硬件上改动器件进行切换，共有两种工作方式，具体特性对应如下：\n\n| Type-C工作模式 | OTG（出厂默认产品） | CC识别（需要改动硬件） |\n| --- | :---: | :---: |\n| 电阻R30与电阻R31 | 不贴 | 贴装5.1K 1% 0402电阻 |\n| 二极管D3与D4 | 贴装4148二极管 | 不贴 |\n| 是否兼容C to C数据线 | 否 | 是 |\n| 是否兼容A to C 数据线 | 是 | 是 |\n| 是否支持自动OTG切换 | 是 | 否 |\n\n如需使用C to C数据线，则需要改动TypeC接口周围的器件对应CC识别模式，并在需要扩展外置USB设备时手动切换为HOST模式。核心板正面位号图如下，供参考：\n> ① 换上5.1K 1% 0402电阻，② 拆除二极管\n\n![](./../assets/RV/other.png)\n\n![](./../assets/RV/D1Core2.png)\n\n\n## 资料下载\n[硬件资料下载](https://dl.sipeed.com/shareURL/LICHEE/D1/Lichee_RV/HDK)\n\nDebian 系统镜像请到\n\n>[百度网盘](https://pan.baidu.com/s/1QJTaDw6kkTM4c_GAlmG0hg)(提取码：`wbef`)\n>[Mega netdisk](https://mega.nz/folder/lx4CyZBA#PiFhY7oSVQ3gp2ZZ_AnwYA)\n\n[源码获取](/hardware/zh/lichee/RV/user.html#BSP-SDK-开发指南)\n\n## 相关问题\n\n[licheeRV debian镜像相关问题](./problems.md#apt-相关)"}, "/hardware/zh/lichee/ZeroPlus/ZeroPlus.html": {"title": "Lichee ZeroPlus", "content": "# Lichee ZeroPlus\n\n## 概述\nLichee Zero Plus是基于全志科技的S3 (ARM Cortex-A7内核)的高性能CPU芯片设计的高集成度核心板。\n使用双NGFF金手指设计，引出134pin引脚，方便开发者拓展使用。S3是V3s的升级版，1.2GHz主频，内置128MB ddr3内存，引脚相对V3s全很多。\n支持MIPI摄像头，普通并口摄像头，RGB屏幕，内置ePHY.\n\n<img src=\"./../assets/Zero-Plus/Plus_1.jpg\" width=400>\n\n## 参数\n### 芯片\nS3芯片架构\n![](./../assets/Zero-Plus/Plus_2.png)\n\n| 项目 | 参数 |\n| --- | --- |\n| CPU | • ARM® Cortex™-A7 @1.2GHz |\n| GPU | • Supports 1080p@60fps or 2-channel 1080p@30fps H.264 video encoding, supports 8M JPEG encoding <br>• Supports H.264 1080p@60fps decoding, MJPEG 1080@30fps decoding |\n| ISP | • Integrated ISP up to 8M pixels<br>• Supports two channel outputs for display and encoding respectively<br>• Supports various input and output formats<br>• Supports AE/AF/AWB<br>• Supports saturation adjustment/ noise reduction/ defect pixel correction/distortion correction |\n| Video Input/Output | • Supports 8/10/12-bit parallel CSI and 4-lane MIPI CSI2<br>• Supports BT1120 input<br>• Supports up to 8M CMOS sensor<br>• Supports RGB/i80/LVDS LCD up to 1024x768 resolution<br>• Supports Allwinner's next-gen SmartColor display technology for better visual effects for images & videos |\n| Memory | • SIP 16-bit DDR3, up to 1333Mbp |\n| Audio Codec | • Integrated 92dB audio codec<br>• Supports two ADC channels and two DAC channels<br>• Supports 3 MIC-in, a stereo Line-in, a headphone output and a stereo line-out output |\n| Security Engine | • Supports AES/DES |\n| Connectivity | • 3 x SD card controllers<br>• LRADC/SPI/TWI/UART/PWM<br>• USB, EMAC+PHY |\n\n### 核心板\n| 项目 | 参数 |\n| --- | --- |\n| CPU | ARM Cortex-A7 处理器(1.2Ghz)， VFPv4 浮点处理器 |\n| 内存 | 芯片内置 128Mbyte DDR3 内存 (时钟频率最高 672MHz) |\n| 存储 |可选 SPI Nor Flash(8/16/32MB)，SD Nand(128/512MB)，eMMC(4/8GB)<br>Micro SD 卡 |\n| 电源 | 5V 电源输入， 3 路 DCDC 稳压输出 (1.2,1.5,3.3) |\n| 复位 | 板载复位芯片 |\n| 晶振 | 板载 24M 主晶振， 32.768KHz RTC 晶振 |\n| 接口 | NGFF M.2 B KEY x 2 共引出 67x2=134pin<br>板载 micro usb 接口和系统串口，可供下载固件及调试 |\n| 系统支持 | 支持最新 Linux 5.2 mainline kernel, Linux 3.4 bsp kernel<br>支持 debian 发行版 |\n\n## 使用教程\n\n[Lichee Zero](/soft/Lichee/zh/Zero-Doc/Start/intro_cn.md)\n\n## 产品技术支持\n\nLichee ZeroPlus 开发板可以在多种场景实现客户不同方面的需要，在 AIoT 上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务 <support@sipeed.com>。"}, "/hardware/zh/lichee/One/index.html": {"title": "", "content": "敬请期待"}, "/hardware/zh/lichee/index.html": {"title": "Lichee Pi", "content": "---\ntitle: Lichee Pi\n---\n> 编辑与2022年3月11日 \n\n- LicheePi 是 [Sipeed](https://www.sipeed.com/) 推出的开源产品，是为了能让用户获得优廉的linux设备，实战linux底层相关的内容的产品。\n  \n目前LicheePi相关核心板部分参数对比表格如下：\n\n| 类别 | Lichee RV |Lichee Zero Plus|Lichee Zero|Lichee nano|\n| :--- | :--- | :--- | :--- | :--- |\n| SOC | Allwinner D1 | Allwinner S3 | Allwinner V3s | Allwinner F1c100s |\n| CPU架构 |玄铁 C906 | Cortex™-A7  | Cortex™-A7 |  ARM 926EJS  |\n|运行频率|1GHz|1.2GHz|1.2GHz(max)|600MHz(max)|\n| RAM | 512MB DDR3 | 128Mbyte DDR3 |  64MB DRAM | 32MB DDR |\n|FLASH|可选SD-nand|可选SD Nand、<br>SPI Nor Flash<br>或者eMMC |预留<br>SOP8 SPI Flash<br>焊盘|板载 16MB NOR FLASH|\n| TF连接器 | 有|有|有|有|\n\n- 上述的款型都可以通过sd卡启动系统\n- 其他参数过多，版面放不下，需要的话麻烦自行对比一下。\n  \n## LicheePi核心版照片(Linux)\n### Lichee Zero \n<div align=\"center\">\n<a href=\"./Zero/Zero.html\" ><img src=\"./assets/Zero/Zero_1.png\" width=400></a>\n</div>\n\n### Lichee Nano \n\n<div align=\"center\">\n\n<a href=\"./Nano/Nano.html\" ><img src=\"./assets/Nano/Nano_2.png\" width=400></a>\n\n</div>\n\n### Lichee Zero Plus\n\n<div align=\"center\">\n\n<a href=\"./ZeroPlus/ZeroPlus.html\"><img src=\"./assets/Zero-Plus/Plus_1.jpg\" width=400></a>\n\n</div>\n\n### Lichee RV\n\n<div align=\"center\">\n\n<a href=\"./RV/RV.html\"><img src=\"./assets/RV/D1-4.png\" width=400></a>\n\n</div>"}, "/hardware/zh/lichee/Nano/Nano.html": {"title": "Lichee Nano", "content": "# Lichee Nano\n## 概述\n\nLichee Nano是基于全志科技的F1C100s(ARM 926EJS内核)高性能soC芯片设计的迷你开发板。开发板设计小巧精致，将芯片的所有资源都引出，板载USB、Flash、TF卡、4OP LCD接口等，并把所有IO资源引出，方便开发者拓展使用，非常适合初学者学习linux或者商用于产品开发。\n\n> 默认用户名称:root 用户密码:licheepi\n\n<img src=\"./../assets/Nano/Nano_2.png\" width=400>\n<img src=\"./../assets/Nano/Nano_3.png\" width=400>\n\n## 参数\n\n### F1C100s参数\nLichee Nano开发板板载的F1C100s芯片功能很强大，芯片内置32MBDDR，拥有SDIO、SPI、UART、Speaker、Mic等接口，支持外挂 8~32MB SPI Nor Flash;在视频处理方面表现出现，支持720P视频输出，支持H.264、MJPEG等高清格式的解码。\n\n![](./../assets/Nano/F1C100s.png)\n\n| 项目 | 参数 |\n| --- | ---- |\n| CPU | •ARM9 CPU architecture<br>•16KByte D-Cache<br>•32KByte I-Cache |\n| Memory | •SIP 32MB DDR1<br>•SD2.0,eMMC 4.41 |\n| Video | •H.264 1280x720@30fps decoding<br>•MPEG1/2/4 1280x720@30fps decoding<br>•MJPEG 1280x720@30fps encoding<br>•JPEG encode size up to 8192x8192|\n| Camera | •8-bit CMOS-sensor interface<br>•CCIR656 protocol for NTSC and PAL |\n| Audio | •Integrated analog audio codec with two DAC channels and one ADC channel,maximum 192kHz DAC sample rate and 48kHz ADC sample rate<br>•One I2S/PCM interface |\n| Display | •LCD RGB interface up to 1280x720@60fps<br>•TV CVBS output, support NTSC/PAL, with auto plug detecting |\n| Connectivity | •USB OTG, SDIO,IR, 3 x TWI, 2 x SPI, 3 x UART |\n\n### 开发板参数\n\n| 项目 | 参数 |\n| --- | --- |\n| CPU | 全志 F1C100s， ARM 926EJS , 主频 408MHz， 可超频至 600Mhz |\n| 内存及存储 |集成 32MB DDR<br>板载 16MB NOR FLASH， 可从 FLASH 启动<br>板载 TF 卡座，可从 TF 启动 |\n| 显示 | 通用 40P RGB LCD FPC 0.5mm 座子<br>可直接使用常见的 40P 4.3/5/7 寸屏幕（板载背光驱动）<br>支持常见的 272x480, 480x800, 1024x600 等分辨率<br>板载电阻式触摸屏芯片 |\n| 视频处理能力 | H.264 1280x720@30FPS 解码<br>MPEG1/2/4 1280x720@30FPS 解码<br>MJPEG 1280x720@30 FPS 解码<br>JPEG encode size up to 8192x8192 |\n| 通信接口 | SDIO，可搭配配套 SDIO WiFi+BT 模块<br>SPI x2<br>TWI x3<br>UART x3<br>OTG USB x1<br>TV out |\n| 其它接口 | PWM x2<br>LRADC x1<br>Speakerx2 + Mic x1 |\n\n![](./../assets/Nano/Nano_pin.png)\n\n### 软件参数\n\n| 开发环境 | 参数 |\n| --- | --- |\n| Linux | 支持3.10 BSP Linux<br>支持4.19 主线 Linux |\n| 裸机 | Xboot |\n| 裸机 | RT-Thread |\n\n## 使用教程\n\n[Lichee Nano](/soft/Lichee/zh/Nano-Doc-Backup/index.md)\n\n## 产品技术支持\n\nLichee Nano 开发板可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务 <support@sipeed.com>。"}, "/hardware/zh/lichee/Zero/Zero.html": {"title": "Lichee Zero", "content": "# Lichee Zero\n\n## Lichee Zero 概述\nLichee Zero是基于全志科技的V3s(ARM Cortex-A7内核)高性能CPL芯片设计的迷你开发板。开发板设计小巧精致，将芯片的所有资源都引出,板载USB、Flash、TF卡、4OP LCD接口等，并把所有IO资源引出，方便开发者拓展使用，适合初学者学习linux或者商用于产品开发。\n\n核心板：\n\n<html>\n<div class=\"imbox\">\n<img src=\"./../assets/Zero/Zero_1.png\" width=240>\n<img src=\"./../assets/Zero/Zero_6.png\" width=240>\n<style>\n.imbox{\n     display:flex;\n     flex-direction: row;\n     }\n</style>\n</div>\n</html>\n\n\n核心板+扩展板：\n\n<html>\n<div class=\"imbox\">\n<img src=\"./../assets/Zero/Zero_3.png\" width=240>\n<img src=\"./../assets/Zero/Zero_4.png\" width=240>\n<style>\n.imbox{\n     display:flex;\n     flex-direction: row;\n     }\n</style>\n</div>\n</html>\n\n## 参数\n\n### V3s参数\n\nV3s框架\n\n![](./../assets/Zero/V3s.png)\n\n| 项目 | 参数 |\n| --- | --- |\n| CPU | ARM Cortex™-A7 最高1.2GHz|\n| Memory |  Integrated 64MB DRAM  |\n| Audio Codec | • Integrated 92dB audio codec<br>• Supports two ADC channels and two DAC channels<br>• Supports one low-noise analog microphone bias outputs<br>• Supports one microphone input and one stereo microphone outpu |\n| Video | • Supports 1080p@40fps or 1080p@30fps+VGA@30fps H.264 video encoding,<br>• Supports H.264 1080p@30fps decoding, MJPEG 1080@30fps decoding |\n| Video Input/Output | • Supports 8/10/12-bit parallel CSI and 4-lane MIPI CSI2<br>• Supports up to 5M CMOS sensor<br>• Supports RGB/i80/LVDS LCD up to 1024x768 resolution |\n| Connectivity | •  3 x SD card controllers<br>•  LRADC/SPI/TWI/UART/PWM<br>•  USB, EMAC+PHY |\n| ISP | • Integrated ISP up to 5M pixels<br>• Supports two channel outputs for display and encoding respectively<br>• Supports various input and output formats<br>• Supports AE/AF/AWB<br>• Supports saturation adjustment/ noise reduction/ defect pixel correction/distortion correction |\n\n### Lichee Zero核心板参数\n\n| 项目 | 参数 | \n| ---- | ---- |\n| CPU | V3s |\n| 内存 | 64MB DDR2 |\n| 存储 | 预留 SOP8 SPI Flash焊盘 <br>板载TF卡座 |\n| 显示 | 通用40P RGB LCD FPC座<br>可直插常见的40P 4.3/5/7寸屏幕（板载背光驱动)，通过转接板可插50P 7/9寸屏<br>支持常见的272x480,480x800,1024x600等分辨率板载电阻式触摸屏芯片，支持电阻屏<br>板载RGB LED |\n| 通讯接口 | SDIO x2，可搭配配套SDIO WiFi+BT模块<br>SPl x1<br>12C x2<br>UART x3<br>100M Ether x1(含EPHY)<br>OTG USB x1<br>MIPI CSI x1 |\n| 其他接口 | <br>PWM x2<br>LRADC x1<br>Speakerx2+ Mic x1 |\n| 电气特性 | Micro USB 5V供电<br>2.54mm插针3.3V~5V供电<br>1.27mm邮票孔供电 |\n\n![](./../assets/Zero/Zero_8.png)\n![](./../assets/Zero/Zero_10.png)\n\n### Lichee Zero 拓展板\n\n| 项目 | 参数 |\n| ---- | ---- |\n| CPU | V3s |\n| 内存 | 64MB DDR2 |\n| 存储 | 预留 SOP8 SPI Flash焊盘 <br>板载TF卡座 |\n| 显示 | 通用40P RGB LCD FPC座<br>可直插常见的40P 4.3/5/7寸屏幕（板载背光驱动)，通过转接板可插50P 7/9寸屏<br>支持常见的272x480,480x800,1024x600等分辨率板载电阻式触摸屏芯片，支持电阻屏<br>板载RGB LED |\n| 通讯接口 | SDIO x2，可搭配配套SDIO WiFi+BT模块<br>SPI x1<br>I2C x2<br>UART x3<br>100M Ether x1(含EPHY)<br>OTG USB x1<br>MIPI CSI x1 |\n| 其他接口 | <br>PWM x2<br>LRADC x1<br>Speakerx2+ Mic x1 |\n| 板载外设 | 以太网接口<br>3.5mm耳机接口<br>驻极体麦克风<br>额外TF卡卡槽<br>4个按键<br>MIPI接口 |\n| 电气特性 | Micro USB 5V供电<br>2.54mm插针3.3V~5V供电<br>1.27mm邮票孔供电 |\n\n![](./../assets/Zero/Zero_9.png)\n\n## 使用教程\n\n[Lichee Zero](./../../../../soft/Lichee/zh/Zero-Doc/Start/board_intro.html)\n\n## 产品技术支持\n\nLichee Zero 开发板可以在多种场景实现客户不同方面的需要，在 AIoT 上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务 <support@sipeed.com>。"}, "/hardware/zh/modules_spmod/spmod_joystick.html": {"title": "SPMOD - JoyStick", "content": "# SPMOD - JoyStick\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_joystick/sp_joystick.png\"  width=\"\" height=\"300\" />\n\nSPMOD_JoyStick (JoyStick模块)。\n\n## SPMOD - JoyStick 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 通过SP-MOD SPI接口连接\n- 可通过外部适配器单独连接7.2V~9V DC，为手柄的振动马达供电\n- 内置升压电路，轻松驱动手柄\n- PSX/PS2兼容\n- 模块尺寸：35.0\\*20.0\\*13.3mm\n\n\n###  SPMOD_JoyStick 模块引脚定义：\n\n| 引脚序号  | 引脚名称 | 类型  | 引脚说明    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G | 模块电源地 |\n| 2 | CS | I | SPI片选引脚 |\n| 3 | SO | I/O | MISO数据引脚，手柄信号输出 |\n| 4 | NC | NC | 悬空引脚，无功能 |\n| 5 | 3V3 | V | 模块电源输入正 |\n| 6 | SCK | I | SPI串行时钟引脚 |\n| 7 | SI | I/O | MOSI数据引脚，手柄信号输入 |\n| 8 | ACK | O | 确认信号输出引脚 |\n\n<img src=\"\" width=\"500\" />\n\n\n## 使用例程\n\n- 待更新\n\n## 参考设计\n\n- SPMOD_JoyStick 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_joystick/sipeed_spmod_joystick.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | 链接 |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_bt.html": {"title": "SPMOD - BT", "content": "# SPMOD - BT\n\n\n## 概述\n\n![](./../../assets/spmod/spmod_bt/sipeed_spmod_BT.jpg)\n\nSPMOD-BT(蓝牙 模块)采用 YDJ-23。\n\n## SPMOD - BT 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 利用 SP-MOD UART 和蓝牙模块通讯\n- JDY-23蓝牙模块：支持BLE 5.0（兼容 BLE4.0、BLE4.2）。具有UART接口。模块支持AT指令控制。具备超低功耗特性和高可靠性\n- 板载两个状态指示LED，模块状态一目了然\n- 模块尺寸：25.6\\*20.2\\*3.2mm\n\n### JDY-23 蓝牙介绍：\n\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 工作频段：| 2.4G |\n| 发射功率：| 4db（最大） |\n| 通信接口：| UART |\n| 工作电压：| 1.8V~3.6V |\n| 工作温度：| -40℃ - 80℃ |\n| 天线：| 板载PCB天线 |\n| 接收灵敏度：| -97dbm |\n| 主从支持：| 从机 |\n| 蓝牙版本：| BLE 5.0（兼容 BLE4.0、BLE4.2） |\n| 唤醒状态电流：| 800uA（广播模式） |\n| 浅睡状态电流：| <50uA (广播模式) |\n| 深度睡眠电流：| 9uA （无广播） |\n| 默认串口波特率：| 9600 |\n\n### SPMOD_BT 模块引脚定义：\n\n| 引脚序号 | 引脚名称 | 类型 | 引脚说明 |\n| -------- | -------- | ---- | --- |\n| 1 | GND | G | 模块电源地 |\n| 2 | AWK | I/O | 模块休眠唤醒引脚，低有效 |\n| 3 | STA | I/O | 蓝牙连接状态连接，连接成功时输出高电平 |\n| 4 | RX | I | 模块UART数据接受引脚，连接上位机TX |\n| 5 | 3V3 | V | 模块电源输入正 |\n| 6 | --- | NC | 悬空引脚，无功能 |\n| 7 | RST | I/O | 模块复位引脚，低电平有效 |\n| 8 | TX  | O | 模块UART数据发送引脚，连接上位机的RX |\n\n<img src=\"../../assets/spmod/spmod_bt/back.jpg\" height=\"250\" />\n\n- 接线方式：\n\n| MCU:FUN(IO) | SP_BT |\n| :---------: | :---: |\n| UART:TX(IO_7) | RX |\n| USRT:RX(IO_6) | TX |\n| 1.8-3.3V | 3.3V |\n| GND | GND |\n\n<img src=\"../../assets/spmod/spmod_bt/connection.png\" height=\"250\">\n\n### 主要 AT 指令列表：\n\n| 指令 | 描述 |\n| --- | --- |\n|AT+POWR | 显示模块发送功率 |\n|AT+RST\t| 软复位 |\n|AT+MAC\t| 显示MAC 地址 |\n|AT+NAME | 显示广播名 |\n|AT+HOSTEN | 从模式或 IBEACON 工作模式 |\n|AT+IBUUID | IBEACON 的 UUID |\n|AT+DISC | 指令断开连接 |\n|AT+SLEEP | 睡眠 |\n|AT+MTU | 设置模块发送的发包数长 |\n\n*更多AT指令请参考[JDY-23-V2.1.pdf](https://cn.dl.sipeed.com/shareURL/MAIX/HDK/sp_mod/sp_bt)*\n\n## 使用例程\n\n* 流程\n  1. 发送 AT 指令\n  2. 接收数据\n  3. 判断是否设置成功\n\n### C 示例：\n\n\n```c\n\n  // set uart rx/tx func to io_6/7\n  fpioa_set_function(6, FUNC_UART1_RX + UART_NUM * 2);\n  fpioa_set_function(7, FUNC_UART1_TX + UART_NUM * 2);\n  uart_init(UART_DEVICE_1);\n  uart_configure(UART_DEVICE_1, 9600, 8, UART_STOP_1, UART_PARITY_NONE);\n\n  //change the name of sp_bt module to MAIXCUBE\n  uart_send_data(UART_NUM, \"AT+NAMEMAIXCUBE\\r\\n\", strlen(\"AT+NAMEMAIXCUBE\\r\\n\")); //send AT order\n  msleep(100);\n  ret = uart_receive_data(UART_NUM, rcv_buf, sizeof(rcv_buf)); //receive response\n  if(ret != 0 && strstr(rcv_buf, \"OK\"))\n  {\n     printk(LOG_COLOR_W \"set name success!\\r\\n\");\n  }\n\n  // get the name of sp_bt module\n  uart_send_data(UART_NUM, \"AT+NAME\\r\\n\", strlen(\"AT+NAME\\r\\n\")); //send AT order\n  msleep(100);\n  ret = uart_receive_data(UART_NUM, rcv_buf, sizeof(rcv_buf)); //receive response\n  if(ret != 0 && strstr(rcv_buf, \"NAME\"))\n  {\n     printk(LOG_COLOR_W \"get name success!\\r\\n\");\n  }\n\n```\n\n### MaixPy 例程：\n\n```python\n    # set uart rx/tx func to io_6/7\n  fm.register(6,fm.fpioa.UART1_RX)\n  fm.register(7,fm.fpioa.UART1_TX)\n  uart = UART(UART.UART1,9600,8,1,0,timeout=1000, read_buf_len=4096)\n\n  #change the name of sp_bt module to MAIXCUBE\n  uart.write(\"AT+NAMEMAIXCUBE\\r\\n\") #send AT order\n  time.sleep_ms(100)\n  read_data = uart.read() #receive response\n  if read_data:\n      read_str = read_data.decode('utf-8')\n      count = read_str.count(\"OK\")\n      if count != 0:\n          uart.write(\"set name success\\r\\n\")\n\n  # get the name of sp_bt module\n  uart.write(\"AT+NAME\\r\\n\") #send AT order\n  time.sleep_ms(100)\n  read_data = uart.read() #receive response\n  if read_data:\n      read_str = read_data.decode('utf-8')\n      count = read_str.count(\"NAME\")\n      if count != 0:\n          uart.write(\"get name success\\r\\n\")\n```\n\n*注意发送AT指令后一定要加上\\r\\n*\n\n### 运行结果:\n\n  使用[BLE Utility](../../tools/bledebugger.apk)连接设备后进行收发测试结果如下:\n\n  <center class=\"third\">\n      <img src=\"../../assets/spmod/spmod_bt/res.png\" height=\"250\"/><img src=\"../../assets/spmod/spmod_bt/res1.png\" height=\"250\"/>\n  </center>\n\n### 运行环境:\n\n  |  语言  |  开发板  | SDK/固件版本                   |\n  | :----: | :------: | :----------------------------- |\n  |   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n  | MaixPy | MaixCube | maixpy v0.5.1                  |\n\n## 参考设计\n\n- SPMOD_BLE 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_bt/sipeed_spmod_bt.png\" height=\"250\" />\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/shareURL/MAIX/SDK](https://dl.sipeed.com/shareURL/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/shareURL/MAIX/HDK](https://dl.sipeed.com/shareURL/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_tof.html": {"title": "SPMOD - TOF", "content": "# SPMOD - TOF\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_tof/sp_tof.png\" style=\"padding-right:100px;\" width=\"\" height=\"300\" />\n\nSPMOD_TOF(TOF 模块) 采用 VL53L0X 模块。\n\n## SPMOD - TOF 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 利用SP-MOD I2C 和 TOF 模块通讯\n- ToF模块：VL53L0X模块是一个I2C接口，长距离单点飞行时间测定（ToF）模块，它具有高性能和可靠性\n- 最远测量距离4000mm，最高50Hz的测量刷新率。典型前方测量角度27°\n- 可选配红色激光器瞄准头，通过XSHUT引脚控制激光器开关\n- 模块尺寸：25.0\\*10\\*3.15mm\n\n### VL53L0X 介绍\n\n| VL53L0X | 功能特性：|\n| --- | --- |\n| 测量距离 | 最大 4000mm(4m) |\n| 工作刷新率 | 50Hz |\n| 测量角度（正面）| 27°|\n| 通信接口 | I2C |\n| 工作电压 | 2.6V~3.5V (选用红色激光时： 2.8V~3.3V) |\n| 工作状态电流 | 18mA (选用红色激光时： 20mA) |\n| 工作温度 | -40℃ - 80℃ |\n| 睡眠状态电流 | 5uA |\n\n\n\n###  SPMOD_TOF 模块引脚定义：\n\n\n| 引脚序号 | 引脚名称 | 类型 | 引脚说明 |\n| --- | --- | --- | --- |\n| 1 | GND | G  | 模块电源地 |\n| 2 | IRQ | I  | 模块中断输入引脚，连接至 VL53L0X 的GPIO1 |\n| 3 | NC  | NC | 悬空引脚，无功能 |\n| 4 | SDA | I/O | 模块 I2C 串行数据引脚 |\n| 5 | 3V3 | V  | 模块电源输入正 |\n| 6 | NC  | NC | 悬空引脚，无功能 |\n| 7 | SHT | I  | 模块休眠&激光头控制引脚 #注释 |\n| 8 | SCL | I  | 模块 I2C 串行时钟引脚 |\n\n> SHT 低电平时，模块休眠 &激光头关闭\n\n<img src=\"../../assets/spmod/spmod_tof/back.png\" height=\"300\" />\n\n- 接线方式:\n\n|  MCU:FUN(IO)  | SP_RFID |\n| :-----------: | :-----: |\n| I2C:SDA(IO_7) |   SDA   |\n|   NC(IO_15)   |   NC    |\n|   NC(IO_20)   |   IRQ   |\n|   NC(IO_21)   |   NC    |\n| GPIOHS(IO_8)  |   SHT   |\n| I2C:SCL(IO_6) |   SCL   |\n|   2.8~3.5V    |  3.3V   |\n|      GND      |   GND   |\n\n<img src=\"../../assets/spmod/spmod_tof/connection.png\" height=\"250\">\n\n\n## 使用例程\n\n* 流程\n  1. 初始化\n  2. 校准(可选)\n  3. 读取距离(多种模式可选)\n\n### C 示例：\n\n```c\n\n  //set io mux\n    fpioa_set_function(VL53L0X_SCL, FUNC_I2C0_SCLK + VL53L0X_I2C_DEVICE * 2);\n    fpioa_set_function(VL53L0X_SDA, FUNC_I2C0_SDA + VL53L0X_I2C_DEVICE * 2);\n    fpioa_set_function(VL53L0X_SHT, FUNC_GPIOHS0 + VL53L0X_SHT);\n\n    gpiohs_set_drive_mode(VL53L0X_SHT, GPIO_DM_OUTPUT);\n\n    //i2c init\n    maix_i2c_init(VL53L0X_I2C_DEVICE, 7, VL53L0X_I2C_FREQ_KHZ * 1000);\n\n    while (vl53l0x_init(&vl53l0x_dev)) {\n          printf(\"VL53L0X init error!!!\\r\\n\");\n          msleep(500);\n    }\n\n    printf(\"VL53L0X init success!\\r\\n\");\n\n    // adjusting\n    printf(\"VL53L0X adjusting\\r\\n\");\n    vl53l0x_calibration_test(&vl53l0x_dev);\n\n    // get distance\n    printf(\"VL53L0X start work\\r\\n\");\n    vl53l0x_general_test(&vl53l0x_dev);\n\n```\n\n### MaixPy 例程：\n\n```python\n\n    fm.register(VL53L0X_SHT, fm.fpioa.GPIOHS0, force=True)\n    XSHUT = GPIO(GPIO.GPIOHS0, GPIO.OUT)\n\n    i2c = I2C(VL53L0X_I2C_NUM, freq=VL53L0X_FREQ, scl=VL53L0X_SCL, sda=VL53L0X_SDA)\n\n    # create obj and read distance\n\t  tof = VL53L0X(i2c)\n\t  while True:\n      mm = tof.read()\n      utime.sleep_ms(100)\n      print(mm)\n\n```\n### 运行环境\n\n|  语言  | 开发板   | SDK/固件版本 |\n| :----: | :------- | :--- |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube | maixpy v0.5.1 |\n\n### 运行结果\n\n* C\n\n  <img src=\"../../assets/spmod/spmod_tof/log_c.png\" height=\"200\" />\n\n* MaixPy\n\n  - [None]\n## 移植\n\n修改以下参数即可适配其他 K210 开发板.\n\n* C\n\n```c\n  // board_config.h\n  #define VL53L0X_I2C_DEVICE 0 // i2c device number\n  #define VL53L0X_I2C_FREQ_KHZ 100 // i2c frequence\n  #define VL53L0X_SCL 6 // scl\n  #define VL53L0X_SDA 7 // sda\n  #define VL53L0X_SHT 8 // sht\n```\n\n* MaixPy\n\n```python\n  ################### config ###################\n  VL53L0X_I2C_NUM = const(I2C.I2C0)\n  VL53L0X_FREQ = const(100000)\n  VL53L0X_SCL = const(6)\n  VL53L0X_SDA = const(7)\n  VL53L0X_SHT = const(8)\n  ##############################################\n```\n\n\n## 参考设计\n\n- SPMOD_TOF 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_tof/sipeed_spmod_tof.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_servo.html": {"title": "SPMOD - SERVO", "content": "# SPMOD - SERVO\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_servo/sp_servo.png\"  width=\"\" height=\"300\" />\n\nSPMOD_SERVO (SERVO模块)。\n\n## SPMOD - SERVO 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 利用SP-MOD控制多达6个独立的PWM 9g舵机\n- 舵机接口采用3P 2.54间距排针\n- 独立的外部5V供电，通过USB Type-C或者KF螺钉接线柱，不会从SP-MOD取电\n- 板载电源指示灯，通电状态一目了然\n- 模块尺寸：35.0\\*20\\*1.6mm\n\n| 功能特点： | 参数 |\n| --- | -- |\n| PWM 9g舵机接口*6 | 外接4.8-6V电源的情况下，可连接6个PWM 9g舵机并分别控制 |\n| 外部供电电压 | 4.8V-6.0V |\n| 外部供电电流 | 视模块工作情况而定，通常小于1500mA |\n| 工作温度 | -40℃ ~ 85℃ |\n\n\n###  SPMOD_SERVO 模块引脚定义：\n\n\n<img src=\"../../assets/spmod/spmod_servo/sp_servo_pin.png\" width=\"500\" />\n\n\n## 使用例程\n\n- 待更新\n\n## 参考设计\n\n- SPMOD_SERVO 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_servo/sipeed_spmod_servo.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_grove.html": {"title": "SPMOD - Grove", "content": "# SPMOD - Grove\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_grove/sp_grove.png\"  width=\"\" height=\"400\" />\n\n\nSPMOD_Grove(GROVE 模块)\n\n## SPMOD - Grove 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 作为拓展版，提供三个标准的Grove接口。方便您将Grove模块与SP-MOD一起使用。\n- 每条数据线均提供外部上拉。\n- 提供高达1000mA的供电能力。\n- 模块尺寸：35.0\\*10.0\\*2.1mm\n\n## 概括\n\n| 功能特点： | 参数 |\n| --- | -- |\n| Grove 连接器 (HY 2.0mm 4P连接器)*3 | 用于连接Grove线缆 |\n| 排针4*2，间距2.54mm *1 | 用于和SP-MOD接口连接 |\n| 外部供电电压 | 视连接的模块而定 |\n| 外部供电电流 | 视模块工作情况而定，通常小于1000mA |\n| 工作温度 | -30℃ ~ 85℃\n\n## 参考设计\n\n- SPMOD_Grove 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_grove/sipeed_spmod_grove.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_psram.html": {"title": "SPMOD - PSRAM", "content": "# SPMOD - PSRAM\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_psram/sp_psram.png\" width=\"\" height=\"300\" />\n\nSPMOD_PSRAM(PSRAM模块)采用 IPS6404L-SQ 芯片。\n\n## SPMOD - PSRAM 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 通过SP-MOD SPI/QPI接口连接\n- Pseudo−SRAM芯片：IPS6404L-SQ是一个容量为64Mbit，SPI/QPI接口，具有出色的可靠性的和响应时间的伪随机动态存储器芯片。\n- 工作频率：104MHz\n- SPI读取响应时间：30.3ns\n- 模块尺寸：15.0\\*10.0\\*13.3mm\n\n###  IPS6404L-SQ 迫真静态随机存储器介绍\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 工作电压 | 2.7V~3.6V |\n| 工作电流 | 10mA |\n| 工作温度 | -30℃~85℃ |\n| 休眠电流 | <250μA |\n| 工作频率 | 104Mhz |\n| SPI读取响应时间 | 30.3ns |\n| 其他操作响应时间 | 9.3ns |\n| 对外接口 | PI/QPI可选，默认SPI |\n\n\n###  SPMOD_PSRAM 模块引脚定义：\n\n| 引脚序号  | 引脚名称 | 类型  | 引脚说明    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND  | G | 模块电源地 |\n| 2 | CS | I  | SPI片选引脚 |\n| 3 | D1 | I/0 | MISO数据引脚，模块数据输出 |\n| 4 | D3 | I/O | 无功能 (QSPI模式下为IO3) |\n| 5 | 3V3 | V | 模块电源输入正 |\n| 6 | SCK | I | SPI串行时钟引脚 |\n| 7 | D0 | I/0 | MOSI数据引脚，模块数据输入 (QSPI模式下为IO0) |\n| 8 | D2 | I/O | 无功能 (QSPI模式下为IO2) |\n\n\n<img src=\"\" width=\"300\" />\n\n\n## 使用例程\n\n- 待更新\n\n## 参考设计\n\n- SPMOD_PSRAM 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_psram/sipeed_spmod_psram.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_extender.html": {"title": "SPMOD - Extender", "content": "# SPMOD - Extender\n\n\n## 概述\n\n![](../../assets/spmod/spmod_extender/sp_extender.png)\n\n\nSPMOD_Extender(8PIN扩展模块)\n\n## SPMOD - Extender 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 利用SP-Extender将SP-MOD一分为四，包含三个相连的2线接口（连接至SP-MOD的D0和D1）和一个单独的四线接口（连接至SP-MOD的D2-D5）\n- 模块尺寸：35.0\\*20.0\\*1.6mm\n\n## 概括\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 两线SP-MOD接口*3 | 连接至SP-MOD的D0和D1，可用作UART (最多连接一个设备)或I2C（最多连接三个设备）或者两个独立的GPIO |\n| 四线SP-MOD接口 | 连接至SP-MOD的D2-D5，通常用作SPI接口，也可用作四个杜立的GPIO接口 |\n| 外部供电电压 | 视连接的模块而定 |\n| 外部供电电流 | 视模块工作情况而定，通常小于1000mA |\n| 工作温度 | -40℃ ~ 85℃\n\n\n\n## 参考设计\n\n- SPMOD_Extender 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_extender/sipeed_spmod_extender.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_micarray.html": {"title": "SPMOD - MicArray", "content": "# SPMOD - MicArray\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_micarray/sp_micarray.png\"  width=\"\" height=\"300\" />\n\nSPMOD_MicArray(麦克风阵列模块)采用 RY3708(DC-DC)升压模块\n\n## SPMOD - MicArray 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 将SP-MOD转至FPC，利用FPC与麦克风阵列板相连。\n- 板载3.3V至5V升压DC-DC (RY3708)，轻松驱动麦克风阵列。\n- 利用Grove接口控制麦克风阵列板上的LED。\n- 需要配合SIPEED MICARRAY一起使用。\n- 模块尺寸：35.0\\*10.0\\*11.2mm\n\n\n###  BOOST DC-DC RY3708 模块 介绍\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 输出电压 | 5.1V ±0.2V |\n| 外部供电电压 |\t3.3V ±0.2V |\n| 外部供电电流 | 视麦克风阵列板的工作情况而定，通常小于500mA |\n| 工作温度范围 | -40℃ ~ 85℃ |\n> 1.2MHz固定开关频率,内部4A开关电流限制,高温自动切断,集成80mΩ内部功率MOSFET\n\n\n\n###  SPMOD_MicArray 模块引脚定义：\n\n| 引脚序号  | 引脚名称 | 类型  | 引脚说明    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G |模块电源地 |\n| 2 | D2 | I | Mic_D0 |\n| 3 | D3 | I | Mic_D2 |\n| 4 | D0 | I | Mic_WS |\n| 5 | 3V3 | V |模块电源输入正 |\n| 6 | D4 | I | Mic_D1 |\n| 7 | D5 | I | Mic_D3 |\n| 8 | D1 | I | Mic_BCK |\n| 9 | CK | I | LED控制串行时钟引脚 (相当于I2C SCL) |\n| 10 | DA | I |  LED控制串行数据引脚 (相当于I2C SDA) |\n\n<img src=\"\" width=\"300\" />\n\n## 使用例程\n\n```python\nfrom Maix import MIC_ARRAY as mic\nimport lcd\n\nlcd.init()\nmic.init()\n#mic.init(i2s_d0=23, i2s_d1=22, i2s_d2=21, i2s_d3=20, i2s_ws=19, i2s_sclk=18, sk9822_dat=24, sk9822_clk=25)\n\nwhile True:\n    imga = mic.get_map()\n    b = mic.get_dir(imga)\n    a = mic.set_led(b,(0,0,255))\n    imgb = imga.resize(160,160)\n    imgc = imgb.to_rainbow(1)\n    a = lcd.display(imgc)\nmic.deinit()\n```\n\n> 需要根据自己接板子上的管脚号来进行修改mic.init()中参数\n\n## 参考设计\n\n- SPMOD_MicArray 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_micarray/sipeed_spmod_micarray.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_template.html": {"title": "SPMOD - XXX", "content": "# SPMOD - XXX\n\n\n## 概述\n\n<img src=\"../../assets/spmod/sipeed_spmod_xxx.jpg\" alt=\"XXX\" style=\"zoom:60%;\" />\n\nSPMOD_XX(XX 模块)采用XXX。\n\n## SPMOD - XXX 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- XXX\n- 模块尺寸：X.XX\\*XX.X\\*XX.Xmm\n\n### XXXX 介绍\n\nXXXXX\n\n- XXXX\n\n| XXXX  功能特点：|\n| --- |\n| --- |\n| --- |\n| --- |\n\n\n\n\n###  SPMOD_XXX 模块引脚定义：\n\n\n| 引脚序号  | 引脚名称 | 类型  | 引脚说明    |\n| -------- | -------- | ---- | ---------- |\n| 1        | GND      | G    | XX         |\n| 2        | XXX      | I    | XX         |\n| 3        | MISO     | O    | XX         |\n| 4        | XXX      | I    | XX         |\n| 5        | XXX      | O    | XX         |\n| 6        | SCK      | I    | XX         |\n| 7        | MOSI     | I    | XX         |\n| 8        | VCC      | G    | XX         |\n\n\n## 使用例程\n\n- MaixPy 例程：\n\n> NOTE: 待更新\n\n- STM32 例程：\n\n## 参考设计\n\n\n- SPMOD_XXX 原理图：\n\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_weather.html": {"title": "SPMOD - Weather", "content": "# SPMOD - Weather\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_weather/demo.gif\"  width=\"500\" />\n\nSPMOD - Weather (气象站模块), 集成三轴传感器 QMC7983,与温湿度气压传感器 BME280。\n\n\n## SPMOD - Weather 介绍\n\n特性：\n\n- 采用 **Sipeed-SPMOD** 接口(2*4PIN 2.54mm 排针)，统一 MaixPy 开发板接口\n- 通过SP-MOD I2C接口连接\n- 磁性传感器：QMC7983是一个内置灵敏度补偿与NTC的三轴磁性传感器，I2C接口输出（最高频率400KHz），具有出色的动态范围和精度以及超低的功耗\n- 磁感应量程：±30 高斯\n- 温湿度气压传感器：BME280是同时集成了温湿度与气压传感器的数字传感器\n- 模块尺寸：25.0\\*10\\*2.9mm\n\n\n## 传感器特性：\n\n| 磁性传感器 | QMC7983 |\n| --- | --- |\n| 工作电压 | 2.6V~3.6V |\n| 工作电流 | 70uA |\n| 休眠电流 | <1uA |\n| 磁感应量程 | ±30 高斯 |\n| 精度 | 每 LSB 1mG|\n| RMS 噪声 | 2 mG |\n| 对外接口 |I2C，默认地址 0x2C,可通过选择电阻调节 |\n\n-----\n\n| 温湿度气压传感器 | BME280 |\n| --- | --- |\n| 工作电压 | 1.71V~3.6V |\n| 工作电流 | <633uA |\n| 休眠电流 | <5uA |\n| 湿度传感器的关键参数： | --- |\n| 响应时间（𝜏63％）| 1s |\n| 精度公差 | ±3％ 相对湿度 |\n| 磁滞 | < 2％ 相对湿度 |\n| 气压力传感器的关键参数： | --- |\n| RMS 噪声 | 0.2 Pa（等效 到海拔 1.7 厘米） |\n| 偏移温度系数 | ±1.5 Pa/K（等效温度变化 1°C 时，达到海拔 ±12.6 cm1s） |\n| 对外接口 | I2C，默认地址 0x76, 可通过选择电阻调节 |\n\n###  SPMOD_Weather 模块引脚定义：\n\n| 引脚序号 | 引脚名称 | 类型 | 引脚说明      |\n| -------- | -------- | ---- | ------------- |\n| 1  | GND | G  | 模块电源地 |\n| 2  | NC | NC  | 悬空引脚，无功能 |\n| 3  | NC | NC  | 悬空引脚，无功能 |\n| 4  | SDA | I/O  | 模块I2C串行数据引脚 |\n| 5  | 3V3 | V  | 模块电源输入正 |\n| 6  | NC | NC  | 悬空引脚，无功能 |\n| 7  | NC | NC  | 悬空引脚，无功能 |\n| 8  | SCL | I  | 模块I2C串行时钟引脚 |\n\n<img src=\"../../assets/spmod/spmod_weather/back.png\" width=\"300\" />\n\n## 接线方式\n\n<img src=\"../../assets/spmod/spmod_weather/connection.png\" height=\"250\">\n\n|  MCU:FUN(IO)  | SP_RFID |\n| :-----------: | :-----: |\n| I2C:SDA(IO_7) |   SDA   |\n|   NC(IO_15)   |   NC    |\n|   NC(IO_20)   |   IRQ   |\n|   NC(IO_21)   |   NC    |\n| GPIOHS(IO_8)  |   SHT   |\n| I2C:SCL(IO_6) |   SCL   |\n|   2.8~3.5V    |  3.3V   |\n|      GND      |   GND   |\n\n## 使用例程\n\n* 流程\n  1. 初始化  weather=SPWeather(i2c=i2c_bus) # create sp_weather\n    while 1:\n        time.sleep_ms(500)\n        print(weather.qmc_read_xyz) # QMC7983 read data\n        print(weather.bme_values) # BME280 read data\n  2. 校准(可选)\n  3. 读取距离(多种模式可选)\n\n### C 示例：\n\n```c\n\n    fpioa_set_function(Weather_SCL, FUNC_I2C0_SCLK + Weather_I2C_DEVICE * 2); // Weather_SCL: 6;\n    fpioa_set_function(Weather_SDA, FUNC_I2C0_SDA + Weather_I2C_DEVICE * 2); // Weather_SDA: 7;\n\n    maix_i2c_init(Weather_I2C_DEVICE, 7, 400000); // Weather_I2C_DEVICE: 0;\n\n    rslt = qmc_init(); // Magnetic sensor QMC7983 init\n    rslt = bme280_init(&dev); // Temperature, humidity and pressure sensors BME280 init\n    stream_sensor_data_normal_mode(&dev); // read and print sensor data\n\n```\n\n### MaixPy 例程：\n\n```python\n\n    i2c_bus = I2C(I2C.I2C0, freq=100*1000, scl=6, sda=7) # scl: io_6, sda: io_7\n\n    weather=SPWeather(i2c=i2c_bus) # create sp_weather\n    while 1:\n        time.sleep_ms(500)\n        print(weather.qmc_read_xyz) # QMC7983 read data\n        print(weather.bme_values) # BME280 read data\n\n```\n\n## 运行环境\n\n|  语言  |  开发板  | SDK/固件版本 |\n| :----: | :------: | :--- |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube | maixpy v0.5.1 |\n\n## 运行结果\n\n* C\n\n    <img src=\"../../assets/spmod/spmod_weather/log_c.png\" height=\"200\">\n\n* MaixPy\n\n    <img src=\"../../assets/spmod/spmod_weather/log_py.png\" height=\"200\">\n\n## 参考设计\n\n- SPMOD_Weather 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_weather/sipeed_spmod_weather.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_lcd1.14.html": {"title": "SPMOD - LCD 1.14", "content": "# SPMOD - LCD 1.14\n\n\n## 概述\n\n![](../../assets/spmod/spmod_lcd1.14//sp_lcd.png)\n\nSPMOD_LCD1.14(1.14寸 LCD 屏幕模块)采用 ST7735S TFT LCD屏。\n\n## SPMOD - LCD1.14 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 采用常见 LCD 驱动 IC ST7735S(4 线 SPI 通讯)\n- 分辨率：240\\*135\n- 模块尺寸：35.0\\*20.0mm\n\n### ST7735S TFT LCD屏 介绍\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 工作电压 | 2.5V~4.8V |\n| 工作电流 | <20mA |\n| 工作温度 | -30℃ ~ 85℃ |\n| 休眠电流 | <0.1mA |\n| 屏幕大小 | 1.14英寸 |\n| 有效显示区域 | 1.7mm * 10.8mm |\n| 分辨率 | 160*80 |\n| 色彩 | 132个RGB通道 |\n| 对外接口 | 8P FPC (0.5mm间距) |\n> 内部集成电路包含DC / DC转换器、可调VCOM生成器、非易失性（NV）存储器（用于存储初始寄存器设置）、显示时钟的振荡器以及时序控制器\n\n\n###  SPMOD_LCD1.14 模块引脚定义：\n\n| 引脚序号  | 引脚名称 | 类型  | 引脚说明    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G  | 模块电源地 |\n| 2 | CS | I  | SPI片选引脚 |\n| 3 | D/C | I  | 数据/命令输入切换引脚  |\n| 4 | RST | I  | 模块复位引脚，低有效 |\n| 5 | 3V3 | V  | 模块电源输入正 |\n| 6 | SCK | I  | SPI串行时钟引脚 |\n| 7 | SI | I/O  | MOSI数据引脚，主机输出从机输入 |\n| 8 | BL | I  | 背光控制引脚，低电平关闭背光 |\n\n<img src=\"../../assets/spmod/spmod_lcd1.14/back.png\" width=\"300\" />\n\n- 接线方式:\n\n|   MCU:FUN(IO)   | SP_LCD |\n| :-------------: | :----: |\n|  GPIOHS7(IO_7)  |  RST   |\n| GPIOHS15(IO_15) |  D/C   |\n| SPI:SS0(IO_20)  |   CS   |\n| SPI:SCK(IO_21)  |  SCK   |\n| SPI:MOSI(IO_8)  |   SI   |\n|  GPIOHS6(IO_6)  |   BL   |\n|  2.5~4.8V   |  3.3V  |\n|  GND   |  GND   |\n\n<img src=\"../../assets/spmod/spmod_lcd1.14//connection.png\" height=\"250\">\n\n## 使用例程\n\n* 流程\n\n  1. 初始化配置\n  2. 创建 Image 并填充\n  3. 发送图像并刷新\n\n### C 示例：\n\n```c\n\n  fpioa_set_function(SPI_IPS_LCD_CS_PIN_NUM, FUNC_SPI1_SS0);   // SPI_IPS_LCD_CS_PIN_NUM: 20;\n  fpioa_set_function(SPI_IPS_LCD_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SPI_IPS_LCD_SCK_PIN_NUM: 21;\n  fpioa_set_function(SPI_IPS_LCD_MOSI_PIN_NUM, FUNC_SPI1_D0);  // SPI_IPS_LCD_MOSI_PIN_NUM: 8;\n  fpioa_set_function(SPI_IPS_LCD_DC_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_DC_GPIO_NUM);   // SPI_IPS_LCD_DC_PIN_NUM: 15; SPI_IPS_LCD_DC_GPIO_NUM: 15;\n  fpioa_set_function(SPI_IPS_LCD_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_RST_GPIO_NUM); // SPI_IPS_LCD_RST_PIN_NUM: 7; SPI_IPS_LCD_RST_GPIO_NUM: 7;\n  fpioa_set_function(SPI_IPS_LCD_BL_PIN_NUM, FUNC_GPIOHS0 + SPI_IPS_LCD_BL_GPIO_NUM);   // SPI_IPS_LCD_BL_PIN_NUM: 6; SPI_IPS_LCD_BL_GPIO_NUM: 6;\n\n  // set gpiohs work mode to output mode\n  gpiohs_set_drive_mode(SPI_IPS_LCD_DC_GPIO_NUM, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(SPI_IPS_LCD_RST_GPIO_NUM, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(SPI_IPS_LCD_BL_GPIO_NUM, GPIO_DM_OUTPUT);\n\n  spi_init(1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0);\n\n  ips_lcd_init(); // init\n  LCD_ShowPicture(0, 0, LCD_W, LCD_H, gImage_nanke); // display\n```\n\n### MaixPy 例程：\n\n```python\n\n  # 20: SPI_LCD_CS_PIN_NUM;\n  fm.register(SPI_LCD_CS_PIN_NUM, fm.fpioa.GPIOHS20, force=True)\n  # 15: SPI_LCD_DC_PIN_NUM;\n  fm.register(SPI_LCD_DC_PIN_NUM, fm.fpioa.GPIOHS15, force=True)\n  # 6: SPI_LCD_BUSY_PIN_NUM;\n  fm.register(SPI_LCD_BUSY_PIN_NUM, fm.fpioa.GPIOHS6, force=True)\n  # 7: SPI_LCD_RST_PIN_NUM;\n  fm.register(SPI_LCD_RST_PIN_NUM, fm.fpioa.GPIOHS7, force=True)\n\n  # set gpiohs work mode to output mode\n  cs = GPIO(GPIO.GPIOHS20, GPIO.OUT)\n  dc = GPIO(GPIO.GPIOHS15, GPIO.OUT)\n  busy = GPIO(GPIO.GPIOHS6, GPIO.OUT)\n  rst = GPIO(GPIO.GPIOHS7, GPIO.OUT)\n\n  # 21: SPI_LCD_SCK_PIN_NUM; 8: SPI_LCD_MOSI_PIN_NUM;\n  spi1 = SPI(SPI_LCD_NUM, mode=SPI.MODE_MASTER, baudrate=SPI_LCD_FREQ_KHZ * 1000,\n              polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=SPI_LCD_SCK_PIN_NUM, mosi=SPI_LCD_MOSI_PIN_NUM)\n\n  ips = SPLCD114(spi1, cs, dc, rst, busy, IPS_WIDTH, IPS_HEIGHT, IPS_MODE)\n\n  # create an 'image' and fill it\n  img = image.Image()\n  img.draw_rectangle(80, 80, 30, 30)\n\n  # display\n  ips.display(img)\n\n\n```\n\n### 运行环境\n\n|  语言  |  开发板  |          SDK/固件版本          |\n| :----: | :------: | :----------------------------: |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube |         maixpy v0.5.1          |\n\n*MaixPy固件建议自行从最新源码编译*\n\n### 运行结果\n\n\n* C\n\n  <img src=\"../../assets/spmod/spmod_lcd1.14//sp_lcd1.14_c.png\" height=\"250\" />\n\n* MaixPy\n\n  <img src=\"../../assets/spmod/spmod_lcd1.14//sp_lcd1.14_py.png\" alt=\"sp_lcd1.14_py\" height=\"250\" />\n\n### 移植\n\n修改以下参数即可适配其他 K210 开发板.\n\n* C\n\n```c\n  // board_config.h\n  #define SPI_INDEX           1\n  #define SPI_SCLK_RATE       600*1000\n  #define SPI_CHIP_SELECT_NSS 0 // SPI_CHIP_SELECT_0\n\n  #define SPI_IPS_LCD_CS_PIN_NUM      20\n  #define SPI_IPS_LCD_SCK_PIN_NUM     21\n  #define SPI_IPS_LCD_MOSI_PIN_NUM    8\n\n  #define SPI_IPS_LCD_DC_PIN_NUM     15\n  #define SPI_IPS_LCD_BL_PIN_NUM      6\n  #define SPI_IPS_LCD_RST_PIN_NUM     7\n\n  #define SPI_IPS_LCD_DC_GPIO_NUM     15\n  #define SPI_IPS_LCD_BL_GPIO_NUM     6\n  #define SPI_IPS_LCD_RST_GPIO_NUM    7\n\n  #define USE_HORIZONTAL 3    // 0/1 is horizontal, and 2/3 is vertical.\n```\n\n* Maixpy\n\n```python\n  ################### config ###################\n  SPI_LCD_NUM = SPI.SPI1\n  SPI_LCD_DC_PIN_NUM = const(15)\n  SPI_LCD_BUSY_PIN_NUM = const(6)\n  SPI_LCD_RST_PIN_NUM = const(7)\n  SPI_LCD_CS_PIN_NUM = const(20)\n  SPI_LCD_SCK_PIN_NUM = const(21)\n  SPI_LCD_MOSI_PIN_NUM = const(8)\n  SPI_LCD_FREQ_KHZ = const(600)\n  ##############################################\n```\n\n\n## 参考设计\n\n- SPMOD_LCD1.14 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_lcd1.14/sipeed_spmod_lcd1.14.png\" height=\"250\" />\n\n\n-----\n\n\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maixhub.com](https://maixhub.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 | 878189804 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_ethernet.html": {"title": "SPMOD - Ethernet", "content": "# SPMOD - Ethernet\n\n\n## 概述\n\n![](../../assets/spmod/spmod_ethernet/sp_ethernet.png)\n\nSPMOD_Ethernet(网络扩展模块)采用 W5500 以太网主控芯片。\n\n## SPMOD - Ethernet 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 通过SP-MOD SPI接口连接\n- 主控芯片：W5500 是一款集成全硬件 TCP/IP 协议栈的嵌入式以太网控制器。\n- SPI 速率理论上可达80MHz\n-\t集成以太网数据链路层（MAC）和10BaseT/100BaseTX 以太网物理层（PHY），支持自动协商（10/100-Based全双工/半双工）\n- 模块尺寸：35.76\\*19.74\\*8.7mm\n\n###  W5500 以太网主控芯片介绍\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 工作电压 | 2.97V~3.63V |\n| 工作电流 | <132mA |\n| 工作温度 | -40℃~85℃ |\n| 休眠电流 | <15mA |\n| SPI 时钟 | 最高80MHz |\n| 全硬件TCP/IP协议栈 | 支持TCP、UDP、ICMP、IPv4、ARP、IGMP、PPPoE协议 |\n\n> 支持8路独立硬件 Socket 同时通信\n,通信效率互不影响\n,内部32K字节收发缓存供TCP/IP包处理\n,支持掉电模式、网络唤醒\n,集成 10BaseT / 100Base-T 以太网 PHY\n,支持自动协商（全/半双工，10M/100M)\n,不支持自动极性变换MDIX\n\n\n###  SPMOD_Ethernet 模块引脚定义：\n\n| 引脚序号  | 引脚名称 | 类型  | 引脚说明    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G |  模块电源地 |\n| 2 | CS | I | SPI片选引脚 |\n| 3 | SO | I/0 | MISO数据引脚，主机输入从机输出 |\n| 4 | NC | NC | 悬空引脚，无功能 |\n| 5 | 3V3 | V | 模块电源输入正 |\n| 6 | SCK | I | SPI串行时钟引脚 |\n| 7 | SI | I/0 | MOSI数据引脚，主机输出从机输入 |\n| 8 | NC | NC | 悬空引脚，无功能 |\n\n\n<img src=\"\" width=\"300\" />\n\n\n## 使用例程\n\n- 待更新\n\n## 参考设计\n\n- SPMOD_Ethernet 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_ethernet/sipeed_spmod_ethernet.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_eink.html": {"title": "SPMOD - Eink", "content": "# SPMOD - Eink\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_eink/sp_eink.png\" alt=\"XXX\" style=\"zoom:40%;\" />\n\nSPMOD_Eink(墨水屏模块)采用 GDEW0154M09 电子墨水屏。\n\n## SPMOD - Eink 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 通过SP-MOD SPI接口与屏幕底板相连\n- 电子墨水屏：GDEW0154M09是一款1.54”，SPI接口控制，拥有24P FPC(0.5mm间距)接口的电子墨水屏。拥有超广可视角。\n- 支持 1 bit 黑/白显示\n- 分辨率：200x200\n- 模块尺寸：35*30*3.8mm\n\n### GDEW0154M09 电子墨水屏介绍\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 工作电压 | 2.3V~3.6V |\n| 工作电流 | 1~3mA |\n| 工作温度范围 | -40℃~85℃ |\n| 休眠电流 | <5uA |\n| 屏幕大小 | 1.54英寸 |\n| 有效显示区域 | 27.6mm |\n| 分辨率 | 200*200 |\n| 色彩 | 1 bit 黑/白显示 |\n| 对外接口 | 24P FPC (0.5mm间距) |\n> 内部集成电路包含门缓冲器、源缓冲器，接口，时序控制逻辑，振荡器，DC-DC，SRAM，LUT，VCOM\n\n\n###  SPMOD_Eink 模块引脚定义：\n\n| 引脚序号 | 引脚名称 | 类型 | 引脚说明 |\n| -------- | -------- | ---- | --- |\n| 1 | GND | G | 模块电源地 |\n| 2 | CS | I | SPI片选引脚 |\n| 3 | D/C | I | 数据/命令输入切换引脚 |\n| 4 | RES | I |  模块复位引脚，低有效 |\n| 5 | 3V3 | V | 模块电源输入正 |\n| 6 | SCK | I |SPI串行时钟引脚 |\n| 7 | SI | I/O | MOSI数据引脚，主机输出从机输入 |\n| 8 | BSY | O | BUSY状态输出引脚 |\n\n<img src=\"../../assets/spmod/spmod_eink/sp_eink_back.png\" height=\"300\" />\n\n- 接线方式：\n\n|  MCU:FUN(IO)   | SP_Eink |\n| :------------: | :-----: |\n|  GPIOHS(IO_7)  |   RES   |\n| SPIOHS(IO_15)  |   D/C   |\n| SPIOHS(IO_20)  |   CS   |\n| SPI:SCK(IO_21) |   SCK   |\n| SPI:MOSI(IO_8) |   SI    |\n|  GPIOHS(IO_6) |   BSY   |\n|  2.3-3.6V   |  3.3V   |\n|   GND    |   GND   |\n\n<img src=\"../../assets/spmod/spmod_eink/connection.png\" height=\"250\">\n\n### 基本指令列表\n\n| 指令  |       功能       |\n| :---: | :--------------: |\n| 0x10  | 开始发送黑白图像 |\n| 0x13  | 开始发送红白图像 |\n| 0x12  |  刷新图像到屏幕  |\n\n*更多指令信息参考[GDEW0154M09.pdf](https://dl.sipeed.com/shareURL/MAIX/HDK/Spmod_CN/sp_eink)*\n\n## 使用例程\n\n* 流程\n\n  1. 初始化配置\n  2. 创建 Image 并填充\n  3. 发送图像并刷新\n\n### C 示例：\n\n```c\n\n  spi_init(1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0);\n\n  fpioa_set_function(SPI_Eink_CS_PIN_NUM, FUNC_SPI1_SS0);   // SPI_Eink_CS_PIN_NUM: 20;\n  fpioa_set_function(SPI_Eink_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SPI_Eink_SCK_PIN_NUM: 21;\n  fpioa_set_function(SPI_Eink_MOSI_PIN_NUM, FUNC_SPI1_D0);  // SPI_Eink_MOSI_PIN_NUM: 8;\n\n  fpioa_set_function(SPI_Eink_DC_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_DC_GPIO_NUM);   // SPI_Eink_DC_PIN_NUM: 21;\n  fpioa_set_function(SPI_Eink_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_RST_GPIO_NUM); // SPI_Eink_RST_PIN_NUM: 7;\n  fpioa_set_function(SPI_Eink_BL_PIN_NUM, FUNC_GPIOHS0 + SPI_Eink_BL_GPIO_NUM);   // SPI_Eink_BL_PIN_NUM: 6;\n\n  gpiohs_set_drive_mode(SPI_Eink_DC_GPIO_NUM, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(SPI_Eink_RST_GPIO_NUM, GPIO_DM_OUTPUT);\n\n  gpiohs_set_pin(SPI_Eink_DC_GPIO_NUM, GPIO_PV_HIGH);\n  gpiohs_set_pin(SPI_Eink_RST_GPIO_NUM, GPIO_PV_HIGH);\n\n  gpiohs_set_drive_mode(SPI_Eink_BL_PIN_NUM, GPIO_DM_INPUT_PULL_UP);\n  gpiohs_set_pin_edge(SPI_Eink_BL_PIN_NUM, GPIO_PE_BOTH);\n\n    EPD_DisplayInit(); //EPD init\n\n  //Paint initialization\n  Paint_NewImage(BlackImage, EPD_WIDTH, EPD_HEIGHT, 270, WHITE); //Set screen size and display orientation\n  Paint_SelectImage(BlackImage);                                 //Set the virtual canvas data storage location\n\n  Paint_Clear(WHITE); //clear paint\n  Paint_DrawString_EN(0, 0, \"sipeed\", &Font8, WHITE, BLACK);   //5*8\n  Paint_DrawString_EN(0, 10, \"sipeed\", &Font12, WHITE, BLACK); //7*12\n  Paint_DrawString_EN(0, 25, \"sipeed\", &Font16, WHITE, BLACK); //11*16\n  Paint_DrawString_EN(0, 45, \"sipeed\", &Font20, WHITE, BLACK); //14*20\n  Paint_DrawString_EN(0, 80, \"sipeed\", &Font24, WHITE, BLACK); //17*24\n  EPD_FullDisplay(BlackImage, BlackImage, 0);                  //display image\n\n```\n\n### MaixPy 例程：\n\n```python\n\n  spi1 = SPI(SPI.SPI1, mode=SPI.MODE_MASTER, baudrate=600 * 1000,\n              polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=21, mosi=8)\n\n  fm.register(20, fm.fpioa.GPIOHS20, force=True) # SPI_Eink_SS_PIN_NUM: 20;\n  fm.register(15, fm.fpioa.GPIOHS15, force=True) # SPI_Eink_DC_PIN_NUM: 15;\n  fm.register(6, fm.fpioa.GPIOHS6, force=True) # SPI_Eink_BUSY_PIN_NUM: 6;\n  fm.register(7, fm.fpioa.GPIOHS7, force=True) # SPI_Eink_RST_PIN_NUM: 7;\n\n  cs = GPIO(GPIO.GPIOHS20, GPIO.OUT)\n  dc = GPIO(GPIO.GPIOHS15, GPIO.OUT)\n  busy = GPIO(GPIO.GPIOHS6, GPIO.IN, GPIO.PULL_DOWN)\n  rst = GPIO(GPIO.GPIOHS7, GPIO.OUT)\n\n  epd = SPEink(spi1, cs, dc, rst, busy, SPEink_WIDTH, SPEink_HEIGHT, SPEink_ROTATION)\n  epd.init()\n\n  img = image.Image()\n  img = img.resize(200, 200)\n  img.draw_line(0, 0, 100, 100)\n\n  epd.display(img)\n\n```\n\n### 运行环境\n\n|  语言  |  开发板  |          SDK/固件版本          |\n| :----: | :------: | :----------------------------: |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube |         maixpy v0.5.1          |\n\n*MaixPy固件建议自行从最新源码编译*\n\n### 运行结果\n\n* C\n\n  <img src=\"../../assets/spmod/spmod_eink/sp_eink_c.png\" height=\"250\" />\n\n* MaixPy\n\n  <img src=\"../../assets/spmod/spmod_eink/sp_eink_py.png\" height=\"250\" />\n\n### 移植\n\n修改以下参数即可\n\n* C\n\n  ```c\n    // board_config.h\n    #define SPI_INDEX 1\n    #define SPI_SCLK_RATE 600 * 1000\n    #define SPI_CHIP_SELECT_NSS 0 //SPI_CHIP_SELECT_0\n\n    #define SPI_Eink_CS_PIN_NUM 20\n    #define SPI_Eink_SCK_PIN_NUM 21\n    #define SPI_Eink_MOSI_PIN_NUM 8\n\n    #define SPI_Eink_DC_PIN_NUM 15\n    #define SPI_Eink_BL_PIN_NUM 6\n    #define SPI_Eink_RST_PIN_NUM 7\n\n    #define SPI_Eink_DC_GPIO_NUM 15\n    #define SPI_Eink_BL_GPIO_NUM 6\n    #define SPI_Eink_RST_GPIO_NUM 7\n  ```\n\n* MaixPy\n\n  ```python\n  ################### config ###################\n    SPI_Eink_NUM = SPI.SPI1\n    SPI_Eink_DC_PIN_NUM = const(15)\n    SPI_Eink_BUSY_PIN_NUM = const(6)\n    SPI_Eink_RST_PIN_NUM = const(7)\n    SPI_Eink_CS_PIN_NUM = const(20)\n    SPI_Eink_SCK_PIN_NUM = const(21)\n    SPI_Eink_MOSI_PIN_NUM = const(8)\n    SPI_Eink_FREQ_KHZ = const(600)\n  ##############################################\n  ```\n\n\n## 参考设计\n\n- SPMOD_Eink 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_eink/sipeed_spmod_eink.png\" height=\"250\" />\n\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maixhub.com](https://maixhub.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/shareURL/MAIX/SDK](https://dl.sipeed.com/shareURL/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/shareURL/MAIX/HDK](https://dl.sipeed.com/shareURL/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 | 878189804 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_fpc.html": {"title": "SPMOD - FPC", "content": "# SPMOD - FPC\n\n\n## 概述\n\n![](../../assets/spmod/spmod_fpc/sp_fpc.png)\n\n\nSPMOD_FPC(FPC 转接线模块)\n\n## SPMOD - FPC 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 作为延长套件，轻松的将SP-MOD接口用FPC延长至另一端。您将有更大的自由连接模块构建系统。\n- 提供一对SP-MOD至FPC转换板（一公一母），一条FPC排线, 10P规格。\n- 模块尺寸：15.0\\*10.0\\*3.3mm\n\n## 概括\n\n| 功能特点： | 参数 |\n| --- | -- |\n| SP-MOD至FPC10转换器器(公母一对)\t| 用于将SP-MOD接口和FPC的双向转换 |\n| FPC排线\t| 用于连接两个转换器 |\n| 外部供电电压 | 视连接的模块而定 |\n| 外部供电电流 | 视模块工作情况而定，通常小于1000mA |\n| 工作温度 | -30℃ ~ 85℃ |\n\n\n## 参考设计\n\n- SPMOD_FPC 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_fpc/sipeed_spmod_fpc.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_rfid.html": {"title": "SPMOD - RFID", "content": "# SPMOD - RFID\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_rfid/sp_rfid.png\" style=\"padding-right:100px;\" width=\"\" height=\"300\" />\n\nSPMOD_RFID (NFC 模块)采用复旦微电子 FM17510 高度集成的非接触式（13Mhz）的读写芯片。\n\n## SPMOD - RFID 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 利用SP-MOD SPI和RFID模块通讯\n- 64Byte收发缓冲FIFO\n- RIFC IC 为 FM17510。\n- 模块尺寸：25.0\\*20.1\\*6.2mm\n\n### FM17510 介绍\n\nFM17510 是一款高度集成的工作在 13.56MHz 下的非接触读写器芯片，支持符合 ISO/IEC 14443 TypeA 协议的非接触读写器模式。\n\n同时提供了低功耗的外部卡片侦测功能，方便电池供电、需要低功耗工作、并且需要实时处理任意 时刻会进入射频场的外部卡片的读写器设备。\n\nFM17510 具有低电压、低功耗、 单端驱动等特点。适用于低功耗、低电压、低成本要求的非接触读。\n\n- FM1750XX 在软硬件层面上兼容 MFRC552，支持工作模式：\n\n\n| FM17510  功能特点：|\n| --- |\n| 支持 ISO/IEC 14443 TypeA 读写器模式 |\n| 读写器模式支持 M1 加密算法 |\n| ISO14443 TYPEA 支持通讯速率 106kbps， 212kbps， 424kbps |\n| 支持 SPI 串行接口，最高 10Mbps |\n| Host 接口独立电源供电，电压范围 2.2~3.6V |\n| 工作温度范围 -40℃ ~ 85℃ |\n| 64Byte 收发缓冲 FIFO |\n| 中断输出模式灵活可配 |\n| 多种低功耗模式 : Soft powerdown模式 , Hard powerdown 模式, Deep powerdown 模式（典型值 1uA） |\n| 支持低功耗外部卡片侦测功能 |\n| 可编程定时器 |\n| 内置振荡电路外接 27.12MHz 晶振 |\n| 宽电压工作范围 2.2V~3.6V |\n| 内置 CRC 协处理器 |\n| 可编程 I/O 引脚|\n\n\n\n###  SPMOD_RFID 模块引脚定义：\n\n\n| 引脚序号 | 引脚名称 | 类型 | 引脚说明 | Note |\n| --- | --- | --- | --- | --- |\n| 1 | GND | G | 模块电源地 |\n| 2 | CS | I | SPI片选引脚 |\n| 3 | SO | I/O | MISO数据引脚，主机输入从机输出 |\n| 4 | NPD | I | 复位/休眠控制引脚 |\n| 5 | 3V3 | V | 模块电源输入正 |\n| 6 | SCK | I | SPI串行时钟引脚 |\n| 7 | SI | I/O | MOSI数据引脚，主机输出从机输入 |\n| 8 | IRQ | O | 模块中断输出引脚 |\n\n\n> 当 NPD 引脚为低电平时，模块进入休眠状态；当 NPD 引脚输入一个上升沿时，模块复位。\n\n<img src=\"../../assets/spmod/spmod_rfid/back.png\" height=\"300\" />\n\n- 接线方式:\n\n|   MCU:FUN(IO)   | SP_RFID |\n| :-------------: | :-----: |\n|    NC(IO_7)     |   NPD   |\n| SPI:MISO(IO_15) |   SO    |\n| SPI:SS0(IO_20)  |   CS    |\n| SPI:SCK(IO_21)  |   SCK   |\n| SPI:MOSI(IO_8)  |   SI    |\n|  NC(IO_6)    |   IRQ   |\n|  2.2~3.6V    |  3.3V   |\n|  GND       |   GND   |\n\n<img src=\"../../assets/spmod/spmod_rfid/connection.png\" height=\"250\">\n\n\n## 使用例程\n\n* 流程\n  1. 初始化\n  2. 扫描并绑定卡片\n  3. 读写数据\n\n### C 示例：\n\n```c\n\n  fpioa_set_function(RFID_CS_PIN, FUNC_GPIOHS0 + RFID_CS_HSNUM); // RFID_CS_PIN: 20;\n  fpioa_set_function(RFID_CK_PIN, FUNC_GPIOHS0 + RFID_CK_HSNUM); // RFID_CK_PIN: 21;\n  fpioa_set_function(RFID_MO_PIN, FUNC_GPIOHS0 + RFID_MO_HSNUM); // RFID_MO_PIN: 8;\n  fpioa_set_function(RFID_MI_PIN, FUNC_GPIOHS0 + RFID_MI_HSNUM); // RFID_MI_PIN: 15;\n\n  gpiohs_set_drive_mode(spi_io_cfg.hs_cs, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(spi_io_cfg.hs_clk, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(spi_io_cfg.hs_mosi, GPIO_DM_OUTPUT);\n  gpiohs_set_drive_mode(spi_io_cfg.hs_miso, GPIO_DM_INPUT);\n\n  // detected card\n  PcdRequest(0x52, type)\n\n  // auth and bind...\n\n  // read or write 16 bytes data from sector 0x11\n  PcdWrite(0x11, w_buf)\n  PcdRead(0x11, &r_buf)\n\n```\n\n### MaixPy 例程：\n\n```python\n\n  # 20: CS_NUM;\n  fm.register(20, fm.fpioa.GPIOHS20, force=True)\n  # set gpiohs work mode to output mode\n  cs = GPIO(GPIO.GPIOHS20, GPIO.OUT)\n\n  # RFID_SCK: 21; RFID_SI:8; RFID_SO: 15;\n  spi1 = SPI(SPI.SPI1, mode=SPI.MODE_MASTER, baudrate=600 * 1000,\n          polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=21, mosi=8, miso=15)\n\n  # Create an object of the class MFRC522\n  MIFAREReader = MFRC522(spi1, cs)\n\n  # detected and auth, bind...\n\n  # read or write 16 bytes data from sector 0x11\n  MIFAREReader.MFRC522_Write(0x11, data)\n  MIFAREReader.MFRC522_Read(0x11)\n\n```\n### 运行环境\n\n|  语言  | 开发板   | SDK/固件版本                   |\n| :----: | :------- | :----------------------------- |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube | maixpy v0.5.1                  |\n\n### 运行结果\n\n* C\n\n  <img src=\"../../assets/spmod/spmod_rfid/c_log.png\" height=\"200\" />\n\n* MaixPy\n\n  <img src=\"../../assets/spmod/spmod_rfid/maixpy_log.png\" height=\"200\" />\n\n### 移植\n\n修改以下参数即可适配其他 K210 开发板.\n\n* C\n\n  ```c\n    // board_config.h\n    #define RFID_CS_PIN (20)\n    #define RFID_CK_PIN (21)\n    #define RFID_MO_PIN (8)\n    #define RFID_MI_PIN (15)\n\n    #define RFID_CS_HSNUM (20)\n    #define RFID_CK_HSNUM (21)\n    #define RFID_MO_HSNUM (8)\n    #define RFID_MI_HSNUM (15)\n  ```\n\n* MaixPy\n\n  ```python\n    ################### config ###################\n    CS_NUM = const(20)\n    SPI_FREQ_KHZ = const(600)\n    SPI_SCK = const(21)\n    SPI_MOSI = const(8)\n    SPI_MISO = const(15)\n    #############################################\n  ```\n\n\n## 参考设计\n\n\n- SPMOD_RFID 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_rfid/sipeed_spmod_rfid.png\" height=\"250\" />\n\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/modules_spmod/spmod_lora.html": {"title": "SPMOD - LoRa", "content": "# SPMOD - LoRa\n\n\n## 概述\n\n<img src=\"../../assets/spmod/spmod_lora/sp_lora.png\"  width=\"\" height=\"300\" />\n\nSPMOD_LoRa(LoRa 模块)采用 M-XL8 模块。\n\n## SPMOD - LoRa 介绍\n\n- 采用 **Sipeed-SPMOD** 接口(2.54mm * 8PIN 排针)，统一 MaixPy 开发板接口\n- 利用 SP-MOD SPI 和 LoRa 模块通讯\n- LoRa 模块：M-XL8 SX1276 模块是一个 SPI 接口，内置 LoRaTM 调制解调器和可调功率放大器的 LoRa 模块，它具有高性能和可靠性\n- 370MHz-1200MHz, 最大20dBm (100mW)持续发射功率\n- 模块尺寸：25.0\\*10.0\\*4.3mm\n\n### M-XL8 SX1276 LoRa 模块 介绍\n\n| 功能特点： | 参数 |\n| --- | -- |\n| 工作频段 | 370MHz-1200Mhz |\n| 发射功率 | 20dBm（最大） |\n| 通信接口 | SPI |\n| 工作电压 | 1.8V~6.3V |\n| 工作温度 | -40℃ - 80℃ |\n| 天线 | 外置天线，IPEX或焊接 |\n| 接收灵敏度 | -148dbm |\n| RSSI动态范围 | 127dB |\n| 最大链路预算 | 168dB |\n| 收发状态电流 | 9.9mA |\n| 睡眠状态电流 | 50nA |\n| 调制方式 | FSK, GFSK, MSK, GMSK, LoRaTM及OOK |\n> 内置LoRaTM调制解调器，内置CRC，继承+12dBm可调PA+LNA\n\n\n###  SPMOD_lora 模块引脚定义：\n\n| 引脚序号  | 引脚名称 | 类型  | 引脚说明    |\n| -------- | -------- | ---- | ---------- |\n| 1 | GND | G  | 模块电源地 |\n| 2 | CS | I/O | SPI片选引脚 |\n| 3 | SO | I/O | MISO数据引脚，主机输入从机输出 |\n| 4 | RST | I | 模块复位引脚，低有效 |\n| 5 | 3V3 | V | 模块电源输入正 |\n| 6 | SCK | I | SPI串行时钟引脚 |\n| 7 | SI | I/O | MOSI数据引脚，主机输出从机输入 |\n| 8 | IRQ | I | 连接至模块DIO0，可编程决定功能 |\n\n<img src=\"../../assets/spmod/spmod_lora/back.png\" width=\"300\" />\n\n- 接线方式:\n\n|   MCU:FUN(IO)   | SP_LCD |\n| :-------------: | :----: |\n|  GPIOHS7(IO_7)  |  RST   |\n| SPI:MISO(IO_15) |   SO   |\n| SPI:SS0(IO_20)  |   CS   |\n| SPI:SCK(IO_21)  |  SCK   |\n| SPI:MOSI(IO_8)  |   SI   |\n|   GPIOH(IO_6)  |  IRQ   |\n|  1.8-6.3V    |  3.3V  |\n|   GND      |  GND   |\n\n<img src=\"../../assets/spmod/spmod_lora//connection.png\" height=\"250\">\n\n## 使用例程\n\n* 流程\n\n  1. 创建 LoRa 对象并初始化\n  2. 发送或者接收数据\n\n### C 示例：\n\n  ```c\n\n  fpioa_set_function(SPI_LoRa_SX127X_CS_PIN_NUM, FUNC_SPI1_SS0);   // CS: 20\n  fpioa_set_function(SPI_LoRa_SX127X_SCK_PIN_NUM, FUNC_SPI1_SCLK); // SCLK: 21\n  fpioa_set_function(SPI_LoRa_SX127X_MOSI_PIN_NUM, FUNC_SPI1_D0);  // MOSI: 8\n  fpioa_set_function(SPI_LoRa_SX127X_MISO_PIN_NUM, FUNC_SPI1_D1);  // MISO: 15\n\n  fpioa_set_function(SPI_LoRa_SX127X_IRQ_PIN_NUM, FUNC_GPIOHS0 + SPI_LoRa_SX127X_IQR_GPIO_NUM); // IQR: 6\n  fpioa_set_function(SPI_LoRa_SX127X_RST_PIN_NUM, FUNC_GPIOHS0 + SPI_LoRa_SX127X_RST_GPIO_NUM); // RST: 7\n\n  spi_init(SPI_DEVICE_1, SPI_WORK_MODE_0, SPI_FF_STANDARD, DATALENGTH, 0);\n\n  sx1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_17DBM, SX1278_LoRa_SF_8,\n                 SX1278_LoRa_BW_20_8KHZ, 10);\n\n  if (master == 1)\n  {\n      printf(\"====MASTER====\\r\\n\");\n      ret = sx1278_LoRaEntryTx(&SX1278, 16, 2000);\n  }\n  else\n  {\n      printf(\"====SALAVE====\\r\\n\");\n      ret = sx1278_LoRaEntryRx(&SX1278, 16, 2000);\n  }\n\n  ```\n\n### MaixPy 例程：\n\n  ```python\n\n  fm.register(20, fm.fpioa.GPIOHS20, force=True) # RST\n  fm.register(7, fm.fpioa.GPIOHS7, force=True) # CS\n\n  # set gpiohs work mode to output mode\n  cs = GPIO(GPIO.GPIOHS20, GPIO.OUT)\n  rst = GPIO(GPIO.GPIOHS7, GPIO.IN)\n  # The other pins are configured at SPI initialization time\n\n  spi1 = SPI(SPI.SPI1, mode=SPI.MODE_MASTER, baudrate=100 * 1000,\n               polarity=0, phase=0, bits=8, firstbit=SPI.MSB, sck=21, mosi=8, miso = 15)\n\n  lora = SX127x(spi=spi1, pin_ss=cs)\n  lora.init()\n\n  #######receiver###########\n  receive(lora)\n\n  ########sender###########\n  # send(lora)\n\n\n  ```\n\n### 运行环境\n\n|  语言  |  开发板  |          SDK/固件版本          |\n| :----: | :------: | :----------------------------: |\n|   C    | MaixCube | kendryte-standalone-sdk v0.5.6 |\n| MaixPy | MaixCube |         maixpy v0.5.1          |\n\n*MaixPy固件建议自行从最新源码编译*\n\n### 运行结果\n\n* C\n\n  <center class=\"third\">\n\t  <img src=\"../../assets/spmod/spmod_lora/lora_send_log_c.png\" height=\"250\"/><img src=\"../../assets/spmod/spmod_lora/lora_recv_log_c.png\" height=\"250\"/>\n  </center>\n\n* MaixPy\n\n  <center class=\"third\">\n\t  <img src=\"../../assets/spmod/spmod_lora/lora_send_log.png\" height=\"250\"/><img src=\"../../assets/spmod/spmod_lora/lora_recv_log.png\" height=\"250\"/>\n  </center>\n\n### 移植\n\n修改以下参数即可适配其他 K210 开发板.\n\n* C\n\n  ```c\n    // board_config.h\n    #define SPI_INDEX           1\n    #define SPI_SCLK_RATE       600*1000\n    #define SPI_CHIP_SELECT_NSS 0//SPI_CHIP_SELECT_0\n\n    #define SPI_LoRa_SX127X_CS_PIN_NUM      20\n    #define SPI_LoRa_SX127X_SCK_PIN_NUM     21\n    #define SPI_LoRa_SX127X_MOSI_PIN_NUM    8\n    #define SPI_LoRa_SX127X_MISO_PIN_NUM    15\n\n    #define SPI_LoRa_SX127X_IRQ_PIN_NUM     6\n    #define SPI_LoRa_SX127X_RST_PIN_NUM     7\n\n    #define SPI_LoRa_SX127X_IQR_GPIO_NUM    6\n    #define SPI_LoRa_SX127X_RST_GPIO_NUM    7\n  ```\n\n* MaixPy\n\n  ```python\n    ################### config ###################\n    LoRa_RST = const(20)\n    LoRa_CS = const(7)\n    LoRa_SPI_SCK = const(21)\n    LoRa_SPI_MOSI = const(8)\n    LoRa_SPI_MISO = const(15)\n    LoRa_SPI_NUM = SPI.SPI1\n    LoRa_SPI_FREQ_KHZ = const(100)\n    ##############################################\n  ```\n\n## 参考设计\n\n- SPMOD_LoRa 尺寸图：\n\n<img src=\"../../assets/spmod/spmod_lora/sipeed_spmod_lora.png\" height=\"250\" />\n\n-----\n\n## 资源链接\n\n| 资源 | --- |\n| --- | --- |\n| 官网 | www.sipeed.com |\n| SIPEED 官方淘宝店 |[sipeed.taobao.com](sipeed.taobao.com) |\n|Github | [https://github.com/sipeed](https://github.com/sipeed) |\n|BBS | [http://bbs.sipeed.com](http://bbs.sipeed.com) |\n|MaixPy 文档官网 | [http://maixpy.sipeed.com](http://wiki.sipeed.com/maixpy) |\n|Sipeed 模型平台 | [https://maix.sipeed.com](https://maix.sipeed.com) |\n|SDK 相关信息 | [https://dl.sipeed.com/MAIX/SDK](https://dl.sipeed.com/MAIX/SDK) |\n|HDK 相关信息 | [https://dl.sipeed.com/MAIX/HDK](https://dl.sipeed.com/MAIX/HDK) |\n|E-mail(技术支持和商业合作) | [Support@sipeed.com](mailto:support@sipeed.com) |\n|telgram link | https://t.me/sipeed |\n|MaixPy AI QQ 交流群 (四群）| 256336487 |\n|MaixPy AI QQ 交流群(二群) | 1129095405 |"}, "/hardware/zh/longan/One/index.html": {"title": "", "content": "敬请期待"}, "/hardware/zh/longan/Bouffalolab/index.html": {"title": "动态", "content": "---\n\ntitle: 动态\nkeywords: teedoc, 博客生成, 静态博客\ndesc: teedoc 静态博客页面生成\nshow_source: false\ndate: true\n\n---"}, "/hardware/zh/longan/index.html": {"title": "Longon 开发板", "content": "# Longon 开发板\n\n龙眼系列开发板是sipeed基于国产mcu芯片来设计的板子。方便与MCU开发者快速上手使用免于设计板子的麻烦。"}, "/hardware/zh/longan/Nano/get_started/debug.html": {"title": "Debug 调试", "content": "Debug 调试\n======\n\n## 连接调试器\n| 开发板 | 调试器 |\n| :----: | :----: |\n|  JTDO  |  TDO   |\n|  JTDI  |  TDI   |\n|  JTCK  |  TCK   |\n|  JTMS  |  TMS   |\n|  3V3   |  3V3   |\n|  GND   |  GND   |\n\n## 修改配置文件\n修改工程配置文件 `platformio.ini`， 在下面添加\n\n```ini\ndebug_tool = jlink\n```\n\n根据实际调试器型号选择。目前支持的调试器列表\n\n* `jlink`\n* `gd-link`\n* `ft2232`\n* `sipeed-rv-debugger`\n* `altera-usb-blaster`\n* `um232h`\n* `rv-link`\n\n## 一键调试\n\n切换到 VS CODE 左侧的 `DEBUG` 界面， 点击绿色箭头即可进行调试。\n\n![](./../assets/pio_debug_longan.png)."}, "/hardware/zh/longan/Nano/get_started/rv-link.html": {"title": "使用 RV-LINK", "content": "使用 RV-LINK\n=========\n\n## 什么是 RV-LINK\n\n**RV-LINK** 是一个基于 RISC-V 开发板的仿真器固件，通过烧写 **RV-LINK** 固件， 可以将 **Sipeed Longan Nano** 开发板变成一个 `jtag` 调试器，用来调试另一块 Longan 或者其他支持 jtag 调试的开发板。 RV-LINK 项目地址: [https://gitee.com/zoomdy/RV-LINK](https://gitee.com/zoomdy/RV-LINK)\n\n## 烧写 RV-LINK 固件\n\n### 使用 PlatformIO 工程一键烧录\n* 下载 RV-LINK 源码\n\n    项目源码下载地址：[http://dl.sipeed.com/LONGAN/Nano/Tools/RV-LINK-pio-src-v0.1.zip](http://dl.sipeed.com/LONGAN/Nano/Tools/RV-LINK-pio-src-v0.1.zip)\n\n    也可以从RV-LINK官方项目下载: [https://gitee.com/zoomdy/RV-LINK](https://gitee.com/zoomdy/RV-LINK)\n* 使用 VSCODE 打开工程目录\n\n    将上面下载的源码解压到单独的文件夹\n    然后使用 VSCODE 打开源码文件夹\n\n    如下图所示：\n    ![](./../assets/pio_open_rvlink.png)\n\n    通常使用 DFU 方式烧录固件，**不需要**修改配置文件。(使用 DFU 方式下载请安装 libusb 驱动, 参考[使用Zadig安装驱动](blink.md/#使用zadig安装驱动))\n\n    如果需要更改烧录方式，可以通过修改 `platformio.ini` 文件来修改， 具体配置方式请参考：[修改工程配置文件](blink.md/#工程配置文件)\n\n* 使用 PIO 烧录固件\n\n    连接开发板，使开发板进入烧录模式后，点击左下角的箭头符号即可进行烧录。\n\n    烧录成功后，可以看到开发板上的绿灯闪烁，将开发板连接到电脑USB口之后，可以在设备管理器中看到多出了一个串口设备。此时 Longan 板子就成功变成了 RV-LINK 调试器。\n\n### 其他烧录方式\n\n参考文档： [将 Longan Nano 开发板变成 RISC-V 仿真器](https://gitee.com/zoomdy/RV-LINK/wikis/%E5%B0%86%20Longan%20Nano%20%E5%BC%80%E5%8F%91%E6%9D%BF%E5%8F%98%E6%88%90%20RISC-V%20%E4%BB%BF%E7%9C%9F%E5%99%A8)\n\n## 使用 RV-LINK 调试\n\n### 连接开发板\n\n将刷好 RV-LINK 固件的开发板与待调试开发板 jtag 连线按下表连接\n\n| RV-LINK | 待调试开发板 |\n| :----: | :----: |\n|  JTDO  |  JTDO  |\n|  JTDI  |  JTDI  |\n|  JTCK  |  JTCK  |\n|  JTMS  |  JTMS  |\n|  3V3   |  3V3   |\n|  GND   |  GND   |\n\n#### WIN7 用户安装 GD 串口驱动\n\n见此链接[安装 USB 串口驱动](https://gitee.com/zoomdy/RV-LINK/wikis/GDB%20%E4%BD%BF%E7%94%A8%20RV-LINK%20%E4%BB%BF%E7%9C%9F%E5%99%A8%E8%B0%83%E8%AF%95%20RISC-V%20%E7%A8%8B%E5%BA%8F?sort_id=1667650#%E5%AE%89%E8%A3%85-usb-%E4%B8%B2%E5%8F%A3%E9%A9%B1%E5%8A%A8)\n\n### 在 PlatformIO IDE 中使用 RV-LINK\n\nRV-LINK 在 PlatformIO IDE 可以和其他调试器一样，支持一键启动调试。\n\n只需要在工程的 `platformio.ini` 配置文件中，指定调试器选项和调试器端口选项。\n\n示例代码\n\n```ini\n[env:sipeed-longan-nano]\nplatform = gd32v\nframework = gd32vf103-sdk\nboard = sipeed-longan-nano\nmonitor_speed = 115200\nupload_protocol = rv-link ; rv-link下载选项\ndebug_tool = rv-link ; rv-link调试选项\ndebug_port = COM2    ; 使用rv-link 必填此项 调试器串口\n```\n\n### 在其他平台使用 RV-LINK\n\n参考 [RV-LINK WIKI](https://gitee.com/zoomdy/RV-LINK/wikis/)"}, "/hardware/zh/longan/Nano/get_started/blink.html": {"title": "Blink 闪灯程序", "content": "---\ntitle: Blink 闪灯程序\n---\n\n## 创建 Blink 工程\n\n* 打开 PIO 主页 选择 `Project Examples`\n\n![](http://blog.sipeed.com/wp-content/uploads/2019/04/d977e844490e6ccc4625f701883a29f5.png)\n\n* 选择 `arduino blink` 点击 `Import` 导入示例程序 （初次导入需要下载架构文件及工具，需要等待较长时间）\n![](http://blog.sipeed.com/wp-content/uploads/2019/04/82943a6b74077e6210e2d9421cb5438f.png)\n\n* 导入成功后即可见到示例工程\n![](http://blog.sipeed.com/wp-content/uploads/2019/04/1262373ca7b0b483e30dac1124adaabf.png)\n\n## 工程配置文件\n\n\n* 我们首先需要编辑工程配置文件 `platformio.ini` 根据自己的开发板型号，删掉其他开发板环境。\n\n![](./../assets/pio_ini_cfg.png)\n\n配置示例\n```ini\n[env:sipeed-longan-nano]\nplatform = gd32v          ;平台，选择gd32v\nframework = arduino       ;可选 gd32vf103-sdk 或 arduino\nboard = sipeed-longan-nano ; 开发板\nmonitor_speed = 115200     ; 串口监视器波特率\nupload_protocol = serial   ; 下载工具 默认串口， 可选 dfu、jlink、gd-link 等\ndebug_tool = jlink         ; 调试工具 默认jlink ，可选 sipeed-rv-debugger 等\n```\nPIO 可以在配置文件中实现设置宏定义， 控制编译流程等自定义功能，高级用法请参阅 [PIO 官方文档](https://docs.platformio.org/en/latest/projectconf.html).\n\n## 一键编译\n\n点击左下角的 `Build` 即可构建项目\n![](./../assets/pio_complie.png)\n\n## 连接开发板\n### 串口 ISP 下载\n* 准备 USB 转 串口下载器\n* 连接开发板与下载器\n* 修改 `platformio.ini` 文件， 添加下面一行内容：\n```ini\nupload_protocol = serial\n```\n* 开发板按住 `BOOT` 键，再按 `RESET` 键重启开发板后再松开 `BOOT` 键，进入下载模式。\n\n### JTAG 下载\n* 准备J-link 或 Sipeed RV 调试器\n* 连接开发板\n* 修改 `platformio.ini` 文件， 添加下面一行内容：\n```ini\nupload_protocol = jlink\n```\n或者\n```ini\nupload_protocol = sipeed-rv-debugger\n```\n\n### USB DFU 下载\n* **首次** 使用需要安装 libusb 驱动程序， 请参考此步骤 [使用 Zaidig 安装驱动](###使用zadig安装驱动).\n* 准备 USB Type-c 数据线\n* 使用数据线连接电脑与开发板\n* 修改 `platformio.ini` 文件， 添加下面一行内容：\n```ini\nupload_protocol = dfu\n```\n* 开发板按住 `BOOT` 键，再按 `RESET` 键重启开发板后再松开 `BOOT` 键，进入 DFU 模式。\n\n\n## 一键下载\n\n按照上面步骤选择好下载方式后，即可使用 PIO 内置工具一键下载。\n\n点击左下角的 `Upload` 即可向开发板上传程序。\n\n![](./../assets/pio_upload.png)\n\n### 使用Zadig安装驱动\nPIO 内置 dfu-util 下载工具，使用此工具需要为开发板安装 libusb 驱动。（注意： 与 GD 官方驱动不同）\n\n建议通过 Zadig 安装 winusb 驱动。[下载地址](https://github.com/pbatard/libwdi/releases/download/b721/zadig-2.4.exe)\n\n下载成功后打开 Zadig\n\n在下拉栏中选择 GD32V， 替换驱动选择 WinUSB, 点击替换按钮，即可替换成功。\n![](./../assets/dfu_zadig.png)\n### DFU 图形界面下载\n\n下载DFU工具：<https://dl.sipeed.com/shareURL/LONGAN/Nano/Tools>\n在里面找到 `GD32_MCU_Dfu_Tool_V3.8.1.5784_1.rar` 文件并下载\n\n解压出两个文件夹：\n\n- GD32 MCU Dfu Drivers_v1.0.1.2316 \n- GD32 MCU Dfu Tool_v3.8.1.5784\n\n先进入driver文件夹，安装对应的驱动文件，注意使用管理员权限运行\n\n![](./../assets/examples/how_to_install_dfu.png)\n\n再回到Tools目录下运行 GD32 MCU Dfu Tool.exe\n将 Longan Nano 插到电脑，按住板子上 Boot0 键的时候按下 reset 键。\n就可以看到 DFU 工具中识别到了 GD32VF 芯片\n\n选择对应的固件文件，并勾选烧录后校验，点击OK，即可进行烧录\n\n- 烧录完成之后不会自动复位，需要自己手工按下复位按键(按下reset)。\n\n![](./../assets/examples/how_to_use_dfu.png)"}, "/hardware/zh/longan/Nano/get_started/pio.html": {"title": "PIO 配置", "content": "PIO 配置\n=====\n\n## 安装 VS-CODE\nVS CODE 是一款比较常用的开发工具。前往[VScode官网](https://code.visualstudio.com/ \"VScode官网\")，下载安装对应操作系统版本的安装包即可。\n\n## 安装 PIO 插件\n打开 VSCode -> 点击左侧扩展 -> 搜索 PlatformIO -> 点击安装插件 -> 等待安装完成 -> 重启 VSCODE\n\n![](http://blog.sipeed.com/wp-content/uploads/2019/04/0d501a8515a735fba54e2f5de908cd1e.png)\n\n## 安装 GD32V 平台定义\n\nPIO 目前提供**命令行**与**图形界面**两种方式来安装。下面将分别介绍：\n（PS : 推荐命令行，因为能看到下载进度条。）\n\n### 命令行\n\n点击PIO图标 -> 点击左下方的New Terminal-> 在终端窗口中执行下面的安装指令\n\n* 发布版 （稳定版本）\n```\nplatformio platform install gd32v\n```\n\n* 开发版（与Github同步）\n```\nplatformio platform install https://github.com/sipeed/platform-gd32v\n```\n![](./../assets/pio_install_gd32v.png)\n\n注：受国内网络环境影响，安装过程需要较长时间，请耐心等待。\n\n\n### 图形界面\n\n打开VS CODE -> 点击左侧 PIO 图标 -> 点击左下方的 Open 选项 -> 点击 Platforms 页面 -> 点击 Advanced Installation 打开添加窗口\n![](./../assets/pio_install_add_gd32v_step1.png)\n\n在打开的窗口中输入下面的网址\n```\nhttps://github.com/sipeed/platform-gd32v.git\n```\n\n点击 Install 即可添加完成。\n\n![](./../assets/pio_install_add_gd32v_step2.png)\n\n耐心等待即可安装成功。 （安装失败多为网络原因， 请更换网络环境后再次尝试）\n![](./../assets/pio_install_add_gd32v_step3.png)"}, "/hardware/zh/longan/Nano/get_started/sipeed-debugger.html": {"title": "使用 Sipeed 调试器", "content": "---\ntitle: 使用 Sipeed 调试器\n---\n\n## Sipeed rv debugger\n\n\n## Sipeed rv debugger lite"}, "/hardware/zh/longan/Nano/Longan_nano.html": {"title": "Longan nano ", "content": "# Longan nano \n\n## 介绍\n\nLongan Nano是基于兆易创新(GigaDevice)的GD32VF103CBT6(RISC-V架构)芯片设计的极简开发板。开发板将芯片所有IO引出，设计小巧精致，板载Type-C、LCD、SD卡、JTAG等接口，方便广大学生、工程师、极客爱好者们接触学习最新一代的 RISC-V处理器。\n\n![Longan_nano_pin](./../../../assets/Longan/nano/Longan_nano.124.jpg)\n\n## 参数\n\n| 项目 | 参数 |\n| --- | --- |\n| CPU | 基于 RISC-V 32 位内核的 GD32VF103CBT6 |\n| 内核功耗 | 仅传统 Cortex-M3 的 1/3 |\n| 存储 | 128KB Flash, 32KB SRAM |\n|外设 | 4 x general purpose 16-bit timer, 2 x basic 16-bit timer, 1 x advanced 16-bit timer,<br>Watchdog, RTC, Systick<br>3 x USART, 2 x I2C, 3 x SPI, 2 x I2S, 2 x CAN, 1 x USBFS (OTG), 2 x ADC (10 channel), 2 x DAC |\n| 按键 | 1 个复位按键和 1 个 BOOT 按键（连接到 GPIO） |\n| 屏幕接口 | SPI 接口（标配 0.96 寸 160x80 RGB IPS LCD） |\n| 存储接口 | 板载 TF 卡座子 |\n| 调试接口 | 2x4 排针引出 JTAG 调试接口和串口 |\n| 晶振 | 8MHz 无源晶振 + 32.768KHz RTC 无源晶振 |\n| LED | 板载 1 个 RGB LED |\n| GPIO 数量 | 2 引出 28 个 GPIO 到排针 |\n### 新版照片\n![](./../../../assets/Longan/nano/Longan-nano_PINOUT.svg)\n \n![](./../../../assets/Longan/nano/longan-nano-1.png)\n### 旧版照片\n![](./../../../assets/Longan/nano/longan_nano_pinout_old.png)\n\n![](./../../../assets/Longan/nano/longan-nano-old.png)\n\n## 使用\n\n[Longan使用](/soft/longan/zh/readme.md)\n\n## 产品技术支持\nLongan Nano 开发板可以在多种场景实现客户不同方面的需要，在 AIoT 上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务 <support@sipeed.com>。"}, "/hardware/zh/longan/Nano/examples/printf.html": {"title": "串口打印", "content": "串口打印\n==========\n\n很多时候，串口打印都是一个非常方便的调试手段，通过串口打印的信息，可以方便的定位程序错误位置\n\n本文基于 longan nano 演示如何实现 printf 通过串口打印\n\n本文选择串口0作为串口打印信息的端口，外设使用前，自然需要进行初始化\n\n```c\nvoid init_uart0(void)\n{\t\n\t/* enable GPIO clock */\n    rcu_periph_clock_enable(RCU_GPIOA);\n    /* enable USART clock */\n    rcu_periph_clock_enable(RCU_USART0);\n\n    /* connect port to USARTx_Tx */\n    gpio_init(GPIOA, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, GPIO_PIN_9);\n    /* connect port to USARTx_Rx */\n    gpio_init(GPIOA, GPIO_MODE_IN_FLOATING, GPIO_OSPEED_50MHZ, GPIO_PIN_10);\n\n\t/* USART configure */\n    usart_deinit(USART0);\n    usart_baudrate_set(USART0, 115200U);\n    usart_word_length_set(USART0, USART_WL_8BIT);\n    usart_stop_bit_set(USART0, USART_STB_1BIT);\n    usart_parity_config(USART0, USART_PM_NONE);\n    usart_hardware_flow_rts_config(USART0, USART_RTS_DISABLE);\n    usart_hardware_flow_cts_config(USART0, USART_CTS_DISABLE);\n    usart_receive_config(USART0, USART_RECEIVE_ENABLE);\n    usart_transmit_config(USART0, USART_TRANSMIT_ENABLE);\n    usart_enable(USART0);\n\n    usart_interrupt_enable(USART0, USART_INT_RBNE);\n}\n```\n\n这里首先的开启了端口时钟和串口时钟，在初始化完管脚后，就进行了串口的功能配置\n\n我们一般比较关心的就是串口的波特率，这里设置成了 115200\n\n然后我们还需要重新实现 _put_char ，将 printf 重映射\n\n```c\nint _put_char(int ch)\n{\n    usart_data_transmit(USART0, (uint8_t) ch );\n    while ( usart_flag_get(USART0, USART_FLAG_TBE)== RESET){\n    }\n\n    return ch;\n}\n```\n\n这样就可以快乐的使用 printf 了"}, "/hardware/zh/longan/Nano/examples/badapple.html": {"title": "Bad Apple 演示视频", "content": "Bad Apple 演示视频\n==================\n\n本文目的是使用板载的 160*80 分辨率的 OLED 屏幕播放 bad apple 视频\n\n## 主要工作介绍\n\n+ 移植 OLED 屏幕的驱动\n+ 移植 tf 卡驱动和 fatfs 文件系统\n+ 将视频按自己需要的帧率转换为一帧帧的图片然后打包到 tf 卡\n+ 在 gd32v 上读取 tf 卡中的图片并进行显示\n\n### 屏幕驱动\n\n使用硬件 SPI 驱动屏幕，首先需要初始化 SPI\n\n```c\nvoid spi_config(void)\n{\n    spi_parameter_struct spi_init_struct;\n    /* deinitilize SPI and the parameters */\n    OLED_CS_Set();\n    spi_struct_para_init(&spi_init_struct);\n\n    /* SPI0 parameter config */\n    spi_init_struct.trans_mode           = SPI_TRANSMODE_FULLDUPLEX;\n    spi_init_struct.device_mode          = SPI_MASTER;\n    spi_init_struct.frame_size           = SPI_FRAMESIZE_8BIT;\n    spi_init_struct.clock_polarity_phase = SPI_CK_PL_HIGH_PH_2EDGE;\n    spi_init_struct.nss                  = SPI_NSS_SOFT;\n    spi_init_struct.prescale             = SPI_PSC_8;\n    spi_init_struct.endian               = SPI_ENDIAN_MSB;\n    spi_init(SPI0, &spi_init_struct);\n\n\tspi_crc_polynomial_set(SPI0,7);\n\tspi_enable(SPI0);\n}\n```\n\n初始化完成后就可以实现数据指令的发送\n\n```c\nvoid LCD_Writ_Bus(u8 dat)\n{\n\tOLED_CS_Clr();\n\n\twhile(RESET == spi_i2s_flag_get(SPI0, SPI_FLAG_TBE));\n        spi_i2s_data_transmit(SPI0, dat);\n\twhile(RESET == spi_i2s_flag_get(SPI0, SPI_FLAG_RBNE));\n        spi_i2s_data_receive(SPI0);\n\n\tOLED_CS_Set();\n}\n\nvoid LCD_WR_DATA8(u8 dat)\n{\n\tOLED_DC_Set();//写数据\n\tLCD_Writ_Bus(dat);\n}\n\nvoid LCD_WR_DATA(u16 dat)\n{\n\tOLED_DC_Set();//写数据\n\tLCD_Writ_Bus(dat>>8);\n\tLCD_Writ_Bus(dat);\n}\n\nvoid LCD_WR_REG(u8 dat)\n{\n\tOLED_DC_Clr();//写命令\n\tLCD_Writ_Bus(dat);\n}\n```\n\n`LCD_Writ_Bus` 完成了 SPI 的收发，通过控制命令数据线，完成命令和数据的发送\n\nOLED 屏幕在使用前还需要设置它的一些参数，比如屏幕开启、数据帧的格式等等，这些在参数在屏幕初始化的时候，通过写命令再写数据的方式写入。想修改这些参数需要依靠屏幕配套的数据手册，不过一般可以参数屏幕生产商提供的例程中的参数。\n\n### tf 卡驱动和 fatfs 文件系统\n\ntf 卡在 longan 上也是使用 SPI 驱动的。为了更快的访问速率，也是使用硬件 SPI 驱动。使用前也需要初始化，方式和屏幕的 SPI 初始化类似，就不再累述。\n\nfatfs 是一个专为小型嵌入式设备设计的文件系统。fatfs 符合 ANSI C(C89)规范，并且和磁盘 I/O 层完全分离。\n\n具体的移植也很简单，直接参照 fatfs 提供的 stm32 的工程移植进行\n\n这里提供该工程的[下载地址](http://dl.sipeed.com/LONGAN/Nano/Firmware/badapple_demo_tools/ffsample.7z)，完整版可以去 fatfs 的[官网下载](http://elm-chan.org/fsw/ff/ffsample.zip)\n\n主要的工作在于实现 fatfs 的几个基本函数 `disk_initialize` `disk_status` `disk_read` `disk_ioctl`\n\n这些函数又是基于 SPI 通信的，还需要修改 SPI 接收发送的实现\n\n```c\nstatic\nBYTE xchg_spi (\n\tBYTE dat\t/* Data to send */\n)\n{\n\twhile(RESET == spi_i2s_flag_get(SPI1, SPI_FLAG_TBE));\n        spi_i2s_data_transmit(SPI1, dat);\n\twhile(RESET == spi_i2s_flag_get(SPI1, SPI_FLAG_RBNE));\n        return(spi_i2s_data_receive(SPI1));     /* Return received byte */\n}\n\nstatic\nvoid rcvr_spi_multi (\n\tBYTE *buff,\t\t/* Pointer to data buffer */\n\tUINT btr\t\t/* Number of bytes to receive (even number) */\n)\n{\n\tdo\n\t{\n\t\t*buff = xchg_spi(0xff);\n\t\tbuff++;\n\t} while (btr--);\n\n}\n```\n\n### 视频预解码\n\nmp4 格式的视频，单片机因为没有硬件的加速，无法胜任解码播放的工作，所以只能靠手工预解码，相当于按照一定的帧率对原视频进行截图\n\n这里需要使用到 PotPlayer XnViewMP\n\n首先使用 PotPlayer 打开视频，快捷键 ctrl+G 打开连续截图\n\n打开后如图\n\n![](./../assets/examples/potplayer.png)\n\n其中格式一定要 BMP，尺寸按照屏幕的尺寸设置，时间我这里设置的是 100ms 也就是 1s 十帧的样子，采集数量就自己计算一下视频总时间再乘每秒帧数，我这里就是 219s * 10 = 2190\n\n最后得到的图片是 32位 的 BMP，转换起来不方便，就用 XnViewMP 转换为 24位 的 BMP\n\n打开 XnViewMP ，选择要转换的图片，快捷键 ctrl+U 打开批量转换，在动作中选择 24位 进行转换，如图\n\n![](./../assets/examples/XnViewMP.png)\n\n然后就是将这些图片打包到 tf 卡，这里为了方便，修改了网上的一个开源项目 [bmp2hex](https://github.com/robertgallup/bmp2hex)，重新整理了一个工具，可以[点击下载](http://dl.sipeed.com/LONGAN/Nano/Firmware/badapple_demo_tools/tools_bmp2hex.zip)\n\n使用方法很简单，把下载的这个压缩包放到之前生成的图片集中，进行解压\n\n使用工具前需要确保所有图片的名字是 数字.bmp ，不是的话可以先运行一遍 rename.py 这个脚本，直接在命令行输入 `python rename.py` 即可\n\n根据自己图片总数修改 genhex.py 这个脚本的第4行中的数字，比如我有 2190张 图片，这里的数字就写 2190\n\n然后就运行这个脚本，在命令行输入 `python genhex.py`，时间可能比较久，需要耐心等待\n\n最后运行完毕后会生成一个 bmp.bin 文件，将这个文件放入到 tf 卡中即可\n\n### 读取图片\n\n最后的读取图片并显示其实很简单了，主要涉及到的就是文件操作，关于 fatfs 的 API [可以点击这里阅读](http://elm-chan.org/fsw/ff/doc/open.html)\n\n首先需要将 tf 卡挂载到文件系统，这里需要使用到 f_mount 这个函数\n\n```c\nfr = f_mount(&fs, \"\", 1);\n```\n\n挂载上后，就找到对应的文件然后打开，这里涉及到 f_open\n\n```c\nfr = f_open(&fil, \"bmp.bin\", FA_READ);\n```\n\n文件打开后，就可以读取图片信息并显示了，这里 160*80 尺寸的 16位真彩图片，一张有 25600 字节，longan 上的处理器无法直接创建一个这么大的数组，所以只能分两次进行读取，每次读取完进行一次偏移，最后通过循环读取总共的 2189 张图片，这里涉及到 f_read f_lseek\n\n```c\nfor (int i=0; i<2189;i++)\n{\n        fr = f_read(&fil, image, sizeof(image), &br);\n        LCD_ShowPicture(0,0,159,39);\n        offset += 12800;\n        f_lseek(&fil, offset);\n        LEDB_TOG;\n        fr = f_read(&fil, image, sizeof(image), &br);\n        LCD_ShowPicture(0,40,159,79);\n        offset += 12800;\n        f_lseek(&fil, offset);\n        LEDB_TOG;\n}\n```\n\n最后，本工程可以到 github 下载体验，[点击进行传送](https://github.com/sipeed/Longan_GD32VF_examples)"}, "/hardware/zh/longan/Zero/index.html": {"title": "", "content": "敬请期待"}, "/hardware/zh/maixIII/index.html": {"title": "", "content": "敬请期待"}, "/hardware/zh/maixII/M2/no_sd_flash.html": {"title": "无 SD 卡系统烧录方式", "content": "# 无 SD 卡系统烧录方式\n\n- **目前没有在V831上进行过flash系统烧录，V833可以使用一下方式进行烧录，镜像需要发送邮件获取**\n- 如需烧录到V831上，需要自行设计底板，引出fel烧录按键\n\n## 获取烧录工具\n\n- 从网上获取 PhoenixSuit(Windows) 烧录工具。\n  - [baidu-PhoenixSuit](https://www.baidu.com/s?wd=PhoenixSuit)\n  - [bing-PhoenixSuit](https://www.bing.com/search?q=PhoenixSuit&FORM=BESBTB&mkt=zh-CN) \n  - [github-PhoenixSuit](https://github.com/colorfulshark/PhoenixSuit)\n  - [lo4d-PhoenixSuit](https://phoenixsuit.en.lo4d.com/windows)\n\n## Windows 上使用 PhoenixSuit 烧录\n\n获取系统镜像（.img） 和烧录工具（.exe） 。解压到你知道的地方。\n\n![](./../img/no_sd_flash.png)\n\n解压后打开 PhoenixSuit_V1.10 烧录工具 PhoenixSuit.exe 选择烧录的 .img 镜像。\n\n![](./../img/no_sd_flash_1.png)\n\n这时候开始插入硬件， 同时按下硬件的两个按键， 其中一个是 fel 烧录模式的触发， 要注意接线头是否联通。 （若是裸板如右图所示先按 FEL 后按 RST 复位）\n\n![](./../img/no_sd_flash_2.png)\n\n按住后， 此时插入电脑的 USB 口， 相当于上电（RST 复位） 进入烧录模式， 务必注意先按键再通电， 之后需要安装相应的 USB 驱动。\n\n> 如果该电脑插入后设备管理器显示驱动未安装， 请手动指向 PhoenixSuit_V1.10 / Drivers 的驱动文件夹完成安装， 安装完成如下显示 Android ADB Interface ， 如果实在搞不定就使用市面上常见的驱动安装软件（如驱动精灵） 帮助安装。\n\n![](./../img/no_sd_flash_3.png)\n\n这时候 PhoenixSuit 软件会提示是否格式化更新， 一直选是即可， 不成功可以重试或检测接线是否牢固。\n\n![](./../img/no_sd_flash_4.png)\n\n进度状态如下， 直到成功。\n\n![](./../img/no_sd_flash_5.png)\n\n\n<a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>"}, "/hardware/zh/maixII/M2/resources.html": {"title": "Maix-II-Dock(M2dock) 介绍", "content": "---\ntitle: Maix-II-Dock(M2dock) 介绍\nkeywords: MaixII, MaixPy3, Python, Python3, M2dock\ndesc: 板级资源介绍\n---\n\nMaix-II-Dock 定位于高性价比的 AIOT 开发板， 支持常规 Linux 开发的同时， 有特有的 **AI 硬件加速** 特性，配合 Sipeed 提供的完整的软件生态，让你快速实现你的边缘 AI 应用。\n\n* **硬件**上， 基于全志 V831 芯片， 以【核心板】+【底板】的形式组成开发板，可以直接使用开发板，也可以只使用核心板根据需求自行设计底板，方便快速完成开发。\n* **软件**上， 除了可以直接使用全志提供的资料进行开发（部分可能需要找全志获取）外，Sipeed 提供了非常方便的 Python SDK（[MaixPy3](/maixpy3)）以及 C SDK （[libmaix](https://github.com/sipeed/libmaix)）；\n更是提供了在线模型训练服务（[MaixHub](https://maixhub.com)），方便刚入门也能快速训练能使用的 AI 模型。\n* **购买**：[sipeed.taobao.com](https://item.taobao.com/item.htm?id=635874427363)\n\n<p align=\"center\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=298543445&bvid=BV1sF411u7xb&cid=586467021&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n</p>\n\n## M2 核心板\n\n<img style=\"max-height: 260px\" src=\"./asserts/maix_v831.jpg\" alt=\"core_board\"/>\n\n> 核心板硬件资料下载 [Sipeed_Maix_II_3101](https://api.dl.sipeed.com/shareURL/MaixII/MaixII-Dock/HDK/Sipeed_MaixII_V831/Sipeed_Maix_II_3101)\n\n### V831 芯片介绍\n\n全志 V831, 单核 Cortex-A7 800MHz， 64MiB 片内 DDR2 内存， 高性价比能跑 Linux 的SOC，同时支持硬件 AI 加速（0.2Tops 算力），可以当成普通 Linux SOC 使用， 也可以用于边缘 AI 应用， 更详细的参数请看手册和下文。\n\n芯片手册： [V833／V831 Datasheet V1.0.pdf](https://linux-sunxi.org/images/b/b9/V833%EF%BC%8FV831_Datasheet_V1.0.pdf)\n\n内部结构图：\n\n<img style=\"max-height: 400px\" src=\"./asserts/V831_struct.png\" alt=\"V831 struct\"/>\n\n### M2核心板参数\n\n与 Maix-I 对比\n\n| 项目                         | Maix-I (K210)                        | Maix-II (V831)                                                                 |\n| ---------------------------- | ------------------------------------ | ------------------------------------------------------------------------------ |\n| 主控芯片<br> CPU             | 400~600Mhz                           | 800~1000Mhz                                                                    |\n| 视频编码器 <br>Video encoder | None                                 | H.264, up to 1080p@30fps<br>H265, up to 1080p@30fps<br>JPEG, up to 1080p@30fps |\n| AI加速器<br>NPU              | 0.23TOPS<br>support Conv+BN+ACT+POOL | 0.2TOPS<br>support Conv,Inner_Product,Pool,Eltwise,ACT,BN,Split,Concat         |\n| 内存<br>Memory               | 8MB SRAM                             | SIP 64MB DDR2                                                                  |\n| 存储<br>Storage              | 16MB SPI Nor Flash                   | 可选的16M flash(默认空贴)                                                      |\n| 摄像头<br>Camera             | DVP, 最高输入30W像素                 | 2lane MIPI, 最高支持1080P@60fps                                                |\n| 显示<br>Display              | 8bit MCU LCD                         | 8bit MCU LCD, 配转接板可接最大10寸RGB LCD                                      |\n| SDIO                         | None                                 | SMHC x2 (SDC0, SDC1)                                                           |\n| SPI                          | SPIx3                                | SPI x2 (SPI0, SPI1)                                                            |\n| I2C                          | I2C x3                               | I2C x4 (TWI0, TWI1, TWI2, TWI3)                                                |\n| I2S                          | 8bit I2S                             | I2S x1 (I2S0)                                                                  |\n| Ethernet                     | None                                 | 10/100 Mbit/s Ethernet port with RMII interface                                |\n| ADC                          | None                                 | 1-ch 6bit LRADC for key                                                        |\n| Audio                        | None                                 | LINEOUTP + MICIN1P/N                                                           |\n| 开发软件                     | Maixpy/C                             | MaixPy3/linux                                                                  |\n\n## 底板\n\n一般情况下可以认为底板屏幕为正面，带摄像头为背面。\n\n![m2dock](./../../../assets/maixII/m2dock.jpg)\n\n> 底板硬件资料下载 [点我跳转](https://api.dl.sipeed.com/shareURL/MaixII/MaixII-Dock/HDK/Sipeed_MaixII_Dock_V831)\n> 感谢热心网友分享的 [ M2 模块底板母座 PCB 封装](https://bbs.elecfans.com/jishu_2036119_1_1.html)\n\n### 底板硬件参数\n\n![Pin](./asserts/M2Dock_pin.jpg)\n\n| 标号 | Maix II 部件            | 功能                                       | 备注                                         |\n| ---- | ----------------------- | ------------------------------------------ | -------------------------------------------- |\n| 1    | M.2 B-KEY 母座*1        | 用于连接 V831 核心版                       | 出厂已连接                                   |\n| 2    | 核心板M2 铜柱螺母*1     | 用于配合 M2 螺丝固定 V831 核心板           | 出厂已固定                                   |\n| 3    | 电源指示 LED 灯*1       | 用于指示底板是否正常通电                   | ---                                          |\n| 4    | 状态指示 LED灯*1        | 用户可编程LED灯，一般用于状态指示          | ---                                          |\n| 5    | CPU 复位键*1            | 按下可重启 V831 芯片                       | ---                                          |\n| 6    | 用户按键*2              | 可以控制两路 IO 电平，自定义功能           | ---                                          |\n| 7    | Wi-Fi 模块*1            | 型号 RTL8189FTV，用于给模组提供 Wi-Fi 功能 | SDIO 接口                                    |\n| 8    | BTB 摄像头接口*1        | 用于连接 BTB 摄像头模块                    | 出厂已连接                                   |\n| 9    | 摄像头 M2 铜柱螺母*2    | 用于固定 BTB 摄像头                        | 出厂已固定                                   |\n| 10   | FHD 摄像头*1            | 默认SP2305 Sensor BTB形式，1080P           | 默认含6mm焦距M12镜头，用户可选配其他焦距镜头 |\n| 11   | USB 转 UART 芯片*1      | 提供串口通信功能                           | 出厂已烧录固件                               |\n| 12   | Type-C 接口(USB OTG) *1 | 用于 V831 的 USB OTG功能                   | 可用于模组供电                               |\n| 13   | Type-C 接口(UART) *1    | 用于对V831通常的串口调试                   | 可用于模组供电                               |\n| 14   | 三轴加速度传感器*1      | I2C接口，可提供3轴的加速度数据             | ---                                          |\n| 15   | microSD 卡槽*1          | 用于外接 microSD卡                         | 模组的系统默认从SD卡引导                     |\n| 16   | LCD 接口*1              | FPC0.5mm 24Pin，MCU 接口                   | ---                                          |\n| 17   | IPS 高清屏幕\\*1         | 1.3寸IPS屏幕，分辨率240\\*240               | 出厂已连接                                   |\n| 18   | IPEX Wi-Fi天线座        | IPEX(一代) Wi-Fi天线                       | ---                                          |\n| 19   | 外拓排母                | 引出 V831 的 通用IO口，可用于连接外设      | ---                                          |\n| 20   | 扬声器接口*1            | MX1.25 2P接口（间距1.25mm）                | ---                                          |\n| 21   | 扬声器*1                | 8Ω1W 1609复合铝膜扬声器                    | 出厂已连接                                   |\n| 22   | 麦克风*1                | 模拟驻极体麦克风                           | ---                                          |\n\n## 资源汇总\n\n硬件: [MaixII 硬件资料库](https://api.dl.sipeed.com/shareURL/MaixII/MaixII-Dock/HDK)\n\n软件：\n* Python SDK： [MaixPy3 软件文档](/maixpy3)\n* C SDK: [libmiax](https://github.com/sipeed/libmaix)\n* MaixHub 模型平台（AI 模型下载、在线训练、项目分享）： [MaixHub](https://maixhub.com)\n* 全志 tina-V83x SDK： [Tina-Linux/tina-V83x](https://github.com/Tina-Linux/tina-V83x)\n* 工具链： [dl.sipeed.com](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/SDK/Toolchain) 或者 [github](https://github.com/sipeed/libmaix/releases/download/v0.1.0/toolchain-sunxi-musl-pack-2021-01-09.tar.xz)\n\n## Maix-II-Dock 上手开发路线指南\n\n* 因为需要使用 linux 系统（tina-linx）， 所以需要先学习烧录系统镜像，就类似学会电脑重装系统一样，这样在遇到问题就可以重来，在左侧目录找到“烧录系统”文章查看\n<!-- 这里不给烧录系统的链接，让用户学会查看左边目录 -->\n* 学会基础的 Linux 操作，比如如何打开终端，基础的终端命令，以及如何传输文件到开发板等，比如 串口使用， adb 使用等等基础操作\n* 选择开发语言：\n  * 如果你熟悉 C 有一定的开发经验，可以选择使用[libmaix](https://github.com/sipeed/libmaix)\n  * 如果你希望快速上手，并使用 Python 语言开发， 请使用[MaixPy3](/maixpy3)，仔细阅读其文档即可\n* 如果需要使用 AI 功能，可以搭配 [MaixHub](https://maixhub.com) 在线训练平台使用，平台提供了 AI 模型或者项目分享功能，节约大家不少时间。"}, "/hardware/zh/maixII/M2/flash.html": {"title": "MaixII-Dock 烧录系统", "content": "---\ntitle: MaixII-Dock 烧录系统\nkeywords: MaixII, MaixPy3, Python, Python3, M2dock\ndesc: maixpy doc: MaixII M2dock 烧录系统\n---\n\n> 编辑时间2022.04.27\n\n| 文档更新时间 |    负责人    |        更新内容        |\n| :----------: | :----------: | :--------------------: |\n|  2021.03.20  |    大老鼠    | 新建文档，开始编写内容 |\n|  2021.12.8   | Rui & 点灯鼠 |   整理并更新烧录方式   |\n|   2022.3.8   |     Rui      |   修改烧录的注意事项   |\n\n注意事项！！！\n- 1、非必要的情况下，请不要随意镜像烧录。\n- 2、部分 AMD 平台的电脑存在无法烧录的情况\n- 3、不能保证所有的卡都可以成功的烧录镜像，所以建议用户直接购买官方的镜像卡\n\n## 获取镜像文件\n\n从下载站获取最新的 V831 系统镜像 [SDK_MaixII/release](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/SDK/release) ,得到一个压缩包，解压之后就得到一个 .img 文件，这个就是系统镜像文件\n\n> 如果下载站下载的很慢，建议使用百度网盘进行下载，下载站的下载带宽有限。链接：[点我](https://eyun.baidu.com/s/3htTXfaG#sharelink/path=%2F%E4%B8%8B%E8%BD%BD%E7%AB%99%E6%96%87%E4%BB%B6%2FMaixII%2FMaixII-Dock%2FSDK%2Frelease&parent_path=%2F%E6%B7%B1%E5%9C%B3%E7%9F%BD%E9%80%9F%E7%A7%91%E6%8A%80%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8)\n\n### 镜像文件命名方式\n\n对于 V831 的镜像文件名字是有对应的规则，以后大家可以根据自己的需求来进行下载\n\n就拿`v831-m2dock-maixhub-0.5.1-20220701.zip`和 ` v831-m2dock-maixpy3-0.5.1-20220701.zip` 这两个镜像文件来说\n\n| 名称          | 含义                                                                                                              |\n| ------------- | ----------------------------------------------------------------------------------------------------------------- |\n| maixpy3-0.5.1 | 此镜像是给 [MaixPy3](https://wiki.sipeed.com/maixpy3) 专用，并内置了`0.5.1`的版本，但其中 **无** 内置 maixhub app |\n| maixhub-0.5.1 | 此镜像是给 [MaixPy3](https://wiki.sipeed.com/maixpy3) 专用，并内置了`0.5.1`的版本，但其中 内置 maixhub app        |\n| m2dock        | 可使用 MaixII-Dock 开发板平台                                                                                     |\n| 20220701      | 镜像更新日期                                                                                                      |\n\n## Windows 上使用 PhoenixCard 烧录镜像\n\nPhoenixSuit 和 PhoenixCard 是常用来烧录全志科技芯片的两种工具，前者通过 USB 烧录到 flash，后者常常用于烧录镜像到 TF 卡中。\n\n### 准备工作\n\n1. 烧录工具 [PhoenixCard](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/SDK/tools)\n\n2. 系统 [镜像](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/SDK/release)\n\n3. 内存卡格式化工具 [SD Card Formatter](https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip)\n\n### 系统烧录\n\n1. 将内存卡通过读卡器接到电脑的 USB 口，打开 SD Card Formatter 软件，对内存卡进行格式化。Refresh（刷新）后点击Format（格式化），注意应正确选择选目标SD卡。\n\n     ![image-20210802102810041](./../../../assets/maixII/V831/image-20210802102810041.png)\n\n2. 打开PhoenixCard\n     - 选择 `启动卡` 选项\n     - 选择正确的盘符\n     - 点击 `烧卡`\n     - 根据状态栏的颜色可以判断烧录结果：红色的话说明烧录失败了，建议使用[SD card Formatter](https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip)格式化后再重新烧录一次；绿色表示则一切正常。\n\n   ![image-20210802104155132](./../../../assets/maixII/V831/image-20210802104155132.png)\n\n## Linux(Ubuntu) 使用 Livesuit 烧录\n\n### 安装烧录工具 Livesuit \n\n> **每次更新系统 linux kernel 之后需要重新安装软件**\n\n1. 安装依赖 dkms\n\n     ```shell\n     sudo apt install dkms\n     ```\n\n1. 安装 libpng1.2（一定要使用这个版本）\n\n     ```shell\n     wget http://archive.ubuntu.com/ubuntu/pool/main/libp/libpng/libpng_1.2.54.orig.tar.xz\n     tar xvf  libpng_1.2.54.orig.tar.xz\n     ```\n\n     ```shell\n     cd libpng-1.2.54\n     ./autogen.sh\n     ./configure\n     make -j8\n     sudo make install\n     ```\n\n     更新链接库:\n\n     ```shell\n     sudo ldconfig\n     ```\n\n1. 安装 **livesuit**\n\n     ```shell\n     git clone https://github.com/linux-sunxi/sunxi-livesuite.git\n     cd sunxi-livesuite\n     chmod +x LiveSuit.sh\n     sudo ./LiveSuit.sh\n     ```\n\n### 使用 Livesuit 烧录\n\n`sudo livesuit` 打开烧录工具，并点击“固件”选择镜像文件\n\n![](./asserts/flash_15.png)\n\n不插入 SD 卡，将 V831 USB OTG 接口连接到 PC, 提示是否格式化分区，这时候插入 SD 卡，之后点击 `YES`\n\n![](./asserts/flash_17.png)\n\n等待烧录完成，提示“固件升级成功”，即可断开 USB ，至此固件烧录完毕\n\n![](./asserts/flash_19.png)\n\n![](./asserts/flash_21.png)\n\n\n## 附录\n### 烧录系统到 flash 中\n\n[烧录方式](./no_sd_flash.html)\n\n### 无读卡器烧录方式\n\n[烧录方式](./PhoenixSuit.html)\n\n### 使用 dd 烧录\n\n官方没有做 MaixII-Dock 的 dd 镜像相关支持，有需要的可以自行去学习如何制作 dd 镜像的[制作](https://www.cnblogs.com/USTHzhanglu/p/15431249.html)。"}, "/hardware/zh/maixII/M2/usage.html": {"title": "进阶使用", "content": "---\ntitle: 进阶使用\nkeywords: MaixII, MaixPy3, Python, Python3, M2dock, Tina, Openwrt\ndesc: maixpy doc: MaixII M2dock 上手使用\n---\n\n> 没有 Linux 系统使用基础的同学，不推荐以下的使用方式\n\n## 认识 openwrt 系统\n\n> 全志 V831 使用 Tina Linux 系统，移植自 [OpenWrt](https://openwrt.org) 。\n\nOpenWrt 可以被描述为一个嵌入式的 Linux 发行版，详情可看 [官方网址](https://openwrt.org) 和 [官方开源仓库](https://github.com/openwrt/openwrt)。\n\nOpenWRT 是一个高度模块化、高度自动化的嵌入式 Linux 系统，拥有强大的网络组件和扩展性，常常被用于工控设备、电话、小型机器人、智能家居、路由器以及 VOIP 设备中。 同时，它还提供了 100 多个已编译好的软件，而且数量还在不断增加，而 OpenWrt SDK 更简化了开发软件的工序。\n\nV831 tina 系统支持使用 adb 来操作系统。需要将主机于板子的OTG标识的接口相连。\n\n---\n- Windows 系统需要先下载最新的 adb 然后将其解压并添加到系统路径，接着就可以在命令行中使用 adb shell 连接上 v831.\n- 对于 linux 直接安装 adb 即可，然后在终端执行 adb shell 连接 V831\n---\n\n## 部分常用 Linux 命令\n\n<details>\n  <summary>点击查看部分常用命令</summary>\n   <pre>\nls 查看目录下文件\ncd 打开目录\npwd 打印当前目录\nmv 移动/重命名 文件/文件夹\ncp 复制 文件/文件夹\nrm 删除\nvi 编辑文件内容 #需要使用特定的adb版本能正常显示内容\ntop 查看系统内存\ndf 查看磁盘信息\ntime 查看时间\nifconfig 查看网络信息\nfree 查看剩余内存\nps 查看运行的进程\nkill 终止进程\nkillall 终止所有进程\nchmod 更改 文件/文件夹 权限\npasswd 设置/更改 用户密码\ncat 查看文件内容\nping 检测某网址是否连通\nwget 下载某链接文件\ngrep 搜索文件内容\nln 建立文件链接\n</pre>\n</details>\n\n### Opkg 包管理器\n\nOpkg 是一个轻量快速的套件管理系统，目前已成为 Opensource 界嵌入式系统标准。常用于 路由、 交换机等 嵌入式设备中，用来管理软件包的安装升级与下载。\n\n#### 相关常用命令\n\n- opkg update 更新可以获取的软件包列表\n- opkg upgrade 对已经安装的软件包升级\n- opkg list 获取软件列表\n- opkg install 安装指定的软件包\n- opkg remove 卸载已经安装的指定的软件包\n  \n例如：\n\n```bash\nroot@sipeed:/# opkg list \nMaixPy3 - 0.2.5-1\nalsa-lib - 1.1.4.1-1\nbusybox - 1.27.2-3\nbusybox-init-base-files - 167-1612350358\nca-certificates - 20160104\ncurl - 7.54.1-1\ndropbear - 2015.71-2\ne2fsprogs - 1.42.12-1\neyesee-mpp-external - 1.0-1\neyesee-mpp-middleware - 1.0-1\neyesee-mpp-system - 1.0-1\n```\n\n### pip 包管理器\n\n[pip](https://pypi.org/project/pip/) 是 Python 包管理工具，该工具提供了对 Python 包的查找、下载、安装、卸载的功能。\n\n> 以下讯息由[YanxingLiu](https://github.com/YanxingLiu)提供与测试。\n\n#### pip换源\n\n在安装系统后可以更换镜像源，加速 pip 安装。\n\n#### 临时使用\n\n```python\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package\n```\n\nsome-package 请自行更换成你想要安装的包\n\n#### 设为默认\n\n升级 pip 到最新的版本 (>=10.0.0) 后进行配置：\n\n```python\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U\n```\n\n设置清华镜像源为默认：\n\n```python\npip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n## 测试屏幕方法\n\n- 请测试前观察系统上电后屏幕是否会闪烁一次；这表示屏幕已经通电、驱动起来，并对其复位（RST）后产生的。\n\n在 Linux Shell 运行 `cat /dev/urandom > /dev/fb0` 就会输入随机数据到 fb0 产生雪花屏了，这表示屏幕显示是正常的。\n\n<center><img src=\"./asserts/lcd_test.jpg\" width=\"400\"></center>\n\n<details>\n  <summary>帧缓冲相关知识</summary>\n   帧缓冲（framebuffer）是 Linux 为显示设备提供的一个接口，把显存抽象后的一种设备。\n   它允许上层应用程序在图形模式下直接对显示缓冲区进行 读写操作。framebuffer 是 LCD 对应的一种 HAL（硬件抽象层），提供抽象的，统一的接口操作，用户不必关心硬件层是怎么实施的。这些都是由 Framebuffer 设备驱动来完成的。帧缓冲设备对应的设备文件为 /dev/fb*，如果系统有多个显示卡，Linux下还可支持多个帧缓冲设备，最多可达 32 个，分别为 /dev/fb0 到 /dev/fb31，而 /dev/fb 则为当前缺省的帧缓冲设备，通常指向 /dev/fb0，在嵌入式系统中支持一个显示设备就够了。帧缓冲设备为标准字 符设备，主设备号为 29 ，次设备号则从 0 到 31 。分别对应 /dev/fb0-/dev/fb31 。\n</details>\n\n## 运行 Python3 解释器\n\n在 Linux 上使用 Python 编程只需要在 adb shell 命令行交互的接口输入 python3 即可启动，可直接复制代码粘贴后按回车键运行。\n\n```python\nimport platform\nprint(platform.uname())\n```\n\n2022年7月6日 实际操作结果：\n\n```bash\n   __   _\n  / /  (_)__  __ ____ __ ------------------------\n / /__/ / _ \\/ // /\\ \\ /  sipeed.com (Neptune)\n/____/_/_//_/\\_,_//_\\_\\  ------------------------\n\nroot@sipeed:/# python3\nPython 3.8.5 (default, Jun 14 2022, 09:51:56)\n[GCC 6.4.1] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import platform\n>>> print(platform.uname())\nuname_result(system='Linux', node='sipeed', release='4.9.118', version='#3242 PREEMPT Tue Jun 28 04:03:38 UTC 2022', \nmachine='armv7l', processor='')\n```\n\n## 测试拍照功能\n\n这里我们使用 [MaixPy3](/maixpy3) 来测试一下摄像头，先以交互模式启动一下 Python,\n\n```python\nfrom maix import camera, display, image \ndisplay.show(camera.capture())\n```\n\n<center><img src=\"./asserts/hello_world.jpg\" width=\"500\"></center>\n\n> 如果屏幕没有显示内容。那么首先确认一下镜像镜像版本，并且确认一下外设和驱动对的上\n\n## 工具链\n\n[这里](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/SDK/Toolchain)提供了在 linux 系统下的编译工具链，有能力的可以自己试一下。无相关支持\n\n建议使用 [MaixPy3](/soft/maixpy3/zh/index.html) 来操作设备\n\n## MaixPy3\n\n本设备建议使用 [MaixPy3](/soft/maixpy3/zh/index.html) 来进行相应的快速开发，相关文档请仔细阅读\n\n## 源码\n\nV831 的源码已经放在  https://github.com/Tina-Linux/tina-V83x ，有需要的可以自行尝试一下"}, "/hardware/zh/maixII/M2/PhoenixSuit.html": {"title": "MaixII M2dock 烧录系统", "content": "---\ntitle: MaixII M2dock 烧录系统\nkeywords: MaixII, MaixPy3, Python, Python3, M2dock\ndesc: maixpy doc: MaixII M2dock 烧录系统\n---\n\n> ！！！一定要严格按照步骤操作！！！请使用大于 1G 的 TF/SD 卡进行烧录，开源版本要求使用 TF/SD 卡来启动系统。\n\nV831 为全志的 SOC， 所以 Windwos 使用 **PhoenixSuit**, Linux 上使用 **Livesuit** 烧录镜像文件。\n\n- 从下载站获取最新的 V831 系统镜像 [SDK_MaixII/release](http://dl.sipeed.com/shareURL/MAIX/SDK_MaixII/release) ，找不到就搜索 V831 获取最新的镜像。\n\n- 解压 V831 镜像压缩包，得到一个 xxxx.img 文件。\n\n- 从网上获取 PhoenixSuit(Windows) 烧录工具。\n  - [baidu-PhoenixSuit](https://www.baidu.com/s?wd=PhoenixSuit)\n  - [bing-PhoenixSuit](https://www.bing.com/search?q=PhoenixSuit&FORM=BESBTB&mkt=zh-CN) \n  - [github-PhoenixSuit](https://github.com/colorfulshark/PhoenixSuit)\n  - [lo4d-PhoenixSuit](https://phoenixsuit.en.lo4d.com/windows)\n\n## Windows 上使用 PhoenixSuit 烧录\n\n解压 PhoenixSuit(Windows) 工具压缩包，不插入 SD 卡，将 V831 USB OTG 接口连接到 PC，打开设备管理器，安装驱动文件\n\n![](./asserts/flash_01.png)\n\n![](./asserts/flash_03.png)\n\n打开烧录软件,  并浏览打开镜像文件\n\n![](./asserts/flash_05.png)\n\n重新插拔板子（上电不插入 SD 卡），软件提示是否要清空烧录，提示是否需要升级，点击 `YES` \n\n![](./asserts/flash_07.png)\n\n插入 sd 卡，提示是否强制格式化，再次点击 `YES`开始烧录（大约 40S）\n\n![](./asserts/flash_09.png)\n\n可能需要等待几秒才会更新状态，然后等待提示“固件升级成功”，即可断开 USB ，至此固件烧录完毕\n\n![](./asserts/flash_11.png)\n\n![](./asserts/flash_13.png)"}, "/hardware/zh/maixII/M2/tools/adb.html": {"title": "adb 操作介绍", "content": "# adb 操作介绍\n\n\n\nADB.exe 在 MaixPy3 IDE 中的 maixpy3_examples 和 PhoenixSuit 文件夹下\n\n## 链接开发板\n将开发板上的 OTG 接口接上电脑， 然后再命令行中输入 adb shell，会自动进入到开发板的 linux 系统中\n\n```shell\nBusyBox v1.27.2 () built-in shell (ash)\n\n------run profile file-----\n   __  ___     _        __   _\n  /  |/  /__ _(_)_ __  / /  (_)__  __ ____ __\n / /|_/ / _ `/ /\\ \\ / / /__/ / _ \\/ // /\\ \\ /\n/_/  /_/\\_,_/_//_\\_\\ /____/_/_//_/\\_,_//_\\_\\\n ----------------------------------------------\nroot@sipeed:/#\n```\n\n这时可以开始使用 MaixPy3 进行开发了"}, "/hardware/zh/maixII/M2/tools/mobaxterm.html": {"title": "如何使用 mobaxterm ", "content": "---\ntitle: 如何使用 mobaxterm \nkeywords: Jupyter, MaixPy3, Python, Python3\ndesc: maixpy doc: 如何使用 mobaxterm \n---\n\n## mobaxterm 是什么？\n\n这是在 Windows 下使用的全能终端管理软件，对开发与运维人员必备，可以在 [mobaxterm.mobatek.net/download](https://mobaxterm.mobatek.net/download.html) 获取免费版本使用，在国内网站上有中文版。\n\n![](https://mobaxterm.mobatek.net/img/moba/features/feature-terminal.png)\n\n主要通过它提供的下列功能：\n\n- serial 通过串口连接 Linux 系统的终端\n- ssh 远程登录 Linux 系统的终端\n- ftp 远程访问文件服务上的资源\n\n## 连接 串口(Serial)\n\n开源硬件产品大多都会预留串口（Serial）用作 Linux 系统的终端交互接口，下面介绍串口【session】的创建。\n\n![](./asserts/mobaxterm-serial-4.png)\n\n在「session setting」 对话框里选择【serial】，再选好串口号及波特率，点击【OK】就完成连接了。\n\n![](./asserts/mobaxterm-serial-5.png)\n\n同样【session】会保存在左侧的【session】标签页里，方便下次连接。\n\n## 连接 SSH\n\n除了有线串口的方式，还可以通过无线访问 SSH 登录 Linux 系统。\n\n在板子终端输入 `hostname -I` 查看自己 ip 地址 (先连上网)，然后输入自己用户名和密码。\n\n```bash\nroot@maixsense:~# hostname -I\n192.168.0.197\n```\n\n然后我们就可以来新建SSH会话然后远程登录到板子了\n\n- 新建SSH会话\n\n![](./asserts/mobaxterm_ssh.jpg)\n\n- 登录到板子终端\n\n![](./asserts/mobaxterm_ssh_login.png)\n\n> 输入密码的时候是看不到的（没有输入显示），在输入结束之后，按回车即可\n\n就可以看到 Linux 的登录会话终端了。\n\n传输文件的时候可以直接把文件拖入或者拉出下图的左红框中。\n\n![](./asserts/mobaxterm_ssh_view.jpg)\n\n## 连接 FTP\n\n与 SSH 同理。\n\n![](./asserts/mobaxterm_ftp.png)\n\n进入后就可以看到文件夹了。\n\n![](./asserts/mobaxterm_ftp.jpg)\n\n可以拖拽文件上传和下载。\n\n![](./asserts/mobaxterm_ftp_ud.png)\n\n<a href=\"#\" onClick=\"javascript :history.back(-1);\">返回上一页(Back)</a>"}, "/hardware/zh/maixII/M2/tools/vscode.html": {"title": "如何使用 vscode ", "content": "---\ntitle: 如何使用 vscode \nkeywords: vscode, MaixPy3, Python, Python3\ndesc: maixpy doc: 如何使用 vscode \n---\n\n## 前言\n\n它是微软出品的一款可扩展的轻量级开源编辑器，并且支持全平台系统。这些特性使得 VSCode 颇受欢迎，这也使其成为了一个很棒的 Python 开发平台。\n\n关于如何安装和使用它的教程已经数不胜数，这里只推荐[【用 VSCode 愉快地写 Python 代码】](https://zhuanlan.zhihu.com/p/66157046)。\n\n## 为什么要使用它？\n\n除了专业 Python 代码开发环境，它还支持打开 jupyter notebook 文档运行代码。\n\n与浏览器运行的 jupyter notebook 一样，执行 Python 代码的时候要选择对应的执行核心，如 [ipython/ipykernel](https://github.com/ipython/ipykernel) 或者 [rpyc_ikernel](https://github.com/sipeed/rpyc_ikernel) 的核心。\n\n下面就来说说如何使用它。\n\n### 创建 notebook 文档\n\n![](https://tukuimg.bdstatic.com/scrop/abb1e4146fb8679109fa99aa0b03f59f.gif)\n\n### 运行 Python 代码\n\n![](https://tukuimg.bdstatic.com/scrop/a1e2381bfac1a332a323774ee1b49c9f.gif)\n\n### 运行后预览图表\n\n![](https://tukuimg.bdstatic.com/scrop/9c5bf21507c776f98d55bcfc0e51c5ff.gif)\n\n## 你可以学到什么？\n\n在 VS Code 中使用 Jupyter 笔记本时需要进行的基本操作。如果您使用 VS Code 来满足其他开发需求，那么在 VS Code 中尝试使用 Jupyter Notebook 是非常方便的，这样您就可以只使用一个 IDE。特别是其代码自动补齐的功能可以让你的开发更快捷。\n\n> 需要注意的是，截止 2021年3月3日 在 VSCODE 里的 jupyter notebook 文档进行中断存在一些问题，并不是很流畅，如果出现了运行无响应的问题可以重新打开文档解决问题。"}, "/hardware/zh/maixII/M2/tools/pyqt_rtsp.html": {"title": "如何使用 pyqt_rtsp ", "content": "---\ntitle: 如何使用 pyqt_rtsp \nkeywords: pyqt_rtsp, MaixPy3, Python, Python3\ndesc: maixpy doc: 如何使用 pyqt_rtsp \n---\n\n> 这是一个图传客户端工具，脱离 jupyter 的编程环境，使用的时候只需要在电脑上安装好就可以链接到硬件中获取图传信息。\n\n![](./asserts/pyqt_rtsp.png)\n\n这个工具是通过 Python 实现的 rtsp + rtp 流媒体服务，支持文件、图像、显示器、摄像头的图像传输，适用于支持 Python3 的系统。\n\n## 安装方法\n\n首先知道它是一个 C/S 结构图传客户端，你需要在某个硬件上安装 maixpy3 和启动服务，与之对应的客户端访问该硬件获取它的流媒体，这个硬件可以是你的嵌入式 linux 设备，也可以是你的 linux 计算机。\n\n### 服务端配置过程\n\n在 linux 设备上安装 maixpy3 执行 maixpy3_rpycs 即可启动作为服务端。\n\n```bash\n(venv) $ pip3 install maixpy3\n(venv) $ maixpy3_rpycs\n```\n\n### 客户端配置过程\n\n接着要在其他电脑上通过 Python 安装 [rtsp_pyqt](https://github.com/sipeed/MaixPy3/tree/main/examples/rtsp_pyqt) 客户端工具。\n\n```bash\n(venv) $ pip3 install -r requirements.txt\n(venv) $ python3 mainLogic.py\n```\n\n### 使用方法\n\n运行后可见下图，然后输入 IP （如：192.168.0.127）进行链接：\n\n![](./asserts/pyqt_rtsp_login.png)\n\n按下【setup】链接到目标设备自动获取摄像头流，支持播放、暂停等操作，拍照和录像自动保存到目录下的文件夹。\n\n## 多余的讯息\n\n> 如 IP 可以这样获取，我只是想炫耀一下我的拼装技术，逃~\n\n![](./asserts/rtsp_get_ip.jpg)"}, "/hardware/zh/maixII/M2/introduce.html": {"title": "芯片平台介绍", "content": "---\ntitle: 芯片平台介绍\nkeywords: MaixII, MaixPy3, Python, Python3, M2dock\ndesc: maixpy doc: 芯片平台介绍\n---\n\nV831 芯片介绍\n\n从 2019 年至今的时间，可以开始看到几个相机 SoC 与一个内置的转专业或 SIMD 指令加快人脸检测、物体检测等等，从低分辨率 Kendryte K210 处理器 2.5 k Ingenic T31 MIPS 视频处理器，甚至 4k 能力 iCatch V37 相机 SoC 。 Allwinner 过去推出了几个摄像头处理器(V3， V316， S3…)，但没有一个包含 NPU (又名 AI 加速器)。现在这已经改变了，Allwinner V831 Cortex-A7 全高清摄像头 SoC 还包括一个小的 200 GOPS NPU 。\n\n> 取自 [allwinner-v831-ai-full-hd-camera-soc-powers-sochip-v831-development-board](https://www.cnx-software.com/2020/04/28/allwinner-v831-ai-full-hd-camera-soc-powers-sochip-v831-development-board/)\n\n## v831 Chip\n\n![V831_struct.png](./asserts/V831_struct.png)\n\n## 参数表\n\n| 项目            | 参数                                                                               | 备注                                  |\n| ------------- | -------------------------------------------------------------------------------- | ----------------------------------- |\n| CPU           | 最高 800Mhz                                                                        |                                     |\n| Video encoder | H.264, up to 1080p@30fps</br>H265, up to 1080p@30fps</br>JPEG, up to 1080p@30fps | ---                                 |\n| NPU           | 0.2T                                                                             | ---                                 |\n| EISE          | Up to 1080p@30fps                                                                | ---                                 |\n| SDRAM         | SIP 64MB DDR2                                                                    | SIP封装（System In a Package系统级封装）     |\n| SMHC          | SMHC x2 (SDC0, SDC1)                                                             | 主机控制器（SMHC）接口；物理层规范V2.0，SDIO卡规范V2.0 |\n| SPI           | SPI x2 (SPI0, SPI1)                                                              | ---                                 |\n| LCD           | Serial RGB, i8080                                                                | ---                                 |\n| DSPO          | BT656                                                                            | ---                                 |\n| I2S           | I2S x1 (I2S0)                                                                    | ---                                 |\n| Parallel CSI  | No support                                                                       | ---                                 |\n| Ethernet      | 10/100 Mbit/s Ethernet port with RMII                                            |                                     |\n| TWI           | TWI x4 (TWI0, TWI1, TWI2, TWI3)                                                  | ---                                 |\n| RSB           | No support                                                                       | ---                                 |\n| GPADC         | 1-ch                                                                             | ---                                 |\n| Audio codec   | Output: LINEOUTP</br>Input: MICIN1P/N                                            | ---                                 |\n| MIPI CSI      | 2-lane, up to 1080p@60fps                                                        | ---                                 |\n| MIPI DSI      | No support                                                                       | ---                                 |\n| Package       | QFN88                                                                            | ---                                 |\n\n[V833／V831 Datasheet V1.0.pdf](https://linux-sunxi.org/images/b/b9/V833%EF%BC%8FV831_Datasheet_V1.0.pdf)\n\n## 产品技术支持\n\nM2dock开发板可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务。"}, "/hardware/zh/maixII/M2/other.html": {"title": "其他事项", "content": "---\ntitle: 其他事项\nkeywords: MaixII, MaixPy3, Python, Python3, M2dock\ndesc: maixpy doc: 其他事项\n---\n\n> 编辑于 2022年8月23日\n\n这里讲述 V831 开发板的一些额外使用事项和相关解决方法\n\n以下替换设备相关操作完成后，名称为 Maixhub 的镜像里的 app 应用不再可用\n\n## 切换屏幕\n\n目前开发板支持的屏幕有 1.3寸、2.4寸、2.8寸 的 IPS 屏，且只是支持在[我们淘宝](https://sipeed.taobao.com/)上售卖的显示屏；对于别的屏幕有需求的，可以走商务通道进行定制。\n\n### 准备\n\n- 需要切换的屏幕与对应的转接板\n- 开发板\n- 最新[系统镜像](./flash.html)\n\n### 屏幕连接\n\n开发板可以直接与 1.3寸 屏幕连接，但是与 2.4寸 或 2.8寸 屏幕连接的话需要使用转接板\n\n转接板上的接口一个 1 的标识符，是来确保不被反插的。屏幕排线上的 1 要和转接板、开发板的上 1 相位置对应。\n\n屏幕标识的 1 如下所示\n\n<html>\n    <img src=\"./asserts/other/1.3.png\" width=45%>\n    <img src=\"./asserts/other/2.4.jpg\" width=45%>\n<style>\n</html>\n\n转接板上面的 1 如下所示\n\n<img src=\"./asserts/other/change.jpg\" width=600>\n\n板子上的 1 如下所示\n\n<img src=\"./asserts/other/V831.jpg\" width=600>\n\n具体接线参考下面两张图\n\n<html>\n    <img src=\"./asserts/other/not-connected.jpg\" width=45%>\n    <img src=\"./asserts/other/connected.jpg\" width=45%>\n</html>\n\n### 切换设备树\n\n- update_dtb 程序是给 Allwinner tina linux 专门写的应用。\n- 编译好的设备树文件，可以在[下载站](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/SDK/Toolchain)中进行下载\n\n该设备树文件是通过内核编译出来的，不推荐个人用户自行编译。设备树文件命名规则如下：\n\n| 文件名字 | 可用屏幕 | 可用摄像头 |\n| :----: | :----: | :---: |\n| sipeed_2.8_240x320_vs3205.dtb | 2.8寸 | vs3205 |\n| sipeed_2.8_240x320_sp2305.dtb | 2.8寸 | sp2305 |\n| sipeed_2.4_240x320_vs3205.dtb | 2.4寸 | vs3205 |\n| sipeed_2.4_240x320_sp2305.dtb | 2.4寸 | sp2305 |\n| sipeed_1.3_240x240_vs3205.dtb | 1.3寸 | vs3205 |\n| sipeed_1.3_240x240_sp2305.dtb | 1.3寸 | sp2305 |\n\n将设备树文件存放到开发板中在电脑中显示的虚拟U盘中。\n接着在 adb 终端里面执行下面命令\n\n```bash\nsync  #刷新一下文件\nupdate_dtb /dev/mmcblk0 /root/sipeed_240x240_vs3205.dtb\nreboot #重启设备来更新配置\n```\n\n即可切换设备树。\n\n- 如果发现屏幕显示效果不对 说明选错了对应的设备树文件。重新换成正确的设备树即可\n\n这里贴一张正常显示的图样\n\n![](./asserts/show.jpg)\n\n## 更换摄像头\n\n目前 MaixII-Dock 开发板目前支持的摄像头有 sp2305 和 vs3205 （只支持官方店上再售卖的这两款摄像头，有别的摄像头需求可以进行商务定制），摄像头之间的切换同样时需要更换设备树文件，更换方式上面的更换屏幕一样的。\n\n### 准备\n\n- 需要切换的摄像头模块\n- 开发板\n- 最新的[系统镜像](./flash.html)\n- 编译好的设备树文件，可以在[下载站](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/SDK/Toolchain)中进行下载\n\n### 连接摄像头\n\n> **注意的是要摄像头的接法，不要把摄像头给接反了，摄像头的底板上有一个白点，开发板卡上也有一个白点，这两个白点要在同一边。如果接反了，摄像头烧毁了请自行再买一个吧**\n\n<html>\n<div class=\"imbox\">\n    <img src=\"./asserts/other/camera_outlook_1.jpg\" width=350 alt=\"camera top\">\n    <img src=\"./asserts/other/camera_outlook_2.jpg\" width=350 alt=\"camera bottom\">\n</div>\n</html>\n\n### 切换设备树\n\n> update_dtb 程序是给 Allwinner tina linux 专门写的小工具。\n\n将设备树文件存放到开发板中在电脑中显示的虚拟U盘中。\n接着在 adb 终端里面执行下面命令\n\n```bash\nsync  #刷新一下文件\nupdate_dtb /dev/mmcblk0 /root/sipeed_240x240_vs3205.dtb\nreboot #重启设备来更新配置\n```\n\n即可切换设备树，该设备树文件是通过内核编译出来的，不推荐个人用户自行编译\n\n| 文件名字 | 可用屏幕 | 可用摄像头 |\n| :----: | :----: | :---: |\n| sipeed_2.8_240x320_vs3205.dtb | 2.8寸 | vs3205 |\n| sipeed_2.8_240x320_sp2305.dtb | 2.8寸 | sp2305 |\n| sipeed_2.4_240x320_vs3205.dtb | 2.4寸 | vs3205 |\n| sipeed_2.4_240x320_sp2305.dtb | 2.4寸 | sp2305 |\n| sipeed_1.3_240x240_vs3205.dtb | 1.3寸 | vs3205 |\n| sipeed_1.3_240x240_sp2305.dtb | 1.3寸 | sp2305 |\n| sipeed_1.3_240x240_ov2685.dtb | 1.3寸 | ov2685 |\n\n## 编译链\n\n在[下载站](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/SDK/Toolchain)里有一个名为 `toolchain-sunxi-musl-pack-2021-01-09.tar.xz` 的文件，这是在 Linux 系统下为 V831 所使用的编译链。\n\n有需求的可以自行尝试，但是对于 V831 还是推荐使用 MaixPy3 和 Maixhub。"}, "/hardware/zh/maixII/index.html": {"title": "Maix-II 系列硬件产品", "content": "Maix-II 系列硬件产品\n===\n\n## Maix-II 简介\n\n继经典的 K210 Maix-I 系列 AIOT 板卡之后，Sipeed 继续推出多款可运行完整 Linux 系统的边缘计算板卡，将以 MAIX-II，MAIX-III 按照性能依次命名。\n\nMAIX-II 系列包含多款硬件产品，目前有:\n* **Maix-II Dock**： **本系列推荐产品**, 芯片为全志 V831, 高性价比能跑 Linux 的SOC，同时支持硬件 AI 加速（0.2Tops 算力），目前软件支持最容易入门，提供 C SDK 和 Python SDK， 以及在线模型训练服务([MaixHub](https://maixhub.com))\n* **MaixSense**： 芯片为全志R329，也有提供硬件 AI 加速，0.25Tops 算力。\n* **Maix-II-S**：芯片为全志 V833，V831 升级版， 主要用于商业定制用途，个人用户慎重选择。\n\n## MaixII Dock\n\n芯片为全志 V831, 单核 Cortex-A7 800MHz， 64MiB 片内 DDR2 内存， 高性价比能跑 Linux 的SOC，同时支持硬件 AI 加速（0.2Tops 算力），可以当成普通 Linux SOC 使用， 也可以用于边缘 AI 应用。\n\n**本系列推荐产品**, 最具性价比， 目前软件支持最容易入门， 支持 C 语言开发，提供 C SDK([libmaix](http://github.com/sipeed/libmaix))； 同时提供 [MaixPy3](/maixpy3) 支持，使用 Python 语言即可开发，可以直接使用大量 Python 库，并且配套 jupyter IDE， 同时 [MaixHub](https://maixhub.com) 完全支持此设备\n\n* 产品功能速览\n\n<p align=\"center\">\n    <iframe src=\"//player.bilibili.com/player.html?aid=298543445&bvid=BV1sF411u7xb&cid=586467021&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n</p>\n\n* 实拍图：\n![m2dock](../../assets/maixII/m2dock.jpg)\n* 购买链接: [sipeed.taobao.com](https://item.taobao.com/item.htm?ft=t&id=635874427363)\n* 详情： [MaixII-Dock](./M2/resources.html)\n\n## MaixSense\n\n芯片为全志 R329，双核 A53@1.5GHz，片内 256MiB DDR3 内存，双核 HiFi4@400MHz 也有提供硬件 AI 加速，0.25Tops 算力， 更加擅长音频领域， 支持 armbian 系统。\n\n官方开放资料很多，目前比较适合动手能力比较强的开发者。\n\n![](./M2A/assets/M2A-1.gif)\n\n* 购买链接: [sipeed.taobao.com](https://sipeed.taobao.com)\n* 详情： [MaixSense](./M2A/maixsense.html)\n\n\n## MaixII S\n\n可以理解成 V831 的性能升级版， V831 上的程序可以直接在 V833 上运行，此开发板仅支持商业用户，个人用户建议选择 Maix-II-Dock 开发板\n\n<img style=\"max-height: 300px\" src=\"./M2S/assets/M2s_Dock.jpg\" alt=“M2s_Dock”/>\n\n* 详情： [MaixII S](./M2S/V833.html)"}, "/hardware/zh/maixII/M2S/reources.html": {"title": "M2S介绍", "content": "# M2S介绍\n\nMaixII S是基于 V833 芯片设计的一款【板卡】+【底板】的开发板产品。\n\n## 板卡\n![](./assets/M2s_Dock.jpg)\n\n> 资料[下载](https://dl.sipeed.com/shareURL/MaixII/MaixII-A)\n\n### 参数\n| 项目 | 参数 | \n| --- | --- |\n| CPU | 全志 V833 Arm-Cortex-A7 1.2Ghz 主频 |\n| NPU | 0.4TOPS 算力|\n|内存 |标配单片 16bit 128MB DDR3（可选最大 16bit 512MB DDR3）|\n|存储|核心板板载 128MB SD NAND（可选 512MB 和 4GB）底板板载 TF 卡座子，可扩展存储|\n|摄像头接口|MIPI：标配 200W 像素可见光摄像头(可选配宽动态摄像头)，76 度视场角<br>DVP：标配 30W 像素红外摄像头|\n| 补光灯接口 | 板载 2 个 DC-DC 恒流降压驱动电路+2 个 2P 1.25mm 卧贴母座 <br>（每路最大驱动能力达到 5V 0.5A）|\n| 显示屏幕接口 |  MIPI：默认引出 4-lane MIPI 接口，已适配 5 寸和 7 寸屏 |\n| 触摸屏接口 | 6P 0.5mm FPC 座子：可以连接电容触摸屏或者电阻触摸屏，目前已适配 GT911 |\n| 音频接口 | 板载 3W 单声道音频功放，有 2P 1.25mm 卧贴母座可以连接喇叭 <br>板载驻极体麦克风电路，有 2P 1.25mm 卧贴母座可以连接麦克风 |\n| 以太网 | 板载百兆 PHY 和百兆网口变压器，有 6P 1.25mm 卧贴母座可以连接以太网口 |\n| 继电器 | 板载继电器，触电切换能力 2A 30VDC |\n| RTC 实时时钟 | 板载专用 RTC 芯片+1220 纽扣电池座子 |\n| 按键 |• 复位按键<br>• FEL 按键（进入下载模式）<br>• 2 个用户可编程按键（可以用作防拆报警键等自定义功能）|\n| 扩展接口 | <br>• 4P 座子：1 组 UART、1 组 485、1 组 USB、1 组 IIC<br>• 9P 座子：2 个供电引脚+2 个继电器引脚+1 个按键的 2 引脚+2 个信号引脚<br>• 9P 座子：7 个信号引脚（可以复用为 1 组 SPI 总线+多个 CS 脚）+2 个电源引脚<br>• 9P 座子：6 个信号引脚+3 个电源引脚 |\n\n\n## 产品技术支持\nM2S开发板可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maixII/M2S/V833.html": {"title": "M2S核心介绍", "content": "# M2S核心介绍\n\n## V833 Chip\n\nV833智能视觉AI专用处理器是基于存算紧耦AI引擎的视频识别处理器，采用业界优秀的半导体工艺，创新突破了存算紧耦架构、神经网络权重量化技术、人脸检测技术和人脸图像质量评估技术、图像畸变矫正技术、图像防抖技术和可变帧率的编码技术等关键技术，有效地解决了神经网络计算复杂度高、网络性能差、人脸检测效率低和准确度不高、广角和鱼眼镜头的图像畸变、智能识别/安防产品功耗高等问题，综合技术水平达国内优秀水平，是一款能耗低、运算效率高、检测效率高、图像效果佳的人工智能视频识别处理器。\n\n> 取至<http://www.elecfans.com/d/1557234.html>\n\n![](./assets/V833.png)\n\n## 参数\n| 项目 | 参数 |\n| --- | --- |\n| CPU | 单核Cortex A7@1.2GHz |\n| Video encoder | H.264, up to 5M@20fps<br>H.265, up to 5M@30fps <br>JPEG, up to 1080p@60fps |\n| NPU | 0.4T |\n| EISE | Up to 1080p@60fps |\n| SDRAM | DDR2/DDR3/DDR3L |\n| SMHC | SMHC x3 (SDcO, SDC1, SDC2) |\n| SPI | SPI x3 (SPIO with 2 CS, SPIO supportsquad-output/quad-input SPl mode) |\n| LCD | Parallel RGB, Serial RGB, i8080 |\n| DSPO | BT1120,BT656 |\n| l2S | l2S x2 (12S0,I2S1) |\n| Parallel CSI | Support |\n| Ethernet | 10/100/1000 Mbit/s Ethernet port with RGMll and RMll interfaces|\n| TWI | TWI x5 (TWIO,TWI1,TWI2,TWI3,s_TwWIO) |\n| RSB | support |\n| GPADC | 2-ch |\n| Audio codec | Output : LINEOUTP/N<br>Input: MICIN1P/N, LINEINL |\n| MIPI CSI | 4-lane, up to 8M@30fps |\n| MIPI DSI | Support |\n| Package | LFBGA273 |"}, "/hardware/zh/maixII/M2A/maixsense.html": {"title": "MaixSense 简介", "content": "# MaixSense 简介\n\n这个板子和之前的 Maix-I 系列不同，它的主控不但带有 AI 加速功能，还支持运行 armbian 系统。\n\n## M2A 板卡\n\nM2A 板卡以全志 R329 为核心主控，还集成电源芯片、FEL烧录按键、wifi模组、存储焊盘和 RMGII 接口等组件。\n\n![M2A](./assets/M2A.jpg)\n\n### R329 芯片\n\nR329 芯片是由全志科技所设计双核 Cortex-A53 64 位处理器 ，配备有双 HIFI4 DSP 可用于音频后处理和预处理，以及 Arm 中国以极低的功耗却可达到 0.256 TOPS 算力的 AIPU（人工智能处理单元），能够用来硬件加速神经网络，对摄像头获取到的 720p 分辨率的图像进行相应的处理。\n\n![R329框架](./assets/R329_1.png)\n\n| 条目 | 参数 |\n| --- | --- |\n| CPU | Dual-core ARM Cortex™-A53@1.5GHz<br>32KB L1 I-cache + 32KB L1 D-cache per core<br>256KB L2 cache |\n| DSP | Dual-core HiFi4@400MHz<br> 32KB L1 I-cache + 32KB L1 D-cache per core<br> 2MB SRAM |\n| NPU | 搭载周易™Z1 AIPU，最大支持0.25TOPS@600MHz |\n| 内存 |内置 DDR3 256MB |\n| 储存 | 支持 SPI Nand/Nor/eMMC |\n| 音频 | 5路ADC，2路DAC<br>3个 I2S/PCM 控制器 |\n| 以太网 | 10/100/1000 Mbps |\n| USB | OTG \\* 1<br>Host \\* 1|\n| SDIO | SDIO 3.0 * 2 |\n| I2S | I2S*3(I2S0, I2S1, S-I2S0) |\n| SPI | SPI*2(SPI0, SPI1) |\n| TWI | TWI*3(TWI0, TWI1, S-TWI0) |\n| GPADC | 4-ch |\n| SCR | SCR*1 |\n| PWM | PWM*15(PWM[8:0], S-PWM[5:0]) |\n\n## MaixSense开发板介绍\n\nMaixSense 开发板可能是市面上最小的 Linux 卡片电脑。本套件包含一个搭载全志 R329 的高度集成 SOM 核心板，以及一个多功能 IO 扩展底板，可以运行 Linux 系统, 并具备出色的扩展功能。您可以将它用于搭建个人服务器、开发智能语音助手、设计机器人等场景。它通过内置的周易 AIPU 处理器同时支持智能语音和视频图像处理，开发者可以直接在开发板上跑通 CV , NLP 等 AI 模型。\n\n**Tina Linux**：全志科技基于 Linux 内核开发的针对智能硬件类产品的嵌入式软件系统。Tina Linux基于 openwrt-14.07 版本的软件开发包,包含了Linux系统开发用到的内核源码、驱动、工具、系统中间件与应用程序包。可以从 [https://github.com/sipeed/r329-linux-4.9](https://github.com/sipeed/r329-linux-4.9) 获取到 Tina sdk。\n\n但是 MaixSense 不只是可以运行 Tina ，还可以运行 **armbian**，这是一个真正**完整**的 linux 系统，armbian 是基于 debian/ubuntu 进行开发的。\n\n|   名称   |               armbian               |               Tina               |\n| ------ | --------------------------------- | ------------------------------ |\n|   简介   | 专门用于`ARM`开发板的`Debian` |    全志深度修改OpenWRT1404的系统     |\n|   特点   |        主线化Linux，功能丰富        |        厂商深度修改，软硬件契合度高        |\n| 适用人群 |       极客，嵌入式入门玩家等        | 深度开发，需要自行定制等开发人员 |\n\n\n## MaixSense外观预览\n\n<div align=\"center\">\n    <img src=\"./assets/M2A-1.gif\" alt=\"Maixsense outlook\" >\n</div>\n\n\n## MaixSense 基本参数\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">MaixSense基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>处理器 CPU</td>\n        <td>双核 ARM CortexTM-A53™ </td>\n    </tr>\n    <tr>\n        <td>AIPU(NPU)</td>\n        <td>搭载周易TZ1AIPU，最大支持0.25TOPS@600MHz</td>\n    </tr>\n    <tr>\n        <td>DRAM</td>\n        <td>SIP 256MB DDR3</td>\n    </tr>\n    <tr>\n        <td>存储</td>\n        <td>可使用核心板搭载的 SPINAND (默认空贴)存储<br>可使用底板搭载的SD卡座</td>\n    </tr>\n    <tr>\n        <td>视频编码器</td>\n        <td>H264/5 &JPEG,最大720p@30fps</td>\n    </tr>\n    <tr>\n        <td>摄像头</td>\n        <td>出厂默认OV9732，最高支持720P@30fps HD<br>采用USB-C连接器,支持正反插(可分别用作前后摄)</td>\n    </tr>\n    <tr>\n        <td>麦克风</td>\n        <td>两个模拟MEMS麦克风，平均灵敏度91dB SPL@1kHz</td>\n    </tr>\n    <tr>\n        <td>屏幕</td>\n        <td>1.5寸SPI总线屏幕,屏幕接口采用0.5mm 12P FPC，分辨率240*240</td>\n    </tr>\n    <tr>\n        <td>按键</td>\n        <td>1个复位按键和4个用户按键(ADC按键)，1个下载按键(FEL)</td>\n    </tr>\n    <tr>\n        <td>以太网接口</td>\n        <td>在核心板以24P 0.5mm间距FPC的形式引出，用于连接相应PHY</td>\n    </tr>\n    <tr>\n        <td>IO引出</td>\n        <td>3*10P 2.54mm 焊盘<br>1个4PMx1.25插座(引出2*GPIO和5V/GND)<br>具体可看下方引脚图</td>\n    </tr>\n    </tbody>\n</table>\n\n## 引脚图参考\n\n![R329-pin](./assets/R329-pin.png)\n\n## 相关资料\n\n[MaixSense 硬件资料](https://dl.sipeed.com/shareURL/MaixII/MaixII-A)\n[极数社区 R329 上手帖](https://aijishu.com/a/1060000000221780)\n[极数社区 R329 芯片FAQ](https://aijishu.com/a/1060000000291439)\n[极数社区矽速科技](https://aijishu.com/blog/xisukeji)（很多资料）\n\n\n## 产品技术支持\n\nM2A 开发板可以在多种场景实现客户不同方面的需要，在 AIoT 上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maixII/M2A/Hardware_test.html": {"title": "硬件测试", "content": "# 硬件测试\n\n## 测试屏幕\n\n可以使用`echo \"hello sipeed\" > /dev/tty0` 重定向信息到屏幕上。\n\n<img src=\"./assets/image-20210805150728052.png\" alt=\"image-20210805150728052\" style=\"zoom:50%;\" />\n\n## 测试摄像头\n\narmbian 内置了 ffmpeg ，可以快速捕捉 sensor 数据并输出到屏幕上\n\n使用如下命令快速捕捉 sensor 并输出到屏幕上\n\n    ffmpeg -i /dev/video0 -vframes 1  -s 240*240 -pix_fmt rgb565le  -vf transpose=2,transpose=2 -f fbdev /dev/fb0\n\n\n![image-20210805165654537](./assets/image-20210805165654537.png)\n\n## 测试网络\n\n使用 `nmtui` 指令可以进入可视化的配网界面，\n选择 Activate a connection ， 选择对应的 WIFI名称 ，输入连接密码，确认即可。\n\n![202108051626](./assets/202108051626.gif)\n\n设置完毕后使用 ifconfig 查看本机操作，然后就可以使用 ssh 等操作了。\n\n![image-20210805162936212](./assets/image-20210805162936212.png)\n\n也可以使用apt下载各种应用\n\n```bash\nsudo apt install neofetch armbian-config\n```\n\n![image-20210805165620823](./assets/image-20210805165620823.png)\n\n如果遇到终端显示错位，还需要`sudo apt-get install xterm`安装下xterm，然后`resize`即可。\n\n![202108061015](./assets/202108061015.gif)\n\n## 测试AIPU\n\n获取1000类物体分类模型\n\n下载站链接[zhouyi_test.tar.xz](https://dl.sipeed.com/shareURL/MaixII/MaixII-A/example),使用任意方式上传到板子中\n\n```bash\ntar -Jxvf zhouyi_test.tar.xz #解压压缩包\ncd zhouyi_test #打开解压后的文件目录\nchmod 777 run.sh #授予执行权限\n./run.sh #执行1000类物体分类\n```\n识别出鼠标\n<img src=\"./assets/recognize_mouse.jpg\" alt=\"识别鼠标\" style=\"zoom:65%;\"> <br>\n对于linux命令行，使用`Ctrl + C`来退出当前程序。"}, "/hardware/zh/maixII/M2A/R329.html": {"title": "芯片介绍", "content": "# 芯片介绍\n\n## R329\n全志 R329 双核 Cortex-A53 处理器的 64 位，配备双 HIFI4 DSP 用于音频后处理和预处理，以及 Arm 中国的 AIPU（人工智能处理单元）以极低的功耗提供高达 0.256 TOPS。可以对神经网络进行硬件加速，驱动 720p 的摄像头。\n\n![R329框架](./assets/R329_1.png)\n\n| 项目 | 参数 |\n| --- | --- |\n| CPU | Dual-core ARM Cortex™-A53@1.5GHz<br>32KB L1 I-cache + 32KB L1 D-cache per core<br>256KB L2 cache |\n| DSP | Dual-core HiFi4@400MHz<br> 32KB L1 I-cache + 32KB L1 D-cache per core<br> 2MB SRAM |\n| NPU | 搭载周易™Z1 AIPU，最大支持0.25TOPS@600MHz |\n| 内存<br>Memory |内置 DDR3 128MB<br> 支持 SPI Nand/Nor/eMMC |\n| Audio | Supports 5 audio ADC and 2 audio DAC<br>Supports 5 analog audio inputs and 2 analog audio output<br>Up to 3 I2S/PCM controllers for Bluetooth and external audio codec<br>Integrated digital microphone, supports maximum 8 digital microphones |\n| Enthernet | 10/100/1000 Mbps |\n| USB | OTG \\* 1<br>Host \\* 1|\n| SDIO | SDIO 3.0 * 2 |\n| I2S | I2S*3(I2S0, I2S1, S-I2S0) |\n| SPI | SPI*2(SPI0, SPI1) |\n| TWI | TWI*3(TWI0, TWI1, S-TWI0) |\n| GPADC | 4-ch |\n| SCR | SCR*1 |\n| PWM | PWM*15(PWM[8:0], S-PWM[5:0])"}, "/hardware/zh/maixII/M2A/Usages.html": {"title": "基本使用", "content": "# 基本使用\n\n进行完前面的 [配置系统](./config_system.html) 后，我们已经成功登录到板子然后可以使用命令行来操作板子了。\n\n## 扩容系统\n\n使用不含有 MaxiPy3 的系统镜像启动后会会自动扩容，可以跳过 `扩容系统` 这一步。\n\n使用内置 MaxiPy3 的镜像系统不会自动扩充系统容量到最大值，因此需要执行一下 `/usr/lib/armbian/armbian-resize-filesystem start` 命令来扩容一下系统大小，会花费一下时间；执行时不要强行退出，执行完毕后会自动退回到终端\n\n## 连接网络\n\n这里我们使用 `nmtui` 命令来配置 wifi\n\n![202108051626](./assets/202108051626.gif)\n\n<details>\n<summary><font color=\"#4F84FF\">点开查看图文版操作</font></summary>\n<p>命令行中输入 nmtui 来打开可视化 wifi 连接界面</p>\n<img src=\"./assets/wifi/nmtui.png\" alt=\"nmtui\">\n<img src=\"./assets/wifi/active_wifi.png\" alt=\"active_wifi\">\n<p>如上图所示我们选择 Activate a connection 来设置连接</p>\n<p>先择目标 wifi </p>\n<img src=\"./assets/wifi/choose_wifi.png\" alt=\"choose_wifi\">\n<img src=\"./assets/wifi/input_password_1.png\" alt=\"input_password_1\">\n<p>输入正确的密码</p>\n<img src=\"./assets/wifi/input_password_2.png\" alt=\"input_password_2\">\n<p>会显示 connecting</p>\n<img src=\"./assets/wifi/connect_wifi.png\" alt=\"connect_wifi\">\n<p>成功后会发现右边的 active 变成了 Deactive，到此基本说明已经连上了 wifi</p>\n<p>连接失败的话重新输入正确的 wifi 密码再尝试连接</p>\n<img src=\"./assets/wifi/succeed_connecting.png\" alt=\"succeed_connecting\">\n<p>然后我们重新退出回命令行终端</p>\n<img src=\"./assets/wifi/quit_connecting.png\" alt=\"quit_connecting\">\n<img src=\"./assets/wifi/quit_nmtui.png\" alt=\"quit_nmtui\">\n<img src=\"./assets/wifi/back_terminal.png\" alt=\"back_terminal\">\n<p>可以使用 ifconfig 命令来查看板子的 IP</p>\n<img src=\"./assets/wifi/ifconfig.png\" alt=\"ifconfig\">\n<img src=\"./assets/wifi/see_ip.png\" alt=\"see_ip\">\n<p>到这里看到了 IP 就说明已经连接上了(上图中的红框位置)</p>\n</details>\n\n## 新建用户\n\n一般来说不建议使用 root 来登录 linux 系统，因为这样很容易把系统玩崩了。\n我们来新建一个用户来进行日常使用。这里我们使用 `adduser` 这个命令来添加用户。\n\n添加用户名为 `xxx` 的用户\n\n```bash\nadduser xxx\n```\n一些 log 显示完后会让我们设置密码：\n```bash\nNew password:\nRetype new password:\n```\n成功设置密码后所显示的 log 会包括下面的内容。\n```bash\npasswd: password updated successfully\n```\n接下来所有的都使用默认的即可（全部都 回车 确定就行）\n```bash\nEnter the new value, or press ENTER for the default\n        Full Name []:\n        Room Number []:\n        Work Phone []:\n        Home Phone []:\n        Other []:\nIs the information correct? [Y/n]\n```\n到这里我们就已经成功创建名称为 xxx 的用户了。\n\n使用命令 login 来登录刚刚新建的用户:\n```bash\nlogin xxx\n```\n想要退出登录的话使用命令 `logout` 就可以\n```bash\nlogout\n```\n### 授予管理员权限\n\n有时候新建的用户需要使用到管理员权限来执行一些操作，下面内容就是授予用户管理员权限。\n\n这里我们编辑 `/etc` 目录下的 `sudoers` 文件就可以修改相关权限。\n\n```bash\nsudo nano /etc/sudoers\n```\n\n在文件里找到下面的内容\n\n```vim\n# User privilege specification\nroot    ALL=(ALL:ALL) ALL\n```\n\n在里面添加上 `xxx     ALL=(ALL:ALL) ALL`（其中xxx是你之前添加的用户名）\n\n```vim\n# User privilege specification\nroot    ALL=(ALL:ALL) ALL\nxxx     ALL=(ALL:ALL) ALL\n```\n\n接着保存后退出即可。\n\n## 安装应用\n\n这里我们使用安装 `armbian-config` 为例。直接执行下面的命令即可\n\n```bash\nsudo apt install armbian-config -y\n```\n\n上面的命令的意思是使用 root 权限来运行 apt 应用的 install 命令来安装 armbian-config 且后面所有需要选择的内容均为 yes 选项\n\n## 设置时区\n\n命令行中输入 `armbian-config`，选中 Personal，再选择 Timezone -> Asia ->Shanghai 设置上海时间（Debian中没有北京时间），按住 TAB 键切换到 ok 后，保存即可。\n\n在 `armbian-config` 设置界面中一直按键盘上的 `Esc` 键也能有退出的效果。\n\n![202108062005](./assets/202108062005.gif)\n\n## 设置中文显示\n\n命令行中输入`armbian-config`，选中Personal -> Locales，下滑到最下面（可以试着使用键盘上的 `PageDown` 按键加快下滑），使用键盘空格键来选中 zh.GBK 和 zh.UTF-8 ，回车确认后再选择 zh_CN.UTF8 为系统默认语言，然后多次按下 `Esc` 键来退回到命令行终端界面。<!-- 执行命令 `sudo apt install fonts-wqy-zenhei` 来下载中文字体， --> 然后使用 `reboot` 命令来重启后系统后就会发现命令行终端有中文显示了。\n\n![202108062054](./assets/202108062054.gif)\n\n## 配置蓝牙\n\n打开 `armbian-config`，选中 Network，选择 BTinstall 安装蓝牙支持包。\n\n![202108071034](./assets/202108071034.gif)\n\n然后就可以使用 Bluetoothctl 配置蓝牙。\n\n<html>\n<details>\n  <summary><font color=\"#4F84FF\">点开查看常用命令</font></summary>\n    <pre  class=\"line-numbers language-bash\">\ndevices                     列出活动的蓝牙设备\npaired-devices              列出已配对蓝牙设备\npairable &lt;on/off&gt;           是否允许配对\ndiscoverable &lt;on/off&gt;       是否允许被发现\ndiscoverable-timeout [value]设置暴露时间\npair [dev]                  配对设备\ntrust [dev]                 信任设备\nuntrust [dev]               取消设备信任\nremove &lt;dev&gt;                移除设备\nconnect &lt;dev&gt;               连接设备\ndisconnect [dev]            断开设备连接                      \nquit                        退出\nhelp                        查看帮助\n</pre>\n</details>\n</html>\n\n### 连接蓝牙设备\n\n使用 `bluetoothctl` 连接蓝牙设备。\n\n```bash\nscan on             #扫描设备\nscan off            #停止扫描\ntrust XX:XX:XX:XX   #信任设备\npair XX:XX:XX:XX    #配对设备\nconnect XX:XX:XX:XX #连接设备\n```\n\n![202108071610](./assets/202108071610.gif)\n\n### 设置蓝牙音频输入/输出\n\n启用蓝牙音频前，需要先安装 `pulseaudio` 和蓝牙组件\n\n```bash\nsudo apt install pulseaudio\nsudo apt install pulseaudio-module-bluetooth\n```\n\n然后使用 pactl 命令查看是否有蓝牙输出设备\n\n```bash\npactl list short sinks\n```\n\n切换音频输出到蓝牙，下面的 `<dev>` 在此处应该为 `2`\n\n```bash\npactl set-default-sink <dev>\n```\n\nlog 如下：\n\n```bash\nmaixsense:~:# apt install pulseaudio\nmaixsense:~:# apt install pulseaudio-module-bluetooth\nmaixsense:~:# pactl list short sinks\n0\talsa_output.platform-7032000.codec.stereo-fallback\tmodule-alsa-card.c\ts16le 2ch 44100Hz\tSUSPENDED\n2\tbluez_sink.00_26_04_00_73_B1.a2dp_sink\tmodule-bluez5-device.c\ts16le 2ch 44100Hz\tSUSPENDED\nmaixsense:~:# pactl set-default-sink 2 \n```\n\n![202108071726](./assets/202108071726.gif)\n\n然后就可以播放音频到蓝牙设备，或者通过蓝牙连接手机当作蓝牙音箱使用。\n\n## 配置音量\n\n这里使用 `alsamixer` 这个应用来改变音量\n\n![202108071440](./assets/202108071440.gif)\n\n<html>\n<details>\n  <summary><font color=\"#4F84FF\">点开查看常用命令</font></summary>\n    <pre>\n------------------- Help-----------------------\nxxEsc        离开                             ▒x\nxxF1 ? H     帮助                             ▒x\nxxF2 /       系统信息                         ▒x\nxxF3         回放控制                         ▒x\nxxF4         捕获控制                         ▒x\nxxF5         所有控制                         ▒x\nxxTab        切换显示模式                     ▒x\nxxF6 S       选择声卡                         ▒x\nxxL          刷新屏幕                         ▒x\nxxLeft       移动到上一个的控制               ▒x\nxxRight      移动到下一个的控制               ▒x\nxxUp/Down    改变音量                         ▒x\nxx+ -        改变音量                         ▒x\nxxPage Up/Dn 大幅改变音量                     ▒x\nxxEnd        设置音量为0                      ▒x\nxx0-9        从0到9依次设置音量               ▒x\nxxQ W E      增加 左/全部/右声道音量          ▒x\nxxZ X C      减少 左/全部/右声道音量          ▒x\nxxB          左右声道平衡                     ▒x\nxxM          切换静音                         ▒x\nx< >         切换左/右静音                    ▒x\nxxSpace      切换捕获                         ▒x\nxx; '        切换左/右捕获                    ▒x\n-----------------------------------------------\n</pre>\n</details>\n</html>\n\n如果需要控制蓝牙设备音量，需要使用 `pactl` 。\n因为 `pcatl` 也支持控制声卡，所以建议使用这个应用来控制音量。\n\n```bash\n##查看输入/输出设备索引\npactl list short sources/sinks\n##设置输入/输出音量\npactl set-source/sink-volume index volume\npactl set-default-source/sink\n##设置默认输入/输出\n```\n\n示例，设置蓝牙耳机为输出设备，音量为10%,然后增加20%，最后减少30%\n\n```bash\nmaixsense:~:# pactl list short sinks\n0\talsa_output.platform-7032000.codec.stereo-fallback\tmodule-alsa-card.c\ts16le 2ch 44100Hz\tSUSPENDED\n2\tbluez_sink.00_26_04_00_73_B1.a2dp_sink\tmodule-bluez5-device.c\ts16le 2ch 44100Hz\tRUNNING\n##蓝牙设备一般为bluez_sink\nmaixsense:~:# pactl set-default-sink 2\nmaixsense:~:# pactl set-sink-volume 2 10%  \nmaixsense:~:# pactl set-sink-volume 2 +8192  \nmaixsense:~:# pactl set-sink-volume 2 -0x3000\n##可选 百分比，十进制数，十六进制数控制，效果相同，并且可以超过100%\n```\n\n## 媒体播放\n\n媒体播放常用 mplayer 这个应用。\n\n- 下载 mplayer \n  \n```bash\nsudo apt install mplayer -y\n```\n\n安装后我们需要把想要播放的文件传到板子上。\n\n文件可以在[下载站](https://dl.sipeed.com/shareURL/MaixII/MaixII-Dock/example)获取到下面的示例文件\n\n这里可以用 [mobaxterm](../M2/tools/mobaxterm.html) 软件来使用无线网络把文件传输到板子上。\n  \n然后执行 `sudo mplayer badapple_240_60fps.mp4 -vo fbdev2` 来播放视频或者 `sudo mplayer Short.mp3` 播放音频\n\n```bash\nmplayer badapple_240_60fps.mp4 -vo fbdev2\n```\n\n想要退出的话使用键盘上的 `Ctrl+C` 组合键来退出。\n\n也在在命令行后面加上`< /dev/null > /dev/null 2>1 &`以便在后台播放\n\n```bash\nmplayer badapple_240_60fps.mp4 -vo fbdev2  < /dev/null > /dev/null 2>1 &\n```\n\n上面的指令是在后台播放的。想要停止的话可以先使用 `fg` 命令来切换到任务，再使用 `Ctrl+C` 来终止程序\n\n![202108091128](./assets/202108091128.gif)\n\n如果没播放成功的话，尝试增加设备音量（前文提过alsamixer）或者确认一下文件路径是否正确\n\n## 编写c代码\n\n一般命令行都是用 vim 来作为编辑器。有兴趣的可以额外学习一下这款强大的编辑器\n\n如果提示没有安装 vim 的话，可以使用命令 `sudo apt install vim -y` 来安装 vim。\n\n然后我们使用 vim 来新建一个名为 `helloworld.c` 的源文件\n\n```bash\nvim helloworld.c\n```\n\nvim 有命令模式（Command mode） ， 输入模式（Insert mode） 和 底线命令模式（Last line mode）。\n\n新建文件后默认的模式为 命令模式，此时我们按下键盘上的 `i` 键可进入输入模式。\n\n将下面的代码正常输入到文件内容中。\n\n```c\n#include <stdio.h>\nint main()\n{\n    printf(\"Hello, world\\n\");\n    return 0;\n}\n```\n\n然后使用键盘上的 esc 键来退出输入模式到命令模式，\n\n然后使用 `:` 来进入底线命令模式，接着输入 `wq` 来保存文件且退出到命令行\n\n然后接可以在命令行中使用 gcc 来编译我们的代码了。\n如果没有 gcc 的话使用 apt 命令来安装一下。\n有关 gcc 的详细说明请自行搜索。\n\n```bash\ngcc hello.c -o hello.o\n```\n\n结束编译后直接运行即可\n\n```bash\n./hello.o\n```\n\n![202108091201](./assets/202108091201.gif)\n\n## 编写python代码\n\n- 详细解释看上面的C代码样例\n\n```bash\nvim helloworld.py       #新建一个python文件并且用vim打开\ni\nprint(\"hello world!\\n\")\nesc\n:wq\npython3 helloworld.py\n```\n\n![202108091339](./assets/202108091339.gif)\n\n## 使用 python 点亮第一个灯\n\n首先安装 GPIO 的 python 支持库\n\n```bash\npip install gpiod\n```\n\n把 led 正极插入 PH5,负极插入 GND\n\n创建 `led.py` 文件\n\n``` bash\nvim led.py\n```\n\n将下面代码输入到所创建的文件中\n\n```python\nimport time\nimport gpiod as gpio\nPH_BASE = (8-1)*32 # \"PH\"\ngpiochip1 = gpio.chip(\"gpiochip1\")\nled = gpiochip1.get_line((PH_BASE + 5)) # \"PH5\"\nconfig = gpio.line_request()\nconfig.request_type = gpio.line_request.DIRECTION_OUTPUT\nled.request(config)\n\nwhile led:\n    led.set_value(0)\n    time.sleep(1)\n    print(\"led on\")\n    led.set_value(1)\n    time.sleep(1)\n    print(\"led off\")\n```\n\n保存退出到命令行终端后执行代码\n\n ```bash\n python3 led.py\n ```\n\n效果如下：\n\n![202108091956](./assets/202108091956.gif)\n\n## 设置开机启动\n\n需要会一些脚本语言。\n\n首先启用开机自启动脚本，这里我们来编辑相关文件就可以修改相关设置。\n\n```bash\nvim /lib/systemd/system/rc-local.service\n```\n\n在最后面添加\n\n```bash\n[Install]\nWantedBy=multi-user.target\nAlias=rc.local.service\n```\n\n这样就成功启用了开机自启动脚本\n\n接下来我们只需要把想要开机运行的内容添加到 rc.local 文件就可以了\n\n编辑自启动脚本\n\n ```bash\n vim /etc/rc.local\n ```\n\n在`exit 0`前面添加需要启动的服务\n\n```bash\necho \"hello world!\"\n```\n\n然后重启即可。\n\n例如进行上面的修改后，此脚本会在用户登录前执行，执行示例日志如下\n\n```bash\n[  OK  ] Finished Permit User Sessions.\n[  38.569457] rc.local[1322]: hello world!\n```\n\n要注意的是在开机脚本里面最好不要循环占用串口，这会导致我们无法再通过串口来操作板子。\n\n## 更多的使用方法\n\n请到[MaixPy3](/soft/maixpy3/zh/readme.md)和[极术社区](https://aijishu.com/a/1060000000221780)中自行查看"}, "/hardware/zh/maixII/M2A/Usages-copy.html": {"title": "Armbian 配置及使用", "content": "# Armbian 配置及使用\n\n## 配置网络\n\n我们使用 `nmtui` 命令来配置 wifi\n\n![202108051626](./assets/202108051626.gif)\n\n## 新建用户\n\n一般来说不使用root来登录linux系统，因为这样很容易把系统玩崩了。\n因此新建一个用户来避免一直使用root账户来进行操作。\n\n```bash\nadduser xxx                                             # 添加用户名为 xxx 的用户\n\n# ...                                                   # 省略一些 log\n\nNew password:                                           # 新建用户密码\nRetype new password:                                    # 重新输入密码\n\n# ...                                                   # 省略一些 log\n\nEnter the new value, or press ENTER for the default     # 添加信息，或者直接按 ENTER 选择默认信息\n\n# ...                                                   # 按五次 enter 选择默认即可\n\nIs the information correct? [Y/n] y                     # 输入 y 完成创建\n\n```\n\n到这里我们就已经成功创建名称为 xxx 的用户了\n\n### 授予管理员权限\n\n有时候用户需要使用到管理员权限，下面内容就是授予用户管理员权限\n\n```bash\nsudo nano /etc/sudoers                                   # 修改 /etc/sudoers 文件。编辑器个人喜好\n```\n\n在文件里找到下面的内容\n\n```vim\n# User privilege specification\nroot    ALL=(ALL:ALL) ALL\n\n```\n\n在里面添加上\n\n```vim\n# User privilege specification\nroot    ALL=(ALL:ALL) ALL\nxxx     ALL=(ALL:ALL) ALL\n\n```\n\n接着保存后退出即可。\n\n## 使用SSH连接\n\n想要使用 ssh 来连接板子的话需要板子里面存在的用户名称和密码。\n默认的 root 用户没有密码， 所以想用 root 账户的话需要自己使用passwd命令自己添加密码；\n使用串口连接板子后执行 ifconfig 来或许板子的 IP 地址。\n接着就可以使用 ssh 来连接板子了。\n用户也可以尝试使用 MobaXterm 这个软件来方便电脑与板子传输文件\n\n## MaixPy3 IDE 连接\n\n只能通过远程连接来用 MaixPy3 IDE 连接 MaixSense ，使用有线连接会连接不上。\n每个人的网络环境都存在差异，都可能存在连接不上的情况。\n\n### 准备\n\n- 烧录好带有 MaixPy3 的 Armbian 系统\n- 连接网络进行 MaixPy3更新，确保 MaixPy3 的版本大于 0.3.4。\n- 运行 `ifconfig` 获取开发板的 IP 地址\n\n### 连接\n\n在MaixSense上运行 `python3 -c \"import maix.mjpg;maix.mjpg.start()\"` 启动板子上的远程 RPyc 服务\n\n在电脑 IDE 中新建代码区，运行下面的代码来连接开发板\n\n```python \n$connect(\"192.168.43.44\") # 此处填入开发板的 IP 地址\nimport platform\nprint(platform.uname())\n```\n\n运行输出结果如下：\n![MaixPy3 IDE](./assets/MaixPy3-IDE.jpg)\n\n## 设置时区\n\n命令行中输入`armbian-config`，选中Personal，再选择Timezone -> Asia ->Shanghai设置上海时间（Debian中没有北京时间），按住TAB键切换到ok，保存即可。\t\t\n\n![202108062005](./assets/202108062005.gif)\n\n## 设置中文显示\n\n命令行中输入`armbian-config`，选中Personal -> Locales -> 下滑到最下面，空格选中zh.GBK和zh.UTF-8,，然后勾选zh_CN.UTF8设置为系统默认语言，按住TAB键切换到ok，保存，exit退出，下载中文字体，`apt-get install fonts-wqy-zenhei`，重启后系统环境就变成中文的了。\n\n![202108062054](./assets/202108062054.gif)\n\n## 配置蓝牙\n\n打开`armbian-config`，选中Network，选择BTinstall安装蓝牙支持包。\n\n![202108071034](./assets/202108071034.gif)\n\n可以使用Xftp传输，安装完毕后断电重启即可。\n\n然后就可以使用Bluetoothctl配置蓝牙。\n\n常用命令：\n\n```bash\ndevices             \t\t列出活动的蓝牙设备\npaired-devices      \t\t列出已配对蓝牙设备\npairable <on/off>   \t\t是否允许配对\ndiscoverable <on/off>       是否允许被发现\ndiscoverable-timeout [value]设置暴露时间\npair [dev]                  配对设备\ntrust [dev]                 信任设备\nuntrust [dev]               取消设备信任\nremove <dev>                移除设备\nconnect <dev>               连接设备\ndisconnect [dev]            断开设备连接                      \nquit                        退出\nhelp          \t\t\t\t查看帮助\n```\n\n### 连接蓝牙设备\n\n使用`bluetoothctl`连接蓝牙设备。\n\n```bash\nscan on #扫描设备\nscan off #停止扫描\ntrust XX:XX:XX:XX # 信任设备\npair XX:XX:XX:XX #配对设备\nconnect XX:XX:XX:XX #连接设备\n```\n\n\n\n![202108071610](./assets/202108071610.gif)\n\n### 设置蓝牙音频输入/输出\n\n启用蓝牙音频前，需要先安装`pulseaudio`即及蓝牙组件\n\n```bash\nsudo apt install pulseaudio\nsudo apt install pulseaudio-module-bluetooth\n```\n\n然后使用pactl查看是否有蓝牙输出设备\n\n```bash\npactl list short sinks\n```\n\n切换音频输出到蓝牙\n\n```bash\npactl set-default-sink <dev>\n```\n\nlog如下：\n\n```bash\nmaixsense:~:# apt install pulseaudio\nmaixsense:~:# apt install pulseaudio-module-bluetooth\nmaixsense:~:# pactl list short sinks\n0\talsa_output.platform-7032000.codec.stereo-fallback\tmodule-alsa-card.c\ts16le 2ch 44100Hz\tSUSPENDED\n2\tbluez_sink.00_26_04_00_73_B1.a2dp_sink\tmodule-bluez5-device.c\ts16le 2ch 44100Hz\tSUSPENDED\nmaixsense:~:# pactl set-default-sink 2 \n```\n\n![202108071726](./assets/202108071726.gif)\n\n然后就可以播放音频到蓝牙设备，或者通过蓝牙连接手机当作蓝牙音箱使用。\n\n## 配置音量\n\n`alsamixer`\n\n![202108071440](./assets/202108071440.gif)\n\n常用命令\n\n```\n------------------- Help-----------------------\nxxEsc     离开                                ▒x\nxxF1 ? H  帮助                                ▒x\nxxF2 /    系统信息                            ▒x\nxxF3      回放控制                            ▒x\nxxF4      捕获控制                            ▒x\nxxF5      所有控制                            ▒x\nxxTab     切换显示模式                        ▒x\nxxF6 S    选择声卡                            ▒x\nxxL       刷新屏幕                            ▒x\nxxLeft    移动到上一个的控制                    ▒x\nxxRight   移动到下一个的控制                    ▒x\nxxUp/Down    改变音量                         ▒x\nxx+ -        改变音量                         ▒x\nxxPage Up/Dn 大幅改变音量                      ▒x\nxxEnd        设置音量为0                       ▒x\nxx0-9        从0到9依次设置音量                 ▒x\nxxQ W E      增加 左/全部/右声道音量            ▒x\nxxZ X C      减少 左/全部/右声道音量            ▒x\nxxB          左右声道平衡                      ▒x\nxxM          切换静音                         ▒x\nx< >         切换左/右静音                     ▒x\nxxSpace      切换捕获                         ▒x\nxx; '        切换左/右捕获                     ▒x\n-----------------------------------------------\n```\n\n如果需要控制蓝牙设备音量，需要使用`pactl` ，并且`pcatl`也支持控制声卡，所以推荐使用此app控制音量。\n\n```bash\n##查看输入/输出设备索引\npactl list short sources/sinks\n##设置输入/输出音量\npactl set-source/sink-volume index volume\npactl set-default-source/sink\n##设置默认输入/输出\n```\n\n示例，设置蓝牙耳机为输出设备，音量为10%,然后增加20%，最后减少30%\n\n```bash\nmaixsense:~:# pactl list short sinks\n0\talsa_output.platform-7032000.codec.stereo-fallback\tmodule-alsa-card.c\ts16le 2ch 44100Hz\tSUSPENDED\n2\tbluez_sink.00_26_04_00_73_B1.a2dp_sink\tmodule-bluez5-device.c\ts16le 2ch 44100Hz\tRUNNING\n##蓝牙设备一般为bluez_sink\nmaixsense:~:# pactl set-default-sink 2\nmaixsense:~:# pactl set-sink-volume 2 10%  \nmaixsense:~:# pactl set-sink-volume 2 +8192  \nmaixsense:~:# pactl set-sink-volume 2 -0x3000\n##可选 百分比，十进制数，十六进制数控制，效果相同，并且可以超过100%\n```\n\n## 媒体播放\n\n媒体播放常用mplayer\n- 下载mplayer \n  \n> sudo apt install mplayer\n  \n然后执行 `sudo mplayer badapple_240p.mp4 -vo fbdev2` 来播放视频\n或者`sudo mplayer G.E.M.邓紫棋\\ -\\ 光年之外.flac` 播放音频\n\n在后面加上`< /dev/null > /dev/null 2>1 &`以便在后台播放\n\n```bash\nmplayer /root/badapple_240p.mp4 -vo fbdev2  < /dev/null > /dev/null 2>1 &\n```\n\n![202108091128](./assets/202108091128.gif)\n\n\n\n## 编写c代码\n\n```bash\nvim helloworld.c  #使用 vim 创建一个文件并打开\ni                 #在vim中这个指令的意思是输入，之后就可以敲代码了\n```\n可以将下面的代码输入到刚刚新创建的文件中\n```c\n#include <stdio.h>\nint main()\n{\n    printf(\"Hello, world\\n\");\n    return 0;\n}\n```\n输完上面的代码后需要按下 esc 键来退出编辑模式\n就这再输入 `:wq` 来保存文件且退出vim\n```bash\ngcc hello.c -o hello.o #编译C文件\n./hello.o              #运行编译出来的C文件\n```\n\n![202108091201](./assets/202108091201.gif)\n\n## 编写python代码\n- 详细解释看上面的C代码样例\n```bash\nvim helloworld.py\ni\nprint(\"hello world!\\n\")\nesc\n:wq\npython3 helloworld.py\n```\n\n![202108091339](./assets/202108091339.gif)\n\n## 使用python点亮第一个灯\n\n安装GPIO的python支持库\n\n```bash\npip install gpiod\n```\n\n把led正极插入PH5,负极插入GND\n\n编写代码\n\n``` bash\nvim led.py\n```\n\n复制代码进去\n\n```python\nimport time\nimport gpiod as gpio\nPH_BASE = (8-1)*32 # \"PH\"\ngpiochip1 = gpio.chip(\"gpiochip1\")\nled = gpiochip1.get_line((PH_BASE + 5)) # \"PH5\"\nconfig = gpio.line_request()\nconfig.request_type = gpio.line_request.DIRECTION_OUTPUT\nled.request(config)\n\nwhile led:\n    led.set_value(0)\n    time.sleep(1)\n    print(\"led on\")\n    led.set_value(1)\n    time.sleep(1)\n    print(\"led off\")\n```\n\n执行代码\n\n ```bash\n python3 led.py\n ```\n\n效果如下：\n\n![202108091956](./assets/202108091956.gif)\n\n\n## 运行神经网络实例\n\n获取1000类物体分类模型\n\n下载站链接[zhouyi_test.tar.xz](https://dl.sipeed.com/shareURL/MaixII/MaixII-A/example),使用任意方式上传到板子中\n\n```bash\ntar -Jxvf zhouyi_test.tar.xz #解压压缩包\ncd zhouyi_test #打开解压后的文件目录\nchmod 777 run.sh #授予执行权限\n./run.sh #执行1000类物体分类\n```\n\n## 设置开机启动\n\n启用开机自启动脚本\n\n```bash\nvim /lib/systemd/system/rc-local.service\n```\n\n在最后面添加\n\n```bash\n[Install]\nWantedBy=multi-user.target\nAlias=rc.local.service\n```\n\n编辑自启动脚本\n\n ```bash\n vim /etc/rc.local\n ```\n\n在`exit 0`前面添加需要启动的服务\n\n然后重启即可\n\n注意，此脚本会在用户登录前执行，执行日志如下\n\n```bash\n[  OK  ] Finished Permit User Sessions.\n[  38.569457] rc.local[1322]: hello world!\n```\n\n## 更多的使用方法\n请到[MaixPy3](/soft/maixpy3/zh/readme.md)和[极术社区](https://aijishu.com/a/1060000000221780)中自行查看"}, "/hardware/zh/maixII/M2A/ssh.html": {"title": "如何使用SSH", "content": "# 如何使用SSH\n\n> 编辑于2022.04.29\n\n这里讲一下怎么使用ssh，和一些常碰到的问题。\n\n## 简介\n\nSSH 是较可靠，专为远程登录会话和其他网络服务提供安全性的协议。\n通常我们用这个来远程登陆别的linux设备。\n\n## 用法\n\n### 目标设备进行的操作\n\n#### 目标设备安装ssh\n\n一般来说大多数设备都已经内置了ssh，但是对于需要的话一般可以用下面命令安装ssh.\n\n```bash\nsudo apt install ssh -y\n```\n#### 开启端口\n\n修改 /etc/ssh/sshd_config 里面的 #22 为 22 .\n\n- 一般来说这样就没啥问题了，有其他的问题的话先重启试试（解决99%的问题）。剩下1%的问题网上搜搜\n\n### 主机端操作"}, "/hardware/zh/maixII/M2A/config_system.html": {"title": "配置系统", "content": "# 配置系统\n\nLichee MaixSense 的引脚图如下:\n\n<img src=\"./assets/R329-pin.png\" alt=\"pinmap\" width=60%>\n\n## 连接串口\n\n连接串口是为了使电脑与板子能够进行通信。\n\n相关操作： 使用 Type-C 线将电脑与上图所标注处的 `USB转系统串口` 相连即可，然后根据电脑系统执行不同的下方操作\n\n### Linux & macOS\n\nLinux 不需要装驱动，系统自带了，使用 `ls /dev/ttyUSB*` 命令即可看到设备号\n\n### Windows\n\nLichee MaixSense 使用了 CH340 作为串口芯片。Windows 用户需要安装 CH340 的驱动。\n\nWindows 下载 [ch340 ch341 driver](https://api.dl.sipeed.com/shareURL/MAIX/tools/ch340_ch341_driver) 安装即可，然后可以在设备管理器中看到串口设备和端口号。\n\n## Tina 系统配置\n\n一般建议使用 armbian 系统，对于 Tina 系统用户需要有一定的使用基础才能够使用。\n\nLichee MaixSense 的 Tina 系统配置和 [M2dock](./../M2/usage.html) 基本相同，这里不另作赘述。\n<!-- \n- 可以将板子上的摄像头拆下来后再将电脑与该接口相连然后使用 [adb](https://developer.android.google.cn/studio/releases/platform-tools?hl=zh-cn) 工具来操作板子，此操作仅限 Tina 系统。因为不推荐小白使用 Tina 系统，所以此处不再细说 -->\n\n## armbian 系统配置\n\n根据本文开头描述来将电脑与板子连接且安装 [CH340 驱动](https://dl.sipeed.com/fileList/MAIX/tools/ch340_ch341_driver/CH341SER.EXE) 后，可以在串口软件比如 Xshell 或者 [Mobaxterm](./../M2/tools/mobaxterm.html)中，设置波特率 (baudrate) 为115200，选择板子的串口，连接上板子。\n\n由于所提供的下载镜像分为内置 MaixPy3 的镜像和无 MaixPy3 的镜像，所以下面分为两种来说明相关操作。\n\n### 默认含有 MaixPy3 的镜像\n\n用户名和密码均为 `root` ，登陆进去即可。输入的时候要是输错了就是直接按回车重来吧，最好输入时无更改。\n\n成功登录的 log 参考如下：\n\n```bash\nArmbian 21.08.0-trunk Bullseye ttyS0\n\nmaixsense login: root\nPassword:\n __  __       _       ____\n|  \\/  | __ _(_)_  __/ ___|  ___ _ __  ___  ___\n| |\\/| |/ _` | \\ \\/ /\\___ \\ / _ \\ '_ \\/ __|/ _ \\\n| |  | | (_| | |>  <  ___) |  __/ | | \\__ \\  __/\n|_|  |_|\\__,_|_/_/\\_\\|____/ \\___|_| |_|___/\\___|\n\nWelcome to Armbian 21.08.0-trunk Bullseye with bleeding edge Linux 5.14.0-rc7-sun50iw11\n\nNo end-user support: built from trunk & unsupported (bullseye) userspace!\n\nSystem load:   133%             Up time:       0 min\nMemory usage:  53% of 231M      Zram usage:    23% of 115M      IP:            192.168.0.251\nCPU temp:      50°C             Usage of /:    77% of 2.9G\n\n[ 0 security updates available, 66 updates total: apt upgrade ]\nLast check: 2022-08-31 01:45\n\n[ General system configuration (beta): armbian-config ]\n\nLast login: Tue Aug 30 10:34:06 UTC 2022 on ttyS0\nroot@maixsense:\n```\n\n### 不含 MaixPy3 的镜像\n\n首次使用需要设置密码，第一次使用没有设置密码的话只能重新烧录重新获取设置密码的机会。\n\n密码过短或者过于简单的话会被要求重新设置。\n\n```bash\nNew to Armbian? Documentation: https://docs.armbian.com Support: https://forum.armbian.com\n\nNew root password: **********\nRepeat password: **********\n```\n\n设置完密码后需要自行设置默认 shell,一般选择 bash\n\n```bash\nChoose default system command shell:\n\n1) bash\n2) zsh\n\nShell: BASH\n```\n\n然后会要求新建一个用户，自定义用户名和登录密码即可。\n\n```bash\nCreating a new user account. Press <Ctrl-C> to abort\n\nPlease provide a username (eg. your forename): ll\nCreate password: *********\nRepeat password: *********\n```\n\n新建用户后默认给新建的用户授予了 root 权限，以后可以直接使用新建的用户来操作板子。\n\n我们可以用 `passwd` 命令来删除或者修改密码。\n\n例如我们可以使用 `passwd -d root` 来删除我们开始所创建的 root 用户的密码，也可以使用 `passwd root` 命令来重新设置 root 用户的密码\n\n下面是部分 `passwd` 命令例子 log\n\n```bash\nroot@maixsense:~# passwd root\nNew password:\nRetype new password:\npasswd: password updated successfully\n```\n\n下面是部分示例~\n\n![2021080511-46-52](./assets/2021080511-46-52.gif)"}, "/hardware/zh/maixII/M2A/flash_system.html": {"title": "系统烧录", "content": "# 系统烧录\n\n## 系统简介\n\nLichee MaixSense（以下简称R329）提供了以下两种系统镜像\n\n|   名称   |               armbian               |       Tina      |\n| :------ | :------------------------ | :---------------------- |\n|   简介   | 专门用于ARM开发板的轻量级 Debian |    全志魔改OpenWRT1404的系统     |\n|   特点   |        主线化Linux，功能丰富      |        厂商魔改，比较精简        |\n| 适用人群 |       极客，嵌入式入门玩家等      | 深度开发，需要自行定制等开发人员 |\n\n> ！！！一定要严格按照步骤操作！！！armbian系统请使用大于 4G 的 TF/SD 卡进行烧录，Tina系统请使用大于 1G 的 TF/SD 卡进行烧录, 质量较差的启动卡会有糟糕的实际使用体验\n\n对于 R329 芯片， 建议使用 Etcher 软件来烧录镜像。\n\n## 获取镜像\n\n### armbian 系统镜像\n\narmbian 镜像获取：\n\n> 链接：[点我](https://eyun.baidu.com/s/3htTXfaG#sharelink/path=%2F%E4%B8%8B%E8%BD%BD%E7%AB%99%E6%96%87%E4%BB%B6%2FMaixII%2FMaixII-A%2FSDK&parent_path=%2F%E6%B7%B1%E5%9C%B3%E7%9F%BD%E9%80%9F%E7%A7%91%E6%8A%80%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8)\n\n其中以 maixpy3 开头命名的镜像文件的是已经装载了 MaixPy3 库和相关驱动的镜像包。\n\narmbian 镜像所打包的方法为 [dd](https://baike.baidu.com/item/DD/2654972); 可以选用适合当前系统的 [Etcher](https://www.balena.io/etcher/ \"Etcher\") 软件来烧录。\n\n### Tina 系统镜像\n\nTina 系统需要自己进行编译，具体编译方式参考 [https://github.com/sipeed/R329-Tina-jishu](https://github.com/sipeed/R329-Tina-jishu)\n\n## 烧录镜像\n\n### armbian 镜像烧录\n\n#### 资源获取\n\n- 下载[Etcher](https://www.balena.io/etcher/ \"Etcher\")\n\n#### 烧录步骤\n\n首先解压所下载的镜像压缩包，得到 `.img` 镜像文件，打开 [Etcher](https://www.balena.io/etcher/ \"Etcher\") 软件，点击 `Flash from file` ,选中解压出来的 `.img ` 文件镜像，然后点击 `Select target` 选中sd卡，最后点击 `Flash` 进行烧录，等待完成即可。 \n\n下面只是用原始的 armbian 作为展示，有需求的话可也已选择下载带有 MaixPy3 的镜像文件。\n\n![burn](./assets/95133.gif)\n\n最终下载结束后的效果会和下图一样，显示 `Flash Complete!`：\n\n![下载结束](./assets/finish_flash.png)\n\n如果烧录失败了，请手动格式化一下 sd 卡。Windows 和 MacOS 可以使用 [SD Card Formatter](https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip)来格式化 sd 卡，Linux 系统可以使用 [Gparted](https://gparted.org/)来格式化。\n\n### Tina 镜像烧录\n\nTina 系统的烧录方式和 MaixII Dock 通用，可参考[MaixII M2dock 烧录系统 - Sipeed Wiki](./../M2/flash.html)，这里不多做介绍"}, "/hardware/zh/modules/camera_summary.html": {"title": "施工中", "content": "---\ntitle: 施工中\n---\n\n\nGC0328\n双摄像头模块(GC0328)\nOV7740\nOV2640\nOV2640-M12\n双摄像头模块(OV2640)"}, "/hardware/zh/modules/Gamepad.html": {"title": "Sipeed Gamepad", "content": "# Sipeed Gamepad\n\n## 概述\n\n![](./../../assets/spmod/spmod_amigo_hendle/Gamepad141.jpg)\n\n采用主控芯片： GD32F150G\n\n通信接口：IIC（8P座子或者Grove-4P-2.0mm座子）\n\n板载10个按键（每个按键都连接到独立的GPIO）\n\n板载指示灯\n\n## 硬件参数\n\n| 项目 | 参数 |\n| --- | --- |\n| MCU | GD32F150G（Arm Cortex-M3）|\n| 主频 | 72Mhz |\n| 存储 | 64KB Flash, 8KB SRAM |\n| 按键 | 10个按键（每个按键都连接到独立的GPIO） |\n| 下载接口 | SWD下载 |\n| 晶振 | 24MHz无源晶振 |\n| LED | 板载1个电源指示灯和2个LED |\n| USB接口 | 板载1个USB TYPE-C 母座（连接到MCU的USB） |\n\n![](./../../assets/spmod/spmod_amigo_hendle/amigo_handle_5.png)\n\n## 手柄接口\n\n![](./../../assets/spmod/spmod_amigo_hendle/amigo_handle_3.jpg)\n\n![](./../../assets/spmod/spmod_amigo_hendle/amigo_handle_4.jpg)\n\n| 引脚序号 | 引脚名称 | 类型 | 引脚说明      |\n| -------- | -------- | ---- | ------------- |\n| 1  | GND | G  | 模块电源地 |\n| 2  | NC | NC  | 悬空引脚，无功能 |\n| 3  | NC | NC  | 悬空引脚，无功能 |\n| 4  | SDA | I/O  | 模块I2C串行数据引脚 |\n| 5  | 3V3 | V  | 模块电源输入正 |\n| 6  | NC | NC  | 悬空引脚，无功能 |\n| 7  | NC | NC  | 悬空引脚，无功能 |\n| 8  | SCL | I  | 模块I2C串行时钟引脚 |\n\n链接方式\n\n单手柄：\n![](./../../assets/spmod/spmod_amigo_hendle/Gamepad.143.jpg)\n\n双手柄：\n\n![等待完善](./../../assets/spmod/spmod_amigo_hendle/amigo_handle_6.png)\n## 软件描述\n| 项目| 参数 |\n| --- | --- |\n| 开发环境 | Maixpy IDE、 PlatformIO IDE |\n| 开发语言 | C语言、 python |\n| 通讯协议 | IIC |\n\n> GD32F150G源码和例程 [https://github.com/sipeed/GD32F150-I2C-Handle](https://github.com/sipeed/GD32F150-I2C-Handle)\n\n### 手柄测试\n\n单手手柄输入测试\n```python \nfrom machine import I2C\nimport nes, lcd\nfrom sound import CubeAudio\nimport sys, time\nfrom fpioa_manager import fm\nfrom Maix import FPIOA, GPIO\n\n\n# B A SEL START UP DOWN LEFT RIGHT  X   Y\n# 1 2 4   8     16  32   64   128  254 253\ni2c = I2C(I2C.I2C2, freq=400*1000, sda=27, scl=24)\nlcd.init(freq=15000000)\nlcd.register(0x36, 0x20\nstate = 0\nimport time\ni = 0\nwhile True:\n    dev = i2c1.scan()\n    print(dev)\n    dev = i2c2.scan()\n    print(dev)\n    time.sleep(0.5)\n    try:\n        #i2c.writeto(0x4A, b'0')\n        tmp = (i2c1.readfrom(0x4A, 2))\n        print('{}-{}'.format(int(tmp[0]), int(tmp[1])))\n    except Exception as e:\n        print(e)\n```\n\n双手柄输入测试\n```python\nfrom machine import I2C\nimport nes, lcd\nfrom sound import CubeAudio\nimport sys, time\nfrom fpioa_manager import fm\nfrom Maix import FPIOA, GPIO\n\n\n# B A SEL START UP DOWN LEFT RIGHT  X   Y\n# 1 2 4   8     16  32   64   128  254 253\ni2c = I2C(I2C.I2C2, freq=400*1000, sda=27, scl=24)\nlcd.init(freq=15000000)\nlcd.register(0x36, 0x20\nstate = 0\nimport time\ni = 0\nwhile True:\n    dev = i2c1.scan()\n    print(dev)\n    dev = i2c2.scan()\n    print(dev)\n    time.sleep(0.5)\n    try:\n        #i2c.writeto(0x4A, b'0')\n        tmp = (i2c1.readfrom(0x4A, 2))\n        print('{}-{}'.format(int(tmp[0]), int(tmp[1])))\n    except Exception as e:\n        print(e)\n    try:\n        #i2c.writeto(0x42, b'0')\n        tmp = (i2c2.readfrom(0x42, 2))\n        print('{}-{}'.format(int(tmp[0]), int(tmp[1])))\n    except Exception as e:\n        print(e)\n```\n\n测试代码输出\n\n```python\n    0-252       #没有输出\n    1-252       #按下 B 键\n    2-252       #按下 A 键\n    4-252       #按下 SEL 键  \n    8-252       #按下 START 键   \n    16-252      #按下 UP 键 \n    32-252      #按下 DOWN 键  \n    64-252      #按下 LEFT 键\n    128-252     #按下 RIGHT 键\n    0-254       #按下 X 键\n    0-253       #按下 Y 键\n```\n\n### 游戏测试\n\n[MaixPy-NES](/soft/maixpy/zh/api_reference/media/nes.md)\n\n\n## 资料下载\n\n[Gamepad](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Gamepad)"}, "/hardware/zh/modules/micarray.html": {"title": "MicArray 麦克风阵列", "content": "# MicArray 麦克风阵列\n\n## 概述\n\n麦克风阵列由沿板的六个麦克风和一个中心的麦克风组成，阵列板上的 12 颗 LED 可以用来可视化识别声源方位，可以用来做声源定位实验。\n\n## 产品视图\n\n<img src=\"./../../assets/spmod/spmod_micarray/spmod_micarray.png\" width=55%>\n\n## 麦克风阵列介绍\n\n- MEMS 麦克风 :7 个 MSM261S4030H0 组成阵列\n- 灵敏度 : -26(dB,dBFS @1kHz 1Pa)\n- 信噪比 : 57dB(20kHz bandwidth, A-weighted)\n- 尺寸 :78.1*88.8mm\n- 灯光 :12 个 SK9822 LED 组成一个环形 LED 阵列\n    - 多个 LED 通过双信号线级联\n    - 8 Bit(256 级) 可调颜色,5 Bit (32 级)亮度调节 \n- 连接器 :支持 2*5P 2.54mm 端子和 10P 0.5mm FPC 连接器\n\n## 参数\n| 功能特点 | 参数 |\n| --- | --- |\n| 声压级 | 140 dB SPL |\n| 灵敏度 | -26(dB,dBFS @1kHz 1Pa) |\n| 信噪比 | 57 dB (20kHz bandwidth,A-weighted) <br>THD<1% (100dB SPL @1kHz S=Nom,Rload>2k ) |\n| 时钟频率 | 1.0-4.0Mhz(正常模式) <br>150-800khz(低功耗模式) |\n\n## 模块引脚定义\n\n| 引脚序号 | 引脚名称 | 类型 | 引脚说明 | \n| --- | --- | --- | --- |\n| 1 | VIN | VCC | 模块电源输入正 |\n| 2 | GND | G | 模块电源地 |\n| 3 | MIC_D0 | I/O | 0号麦克风和1号麦克风的I²S 接口的串行数据输出 |\n| 4 | MIC_D1 | I/O | 2号麦克风和3号麦克风的I²S 接口的串行数据输出 |\n| 5 | MIC_D2 | I/O | 4号麦克风和5号麦克风的I²S 接口的串行数据输出 |\n| 6 | MIC_D3 | I/O | 中心麦克风的I²S 接口的串行数据输出 |\n| 7 | MIC_WS | I/O | I²S 接口的串行数据字选择 |\n| 8 | MIC_CK | I/O | I²S 接口的串行数据时钟 |\n| 9 | LED_CK | I/O | LED 的 I²C 接口的串行数据时钟 |\n| 10 | LED_DA | I/O | LED 的 I²C 接口的串行数据输出 |\n\n\n<img src=\"./../../assets/spmod/spmod_micarray/MicArray.png\" width=55%>\n\n## 例程代码\n\n### 接线\n\n杜邦线接法\n\n| 麦克风阵列 | 开发板上的对应管脚 | 代码中所对应的参数 |\n| ---- | ---- | ---- |\n| VIN | 3.3v/5v | —— |\n| GND | GND | —— |\n| LED_CK | I/O 口 | sk9822_clk |\n| LED_DA | I/O 口 | sk9822_dat |\n| MIC_D0 | I/O 口 | i2s_d0 |\n| MIC_D1 | I/O 口 | i2s_d1 |\n| MIC_D2 | I/O 口 | i2s_d2 |\n| MIC_D3 | I/O 口 | i2s_d3 |\n| MIC_WS | I/O 口 | i2s_ws |\n| MIC_CK | I/O 口 | i2s_sclk |\n\n因为 K210 的 FPIOA 的特性, 支持每个外设随意映射到任意引脚；所以将上面的表格中的 `I/O 口` 与自己的板子上带有数字标识的引脚连起来即可，类似于标有 GND 这种特殊标识的就不算所谓的数字标识引脚。连接完引脚后可以查看下面代码下方关于代码中引脚的说明。\n\n### 烧录固件\n\n前往 [下载站](https://dl.sipeed.com/shareURL/MAIX/MaixPy/release/master/maixpy_v0.6.2_84_g8fcd84a58) 下载固件，下载 [固件说明](https://wiki.sipeed.com/soft/maixpy/zh/get_started/upgrade_maixpy_firmware.html#%E5%9B%BA%E4%BB%B6%E5%91%BD%E5%90%8D%E8%AF%B4%E6%98%8E) 里面的默认固件即可使用。\n\n### python代码\n\n```python\nfrom Maix import MIC_ARRAY as mic\nimport lcd\n\nlcd.init()\nmic.init()\n#mic.init(i2s_d0=23, i2s_d1=22, i2s_d2=21, i2s_d3=20, i2s_ws=19, i2s_sclk=18, sk9822_dat=24, sk9822_clk=25)\n\nwhile True:\n    imga = mic.get_map()\n    b = mic.get_dir(imga)\n    a = mic.set_led(b,(0,0,255))\n    imgb = imga.resize(160,160)\n    imgc = imgb.to_rainbow(1)\n    a = lcd.display(imgc)\nmic.deinit()\n\n```\n需要自行根据自己的连接的管脚号，对应着修改`mic.init(i2s_d0=23, i2s_d1=22, i2s_d2=21, i2s_d3=20, i2s_ws=19, i2s_sclk=18, sk9822_dat=24, sk9822_clk=25)`里面的参数。比如如果将麦克风阵列上的 `MIC_D0` 与 K210 板子上面的标号为 25 的引脚相连，那么对应在代码中的参数需要修改为 `i2s_d0=25`，其他七个引脚也是同理。因为每个人的配置是不同的，所以使用杜邦线的话没有固定的连接说明，个人自行修改引脚参数，并且不要忘记删掉`mic.init(...)`前面的注释。\n\n\n## 资料\n\n[麦克风阵列硬件资料](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-R6+1_MicArray)\n\n## 更多使用方法\n\n请移步到[论坛](https://bbs.sipeed.com)上查看\n\n## 常见问题\n\n### 出现报错信息\n\n![报错信息](./../../assets/spmod/spmod_micarray/spmod_micarray_err.png)\n\n更换其他IO管脚即可"}, "/hardware/zh/modules/debugger_and_uart.html": {"title": "施工中", "content": "---\ntitle: 施工中\n---\n\nSipeed RV-Debugger Lite JTAG /串口调试\n\nSipeed RV debugger plus JTAG+UART\n\nSipeed USB-JTAG/TTL\n\nSipeed 双串口转USB模块"}, "/hardware/zh/maixface/mf_ml_module/mf5_product.html": {"title": "MF5", "content": "# MF5\n\n## MF5 外观一览\n\n\n## MF5 板载接口\n\n<table border=\"2\">\n    <tr>\n        <th colspan=6>MaixFace 5 引脚信息</th>\n    </tr>\n    <tr>\n        <td colspan=3><img src=\"./../assets/mf_module/mf5/mf5_if_1.png\" height=400></td>\n        <td colspan=3><img src=\"./../assets/mf_module/mf5/mf5_if_2.png\" height=400></td>\n    </tr>\n    <tr>\n        <td>Maix Face Slik</td>\n        <td>K210 IO</td>\n        <td>ESP8285 IO</td>\n        <td>Function</td>\n        <td>Remark</td>\n        <td>IO Voltage</td>\n    </tr>\n    <tr>\n        <td>VIN</td>\n        <td>-</td>\n        <td>-</td>\n        <td>电源输入正极</td>\n        <td>12V</td>\n        <td rowspan=22>3.3V</td>\n    </tr>\n    <tr>\n        <td>GND</td>\n        <td>-</td>\n        <td>-</td>\n        <td>电源输入负极</td>\n        <td>电源GND</td>\n    </tr>\n    <tr>\n        <td>NC</td>\n        <td>-</td>\n        <td>-</td>\n        <td>继电器常闭触点</td>\n        <td rowspan=3>继电器</td>\n    </tr>\n    <tr>\n        <td>COM</td>\n        <td>-</td>\n        <td>-</td>\n        <td>继电器公共触点</td>\n    </tr>\n    <tr>\n        <td>NO</td>\n        <td>-</td>\n        <td>-</td>\n        <td>继电器常开触点</td>\n    </tr>\n    <tr>\n        <td>GND</td>\n        <td>-</td>\n        <td>-</td>\n        <td>韦根接口RETURN</td>\n        <td rowspan=3>韦根接口</td>\n    </tr>\n    <tr>\n        <td>WGD0</td>\n        <td>IO14</td>\n        <td>-</td>\n        <td>韦根接口 D0</td>\n    </tr>\n    <tr>\n        <td>WGD1</td>\n        <td>IO15</td>\n        <td>-</td>\n        <td>韦根接口 D1</td>\n    </tr>\n    <tr>\n        <td>GND</td>\n        <td>-</td>\n        <td>-</td>\n        <td>开门信号地</td>\n        <td rowspan=2>开门信号 低电平: Open</td>\n    </tr>\n    <tr>\n        <td>OPEN</td>\n        <td>IO16</td>\n        <td>-</td>\n        <td>开门信号输入</td>\n    </tr>\n    <tr>\n        <td>3V3</td>\n        <td>-</td>\n        <td>-</td>\n        <td>3.3V</td>\n        <td rowspan=6>以太网/刷卡接口</td>\n    </tr>\n    <tr>\n        <td>CS</td>\n        <td>IO24</td>\n        <td>-</td>\n        <td>SPI CS</td>\n    </tr>\n    <tr>\n        <td>MISO</td>\n        <td>IO2</td>\n        <td>-</td>\n        <td>SPI MISO</td>\n    </tr>\n    <tr>\n        <td>SCLK</td>\n        <td>IO1</td>\n        <td>-</td>\n        <td>SPI SCLK</td>\n    </tr>\n    <tr>\n        <td>MOSI</td>\n        <td>IO3</td>\n        <td>-</td>\n        <td>SPI MOSI</td>\n    </tr>\n    <tr>\n        <td>GND</td>\n        <td>-</td>\n        <td>-</td>\n        <td>GND</td>\n    </tr>\n    <tr>\n        <td>5V</td>\n        <td>-</td>\n        <td>-</td>\n        <td>5V</td>\n        <td rowspan=6>串口/K210下载</td>\n    </tr>\n    <tr>\n        <td>RST</td>\n        <td>IO54</td>\n        <td>-</td>\n        <td>K210复位</td>\n    </tr>\n    <tr>\n        <td>BOOT</td>\n        <td>IO16</td>\n        <td>-</td>\n        <td>K210进入ISP模式</td>\n    </tr>\n    <tr>\n        <td>ISPTX</td>\n        <td>IO5</td>\n        <td>-</td>\n        <td>ISPTX</td>\n    </tr>\n    <tr>\n        <td>ISPRX</td>\n        <td>IO4</td>\n        <td>-</td>\n        <td>ISPRX</td>\n    </tr>\n    <tr>\n        <td>GND</td>\n        <td>-</td>\n        <td>-</td>\n        <td>GND</td>\n    </tr>\n</table>\n\n## MF5 固件说明\n\nMF5 为人脸识别门禁成品，默认烧录的固件不支持串口协议；\n\n在烧录串口协议固件之后，协议串口为 WGD0-IO14(RX)，WGD1-1O15(TX)。"}, "/hardware/zh/maixface/mf_ml_module/mf_update_firmwave.html": {"title": "MF 固件相关升级说明", "content": "# MF 固件相关升级说明\n\n在使用 **MF 人脸识别模块**过程中，如果存在固件存在 bug、有新功能固件 release、误擦除固件、字体资源、图片资源，那么就需要通过烧录还原固件。\n\n## MF 人脸识别模块固件、资源说明\n\n**MF 人脸识别模块** 固件、字体资源、图片资源、说明如下：\n\n\n| 类型     | 烧录地址 | 长度  | 说明 |\n| -------- | -------- | ----- | ---- |\n| 固件     | 0x000000 |       |      |\n| 人脸模型 |          |       |      |\n| 字体资源 |          |       |      |\n| 图片资源 |          |       |      |\n| 板级配置 | 0x7FF000 | 4 KB  |      |\n| 人脸信息 | 0x800000 | 64 KB |      |\n|          |          |       |      |\n\n> 一般开发者在拿到 MF 模块之后，不需要关心该资源分布\n\n- MF 固件说明\n\n| 固件分类        | 方向       | 协议     | 识别方式 | wechat | 固件类型数量 |\n| --------------- | ---------- | -------- | -------- | ------ | ------------ |\n| MF0 体验版模块  | 横版, 竖版 | bin      | vis      |        | 2            |\n| MF1 离线版模块  | 横版，竖版 | bin/json | vis+ir   |        | 8            |\n| MF1_to_MF2  | 横版，竖版 | bin/json | vis+ir   |        | 8            |\n| MF2 微信半成品  | 横版，竖版 | bin      | vis      | 支持   | 2            |\n| MF4 微信 (成品) | 竖版       | bin      | vis      | 支持   | 1            |\n| MF5 微信 (成品) | 竖版       | bin/json | vis      | 支持   | 2            |\n\n- 字体资源\n- 图片资源\n- 清除配信息\n\n## MF1 固件烧录(升级，还原出厂配置)步骤\n\n在使用 **MF 人脸识别模块**过程中，如果存在固件存在 bug、有新功能固件 release、误擦除固件、字体资源、图片资源，那么就需要通过烧录还原固件。\n\n烧录步骤：\n\n1. 烧录 key_gen.bin 获取 key\n\n2. 通过 support@sipeed.com 获取模型文件\n\n3. 烧录模型文件\n\n4. 烧录图片，字体资源，\n\n### 准备：\n\n在升级，还原出厂配置**MF 人脸识别模块** 之前我们需要准备软硬件。\n\n**硬件准备：**\n\n - **MF 人脸识别模块**\n\n - USB Type-C 数据线\n\n**软件准备：**\n\n  - 烧录软件： kflash_gui(这里使用 kflash_gui v1.6.5 版本)\n\n    下载链接:\n    - Github: [kflash_gui](https://github.com/Sipeed/kflash_gui)\n    - Sipeed: [Sipeed 官方下载站 - kflash_gui](https://dl.sipeed.com/MAIX/tools/kflash_gui/kflash_gui_v1.6.5)\n\n  - 烧录资源文件(根据情况烧录)：**MF 人脸识别模块固件**、算法模型文件、字体资源文件、图片资源文件\n\n\n    资源文件获取统一发送邮件到: Email: Support@sipeed.com\n\n      推荐发送邮件格式如下:\n\n      > 问题类型: [MF 固件资源获取/（简短描述你的问题）]\n      >\n      > 使用硬件/固件版本: [MF0/MF1/MF2/MF4/MF5(这里标注使用的究竟是哪个模块、产品)]\n      >\n      > 内容: [最新固件获取/固件丢失/模型丢失(描述相关情况)]\n      >\n      > 机器码: [xxxxxxxxxxxxxxxxxxxxx(只有模型丢失时需要)]\n\n\n### 烧录固件,资源文件\n\n使用USB Type-C 数据线 将**MF 人脸识别模块** 连接 电脑\n\n![MF1 connect USB](./../assets/mf_module/mf1/mf1_view.png)\n\n打开 Kflash_gui 选择需要烧录的文件，选择版型(默认选择`自动选择`， 如果烧录失败则选择 `MaixDuino`)，选择串口号(CH522 有两个串口，失败则尝试另外一个)，配置波特率(默认选择 `150000`, 如果烧录失败则适当减低波特率,如 `115200`)\n\n![image-20200806103433410](./../../maix/assets/kflash_gui/image-20200806103433410.png)\n\n![image-20200806105056527](./../../maix/assets/kflash_gui/image-20200806105056527.png)\n\n## 怎么获取 Key(机器码)\n\n在使用过程中,如果模块的模型丢失或需要更换,需要发送 `Key` 到 <Support@sipeed.com>\n\n推荐发送邮件格式如下:\n\n\n首先下载 [key_gen.bin](https://fdvad021asfd8q.oss-cn-hangzhou.aliyuncs.com/Sipeed_M1/firmware/key_gen_v1.2.bin)\n\n使用 `kflash_gui` 将固件 `key_gen.bin` 烧录到模块中之后,打开串口,波特率为`115200,8,N,1`\n\n> **[kflash_gui](https://github.com/Sipeed/kflash_gui/releases)** 为 K210 固件烧录工具, 源码: [**Sipeed/kflash_gui**](https://github.com/Sipeed/kflash_gui)\n\n建议使用 [`XCOM`](tools/XCOM_V2.6.exe) 来看串口信息\n\n轻点 `DTR` ,再松开,即可使模块复位,看到启动信息\n\n<center class=\"half\">\n<img src=\"../../../zh/maix/assets/other/how_to_get_key.png\" height = 50% width = 80% />\n</center>\n\n## MF 固件横竖版说明\n\n由于采用的摄像头成像方向不同，相差 90度，摄像头寄存器无法配置旋转（软件旋转降低效率），故有横竖版两种固件；\n\n如何确认摄像头对应的固件：（通过摄像头丝印区分）\n\n| 横板 | 竖版 |\n| --- | --- |\n| ![](./../assets/mf_module/mf1/mf_dual_camera_1.jpg) | ![](./../assets/mf_module/mf1/mf_dual_camera_2.png) |"}, "/hardware/zh/maixface/mf_ml_module/mf0_ml_module.html": {"title": "MF0 机器学习核心模组", "content": "# MF0 机器学习核心模组\n\n## 软硬件概述\n\nMF0 人脸识别模块外观一览\n\n<table border=\"3\">\n    <tr>\n        <th colspan=3>MF0</th>\n    </tr>\n    <tr>\n        <td width=\"100\">描述</td>\n        <td>正面视图</td>\n        <td>背面视图</td>\n    </tr>\n    <tr>\n        <td  width=\"100\">MF0</td>\n        <td>\n            <img src=\"./../assets/mf_module/mf0_mf0dock/mf0_pin_map.png\" width=\"600\" alt=\"MF0 正面\">\n            Pin Map</br>\n        </td>\n        <td>\n            <img src=\"./../assets/mf_module/mf0_mf0dock/mf0_buttom.png\" width=\"600\" alt=\"MF0 背面视图\">\n        </td>\n    </tr>\n    <tr>\n        <td>MF0 Dock</td>\n        <td>\n            <!-- <img src=\"../assets/mf_module/mf1_bottom_v2(nand).png\" width=\"600\" alt=\"MF1(NAND Flash) 背面视图\"> -->\n        </td>\n        <td>\n        </td>\n    </tr>\n</table>\n\n### 模块特性：\n\n- CPU ：RISC-V 64bit 双核处理器, 400Mhz 标准频率（可超频）\n- 图像识别：QVGA@60FPS/VGA@30FPS\n- 深度学习框架：TensorFlow/Keras/Darknet\n- 外设：FPIOA、UART、GPIO、SPI、I²C、I²S、WDT、TIMER、etc\n- 2.54mm 间距 DIP/SMT 焊盘\n- 能连接到面包板\n- 板载摄像头连接器\n- ROM：4MByte\n- RAM：6MByte （通用） + 2MByte （ KPU 专用）\n\n### 硬件 pin\n\n| No. | 描述 |\n| --- | --- |\n| 24 | 用户 IO24 |\n| 25 | 用户 IO25 |\n| 26 | 用户 IO26，MF0_Dock(LCD_RST) |\n| 27 | 用户 IO27，MF0_Dock(LCD_CLK) |\n| 28 | 用户 IO28，MF0_Dock(LCD_DC) |\n| 29 | 用户 IO29，MF0_Dock(LCD_SDA) |\n| ---  | --- |\n| BOOT | 上电 boot 模式选择（用户 IO16，不建议用户使用） |\n| IO5  | 用户 IO5（ISP_TX） |\n| IO4  | 用户 IO4（ISP_RX） |\n| EN   | MF0 电源使能引脚, 默认高电平使能 |\n| RST  | K210 复位引脚 |\n| VIN  | 外部供电电源 3.4-5.9V（推荐 5.0V） |\n| GND  | 外部供电电源地 |\n| 3V3  | 模块电源 3.3V 输出 |\n\n## 协议\n\n串口协议：\n\nMFO 默认烧录 HEX 协议固件\nMF0 有两种协议固件，方便用户根据具体需求使用\n\n- HEX 格式串口协议固件\n- JSON 格式串口协议固件\n\nHEX 例程\n\n### 串口协议助手\n\n## 更新 MF0 固件\n\nMF0 硬件连接：\n\n| No. | USB 转串口模块 | MF0 IO | 备注 |\n| --- | --- | --- | --- |\n| 1 | 5V | VIN | --- |\n| 2 | GND | GND | --- |\n| 3 | TX | IO4 | --- |\n| 4 | RX | IO5 | --- |\n| 5 | DTR | BOOT | --- |\n| 6 | RTS | RST | --- |\n\n![](./../assets/mf_module/mf0_mf0dock/mf0_flash.png)\n\nMF0 Dock 硬件连接：\n\n根据下表连接之后，使用 kflash_gui 下载时，需要按下 boot 和 rst 按键，并先松开 rst 再松开 boot 按键，确保 K210 进入下载模式（ISP 模式）\n\n| No. | USB 转串口模块 | MF0 Dock IO | 备注 |\n| --- | --- | --- | --- |\n| 1 | 5V | VIN | --- |\n| 2 | GND | GND | --- |\n| 3 | TX | IO4 | --- |\n| 4 | RX | IO5 | --- |\n\n![](./../zh/maixface/assets/mf_module/mf0_mf0dock/mf0_dock_flash.png)\n\n然后使用 kflash_gui 下载 MF0 固件\n\n![](./../zh/maixface/assets/mf_module/mf0_mf0dock/mf0_upgrade_firmwave.png)"}, "/hardware/zh/maixface/mf_ml_module/mf_precautions.html": {"title": "MF PCB 设计注意事项", "content": "# MF PCB 设计注意事项\n\n## 补光灯：\n\n1、850nm 红外补光灯可以考虑选用 1W 或者 3W 功率的灯珠，因为更大功率的灯珠可以延长使用寿命、减少故障率和提高识别效果\n\n2、红外灯珠和白光灯珠的驱动电路和元件参数，一定要根据实际灯珠选型和数量决定。因为不同的电路成本不一样，亮度感觉不一样，不同客户的需求不一样，因此客户需要根据实际情况选择和调整参数。强烈建议使用光度计去控制整个设计调试和批量生产的红外灯珠亮度的一致性\n\n3、850nm 光线具有一定的穿透性。 目前已证实红外补光灯的 850nm 光线会从摄像头模组的四周和后背穿透进去，影响成像，进而影响屏幕画面或者影响识别效果。 因此必须在摄像头和补光灯之间，用 850nm 无法穿透的材料/喷漆/胶布等阻隔从灯珠散射到摄像头内部的红外光线。 另外，也可以通过拉开红外灯珠与摄像头的距离，距离保持 15mm 以上就能减少 80% 的负面影响，距离保持 20mm 以上，红外线就基本不会透射进摄像头了\n\n4、红外补光灯与外壳前盖板（亚克力/塑料等材质）之间的距离应尽量少，即补光灯与盖板尽量紧贴。如果补光灯与盖板距离较大，会严重影响识别效果\n\n5、在白光补光灯方面，尽量放置多个LED，使用均光板做柔光处理。均光板的面积尽量大。目前市面上的方案有圆圈跑道式的均光板，有小范围片状式的均光板，这个请客户的结构工程师在使用体验和外观设计上对此进行设计。如果不做柔光处理，白光补光灯会刺眼，并且使用户眼睛有十几秒的残影，使用体验不好\n\n6、白光灯珠和红外灯珠的焊盘，需要连接到尽可能大的铜皮，以此提高散热性能\n\n7、白光补光灯对地的电容应该去掉，否则会导致开灯的时候复位\n\n\n\n## 基本信息：\n\n1、M1/M1w 模块底部的散热焊盘，需要连接到尽可能大的铜皮，以此提高散热性能\n\n2、模块的 5V 是输入，外部给模块供电的；模块的 1.8V 和 3.3V 是模块内部 DC-DC 生成的，主要是给模块内部核心元件使用的，其次是给模块外部的小电流元件使用（比如作为屏幕和摄像头的 1.8V 参考电压等小电流需求。不建议提供给模块外部的大电流元件使用）\n\n3、如果需要做电容触摸，尽量把触摸芯片放到靠近手指触摸的位置之下。因为触摸芯片到触摸面板之间的走线长度，长度越长越难把握灵敏度、越容易受干扰\n\n4、如果使用 M1w 模块，则需要遵守天线的摆放原则来摆放 IPEX 2.4G 天线，否则信号会有较大程度的损失\n\n5、M1/M1w 模块的 RST、BANK6/7、摄像头 8 位数据和屏幕 8 位数据的工作电压和容忍电压都是 1.8V，BANK0/1/2/3/4/5 的工作电压和容忍电压都是 3.3V 耐压，一定不能超出耐压范围使用。如果要把 RST 引脚引出使用，强烈建议增加保护电路，以下两种电路都可以起到保护/兼容更高电平的作用：\n\n![](./../assets/other/mf_precautions.png)\n\n6、IO16（BOOT）要在底板加 10K 上拉电阻到 3.3V\n\n7、FPIOA 允许用户将 255 个内部功能映射到芯片外围的 48 个自由 IO 上\n\n8、M1 和 M1w 的区别是：M1 没有 WIFI，M1w 有 WIFI，M1w 模块的 IO0-IO3 这 4 个引脚是 K210 与 WIFI(ESP8285) 芯片之间的 SPI 连接，因此不能用作其他用途\n\n9、请一定要在 PCB 上预留 M1/M1w 模块的 K210 和 WIFI 的下载接口，具体可以参考我们提供的标案原理图\n\n### 认证方面：\n\n1、所有信号都要在靠近源端的地方预留串联磁珠或者RC 低通滤波电路，用来消除过冲和振铃。\n    RC 参数是 100R+100PF（这是屏幕信号的参数，其他信号必须根据实际测试决定，不能影响正常功能）。\n    低通 RC 形式是指：信号从源端输出先经过电阻/磁珠后经过电容，RC 元件靠近源端放置。\n\n2、尽量在各路电源VCC预留串联焊盘，可能需要焊接磁珠或者电感，注意磁珠需要选择额定电流大于实际工作电流的\n\n3、尽量在每个可能泄漏的位置、使用到的IO和电源线路等地方加上 ESD 二极管。ESD 二极管放置的位置根据ESD设计原则摆放\n\n4、为了提高ESD防护性能，应该在屏幕到主板之间预留足够的位置放置导电泡棉。主板在该位置阻焊开窗。该位置应尽量接近供电电源的GND\n\n5、PCB四周尽量打过孔，让过孔包围着PCB，元件需要远离可能的静电泄露点"}, "/hardware/zh/maixface/mf_ml_module/mf1_ml_module.html": {"title": "MF 人脸识别模块 MF1", "content": "# MF 人脸识别模块 MF1\n\n## **修改记录**\n\n|版本|时间|修改内容|\n|-|-|-|\n|1.0|2019.07.30|初始版本|\n|1.2|2020.08.1| |\n\n## 目录\n\n- [MF 人脸识别模块 MF1](#mf-人脸识别模块-mf1)\n  - [**修改记录**](#修改记录)\n  - [目录](#目录)\n  - [**硬件资源简介**](#硬件资源简介)\n  - [**功能简介**](#功能简介)\n    <!-- - [微信小程序模块](#微信小程序模块) -->\n    <!-- - [二次开发](#二次开发) -->\n<!-- - [**Q&A**](#qa) -->\n\n\n## **硬件资源简介**\n\n<center class=\"half\">\n<img src=\"./../assests/front.png\" width = 50% /><img src=\"assests/bottom.jpg\" width = 50% />\n</center>\n\n* CPU : **RISC-V** 双核 64bit、内置FPU、频率 400Mhz-500Mhz\n* 图像识别：活体识别\n* 双摄像头：红外（IR）+可见光（VIS）\n* 红外填充光：3W 红外发光二极管\n* 显示器：1.33 英寸 IPS、分辨率 240*320显示屏\n* 其他外设：电容触摸按钮/支持 3W 扬声器/MEMS 麦克风/SD NAND/RGB LED\n* 无线功能(可选) : 支持 2.4G 802.11.b/g/n、SPI 连接\n\n* [淘宝购买](https://item.taobao.com/item.htm?spm=a1z10.1-c.w4004-21231188695.25.27ba52b1bsusf7&id=599138281058)\n\n<div STYLE=\"page-break-after: always;\"></div>\n\n## **功能简介**\n\n\n![MF1 引脚图](./../assets/mf_module/mf1/mf1_pin_map.png)"}, "/hardware/zh/maixface/core_modules/k210_core_modules.html": {"title": "K210 核心模块", "content": "# K210 核心模块\n\n现有四款基于 K210 开发的 AIOT 模块：M1, M1w, M1n, MF0\n\n- 特性说明：\n\n这四款模块都是基于嘉楠堪智科技的边缘智能计算芯片K210（RISC-V架构）设计的。主控芯片内置64位双核高性能低功耗处理器，每个核都有浮点运算单元（FPU），具备卷积人工神经网络智能硬件加速器（KPU）和快速傅里叶变换加速器（FFT）、搭载现场可编程IO阵列（FPIOA），支持多种主流AI编程框架。\n\n\n### Maix AIOT 模块差异对比\n\n|                            | M1                                                           | M1w                                                         | M1n                                                          | MF0                                                          |\n| -------------------------- | ------------------------------------------------------------ | ----------------------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 外观                       | ![M1 模组](./../assets/mf_module/m1_m1w/sipeed_m1_module.png) | ![M1W 模组](./../assets/mf_module/m1_m1w/sipeed_m1w_module.png) | ![M1n 模组](./../assets/mf_module/m1n/sipeed_m1n_module.png) | ![MF0 模组](./../assets/mf_module/mf0_mf0dock/sipeed_mf0_module.png) |\n| 尺寸                       | 25.4x25.4x3.3（mm）                                          | 25.4x25.4x3.3（mm）                                         | 25.0x22.0x2.7（mm）                                          | 20.0x20.0x4.5（mm）                                          |\n| 电压输出（提供给底板使用） | 1.8V和3.3V                                                   | 1.8V和3.3V                                                  | 1.8V和3.3V                                                   | 3.3V                                                         |\n| 最大功耗（非瞬态）         | 1.5W                                                         | 3W                                                          | 1.5W                                                         | 1.5W                                                         |\n| WIFI功能                   | 无                                                           | 有（K210与ESP8285通过SPI接口和串口连接）                    | 无                                                           | 无                                                           |\n| 板载摄像头连接器           | 无                                                           | 无                                                          | 有（仅兼容单摄像头）                                         | 有（仅兼容单摄像头）                                         |\n| 引脚形式                   | 邮票孔                                                       | 邮票孔                                                      | NGFF金手指 B-KEY                                             | 2.54mm间距直插焊盘+SMD焊盘                                   |\n| 是否引出摄像头信号         | 全引出                                                       | 全引出                                                      | 全引出                                                       | 无                                                           |\n| 是否引出屏幕信号           | 全引出                                                       | 全引出                                                      | 全引出                                                       | 无                                                           |\n| 引出普通IO口数量           | 48个（全引出）                                               | 48个（全引出）                                              | 44个（IO0-3没引出）                                          | 9个                                                          |\n\n\n\n## 模块引脚定义\n\n具体可下载规格书\n\nM1/M1w: https://dl.sipeed.com/MAIX/HDK/Sipeed-M1&M1W/Specifications\n\nM1n: https://dl.sipeed.com/MAIX/HDK/Sipeed-M1n\n\nMF0: https://dl.sipeed.com/MAIX/HDK/Sipeed-MF0/MF0-2802\n\n## M1/M1W(k210) ISP 模式(烧录模式)\n\n更新 K210 时，需要让 K210 进入 ISP 模式，相关信息如下：\n\n- ISP 引脚\n\n  | ISP 引脚 | 描述       | 备注     |\n  | ------------- | ---------- | -------- |\n  | BOOT (IO_16)         | 启动模式选择 | 低电平进入，ISP 模式 |\n  | ISP_RX (IO_4)         | ISP 串口数据接收 |  |\n  | ISP_TX (IO_5)         | ISP 串口数据发送 |  |\n\n- Boot 选择\n\n **IO_16** 用于 **boot** 模式选择，上电时，拉高进入 **Flash** 启动，拉低进入 **ISP** 模式\n\n  | Boot 选择引脚 | 拉高       | 拉低     |\n  | ------------- | ---------- | -------- |\n  | IO_16         | Flash 启动 | ISP 模式 |\n\n> K210 ISP 模式下，串口波特率建议配置为: 115200，1 停止位，8 数据位，不校验。\n\n- 参考自动进入下载模式电路：\n\n![](../../assets/mf_module/m1_m1w/K210_boot_reference.png)\n\n\n参考来源：\n\n> 《K210技术规格书 v0.1.5》\n> - 2.5 特殊引脚:\n    IO_16 用于 boot 模式选择，上电复位时，拉高进入 FLASH 启动，拉低进入 ISP 模式。复位后，IO_0、\n    IO_1、IO_2、IO_3 为 JTAG 引脚。IO_4、IO_5 为 ISP 引脚。\n\n## MF PCB 注意事项\n\n使用 K210(M1/M1W) 自行设计人脸识别产品，请参考 [《MF 人脸识别模块 PCB 设计注意事项》](../mf_ml_module/mf_precautions.html)"}, "/hardware/zh/maix/maixpy_develop_kit_board/develop_kit_board.html": {"title": "Maix 系列开发板", "content": "# Maix 系列开发板\n\n\n##  Maix 系列开发板\n\n目前 MaixPy 系列开发板有一下这几款型号:\n\n- Maix Go\n\n- Maix Dock\n\n- Maix Duino\n\n- Maix Bit\n\n- Maix Cube\n\n- Maix Amigo\n<style type=\"text/css\">\nth {\n    background-color: #fbfbfb;\n    border: 2px solid #f1f1f1;\n}\n</style>\n\n## 差异对比\n<table>\n  <tbody>\n    <tr>\n      <th width=\"226\" scope=\"col\" >&nbsp;</th>\n      <th width=\"226\" scope=\"col\" ><a href=\"maix_go.html\"><img src=\"../assets/dk_board/maix_go/Go.jpg\" width=\"200\"  alt=\"\"/></a></th>\n      <th width=\"226\" scope=\"col\"><a href=\"maix_bit.html\"><img src=\"../assets/dk_board/maix_bit/Bit.png\" width=\"200\"  alt=\"Bit\"/></a></th>\n      <th width=\"226\" scope=\"col\"><a href=\"maix_cube.html\"><img src=\"../assets/dk_board/maix_cube/maix_cube_1.png\" width=\"200\"  alt=\"maix_cube\"/></a></th>\n      <th width=\"226\" scope=\"col\"><a href=\"Maix_dock.html\"><img src=\"../assets/dk_board/maix_dock/Dan_Dock.png\" width=\"200\"  alt=\"\"/></a></th>\n      <th width=\"226\" scope=\"col\"><a href=\"maix_duino.html\"><img src=\"../assets/dk_board/maix_duino/DSC_08141.png\" width=\"200\"  alt=\"\"/></a></th>    \n      <th width=\"226\" scope=\"col\"><a href=\"maix_Amigo.html\"><img src=\"../assets/dk_board/maxi_amigo/amigo.png\" width=\"200\"   alt=\"\"/></a> </th>  \n    </tr>\n    <tr>\n      <td>型号 </td>\n      <td>Maix Go</td>\n      <td>Maix Bit</td>\n      <td>Maix Cube</td>\n      <td><p>Maix Dock</p></td>\n      <td>Maix Duino</td>\n      <td>Maix Amigo</td>\n    </tr>\n    <tr>\n      <td>USB IC</td>\n      <td>STM32</td>\n      <td>CH552/CH340</td>\n      <td>GD32/CH552</td>\n      <td>CH340</td>\n      <td>CH552</td>\n      <td>GD32</td>\n    </tr>\n    <tr>\n      <td>核心模块</td>\n      <td>M1</td>\n      <td>M1</td>\n      <td>M1n</td>\n      <td>M1/M1W</td>\n      <td>M1</td>\n      <td>M1n</td>\n    </tr>\n    <tr>\n      <td height=\"48\">WIFI 功能</td>\n      <td>M1W 模块集成 ESP8285</td>\n      <td>---</td>\n      <td>---</td>\n      <td>Dock M1 (不支持 WIFI)<br/>\n        Dock M1W(支持,M1W 模块集成 ESP8285)</td>\n      <td>板载 ESP32 （支持 WIFI, 蓝牙功能暂时未支持）</td>\n      <td>---</td>\n    </tr>\n  </tbody>\n</table>\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maix/maixpy_develop_kit_board/maix_Amigo.html": {"title": "MaixAmigo", "content": "# MaixAmigo\n\n## 使用教程\n<a href=\"/soft/maixpy/zh/\" target=\"_blank\"> MaixPy </a>\n\n## 概述\n\n  SIPEED MaixAmigo 是基于我们 M1n 模块(主控:Kendryte K210)开发的一款集学习开发和商用一体的人脸识别产品.\n  <br/>MaixAmigo 集成前后摄像头、TF卡槽、用户按键、TFT显示屏、锂电池、扬声器麦克风、扩展接口等, 用户可使用 MaixAmigo 轻松搭建一款人脸识别门禁系统, 同时还预留开发调试接口, 也能将其作为一款功能强大的 AI 学习开发板.\n\n## MaixAmigo 外观及功能介绍\n\n### 外观一览\n\n![MaixAmigo](./../assets/dk_board/maxi_amigo/image-20200730120223557.png)\n\n### 板载硬件功能介绍\n\n- 3.5 寸 **TFT** 屏幕: 分辨率 **320x480***\n- 3.5 寸电阻触摸屏： FT6X36\n- 芯片复位按键\n- 电源按键: 短按开机, 长按 *8S* 关机\n- 三个功能按键\n- Grove 接口: 板载 3 个**Grove** 数字接口, 传感器,控制器扩展无限可能~\n- SP-MOD 接口: 板载 3 个更加强大,更高扩展性的 **SP-MOD** 数字接口, I2C,SPI(标准,双线,四线模式)等接口均可以使用\n  - 后续支持乐高手柄功能\n- TF 卡槽: 多媒体资源扩展,支持大容量储存\n- 摄像头: 搭载 **OV7740** **30W** 像素 与 **GC0328 30W 像素** **Sensor**\n- Type-C 接口: USB-TypeC 电源、调试接口,正反盲插\n\n\n- 电源管理控制单元: AXP173\n  - 板载 600mAh 锂电池,支持用户充放电控制\n- 音频驱动 IC: ES8374\n  - 支持音频录制,播放\n- 三轴加速度传感器: MSA301\n\n### 板载扩展接口\n\nMaixAmigo 对用户开放了两个高度扩展的接口: SP-MOD 与 Grove 接口,\n用户可以很方便的进行 DIY\n\n#### SP-MOD 接口\n\nSP-MOD 即为 sipeed module, simplify PMOD, super module\n\n| 接口 | 接口描述 |\n|---|---|\n|SP-MODE 接口描述|![spmod_interface_1](./../../../assets/spmod/spmod_interface_1.png)|\n|硬件接口|![spmod_interface_2](./../../../assets/spmod/spmod_interface_2.png)|\n\n#### Grove 接口\n\nGrove 接口的线缆有 4 种颜色, 用户可以根据颜色快速区别\n![grove_interface](./../assets/interface_grove/grove_interface.jpg)\n\n| pin | 颜色 | 描述 |\n| --- | --- | --- |\n| pin 1 | 黄色 | (例如, I2C Grove Connectors上的SCL) |\n| pin 2 | 白色 | (例如, I2C Grove Connectors上的SDA) |\n| pin 3 | 红色 |   VCC (所有的Grove接口红色都是VCC) |\n| pin 4 | 黑色 |   GND (所有的Grove接口红色都是GND) |\n\nGrove模块主要有 4 种接口:\n\n- Grove Digital 数字接口:\n\n    Grove 数字接口由 Grove 插头的四条标准线组成.\n    两条信号线通常称为 D0 和 D1 .\n    大多数模块只使用 D0, 但有些(像LED Bar Grove显示屏)使用两者.通常核心板会将板卡上的第一个Grove连接头称为 D0, 第二个称为 D1.第一个接头会连接到主控芯片的 DO/D1 管脚, 第二个连接头会连接到主控芯片的D1/D2引脚, 后面的连接头以此类推.\n\n|pin  |Function | Note |\n| ---|---|---|\n| pin1 | Dn | 第一个数字输入 | \n| pin2 | Dn+1 | 第二个数字输入 |\n| pin3 | VCC | 供电引脚 5V/3.3V |\n| pin4 | GND | 地 |\n\n- Grove Analog 模拟接口\n    Grove模拟接口由Grove插头的四条标准线组成.\n    两条信号线通常称为A0和A1.\n    大多数模块只使用A0，但有些（像LED Bar Grove显示屏）使用两者.\n    通常核心板会将板卡上的第一个Grove连接头称为A0，第二个称为A1。第一个接头会连接到主控芯片的AO/A1管脚，第二个连接头会连接到主控芯片的A1/A2引脚，后面的连接头以此类推.\n\n| pin  | Function | Note |\n| ---|---|---|\n| pin1 | An | 第一个模拟输入 | \n| pin2 | An+1 | 第二个模拟输入 |\n| pin3 | VCC | 供电引脚 5V/3.3V |\n| pin4 | GND | 地 |\n\n\n- Grove UART :\n    The Grove UART 是特殊的一种数字输入输出接口\n    它使用引脚 1 和引脚 2 进行串行输入和发送\n    引脚1是 RX 线(用于接收数据, 因此是输入)\n    其中引脚 2 是 TX 线(用于向 Grove 模块传输数据)\n\n| pin  | Function | Note |\n| --- | --- | --- |\n| pin1 | RX | 串行接收 |\n| pin2 | TX | 串行发送 |\n| pin3 | VCC | 供电引脚 5V/3.3V |\n| pin4 | GND | 地 |\n\n- Grove I2C:\n    有许多类型的 I2C Grove 传感器可用.MaixAmigo 上的 Grove 只支持 3.3V 传感器\n\n  Grove I2C 连接器具有标准布局.引脚 1 是SCL信号, 引脚 2 是SDA信号\n\n| pin  | Function | Note |\n| --- | --- | --- |\n| pin1 | SCL | I2C 时钟 |\n| pin2 | SDA | I2C 数据 |\n| pin3 | VCC | 供电引脚, 5V/3.3V |\n| pin4 | GND | 地 |\n\n### 板载 I2C 设备\n\nMaixAmigo 板载 I2C 传感器/IC\n\n| IC | 设备 id | I2C 地址(7位地址) |\n| --- | --- | --- |\n| ES8374 | 0x08 | 0x10 |\n| MSA301 | 0x13 | 0x26 |\n| AXP173 | 0x68 | 0x34 |\n\n## 参数\nMaix Amigo内置64位400Mhz双核高性能处理器,拥有8M的片上SRAM，16MiB FLASH大容量存储,轻松处理多媒体应用,在AI机器视觉、听觉性能方便表现突出，内置多种硬件加速单元（KPU、FPU，FFT等)，总算力最高可达1TOPS,可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音扫描和语音数据输出的前置处理工作\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>摄像头帧率</td>\n        <td>OV7740/QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>离线语音识别，声场</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持MobileNetV1/V2<li>人脸识别<li>ASR</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>硬件加速单元</td>\n        <td><li>KPU卷积运算加速器<li>FPU浮点运算加速器<li>APU音频处理器<li>FFT傅里叶变换加速器</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\" >开发板参数</th>   \n        </tr>\n    </thead>\n        <td> 板载资源</td>\n        <td><li>3.5寸TFT屏幕<li>复位按键*1<li>功能按键*3<li>前后摄像头*2<li>LED*3<li>加速度传感器*1</td>\n    </tr>\n    <tr>\n        <td>板载接口</td>\n        <td><li>USB Type-C接口<li>音频接口(支持外接扬声器)<li>TF卡槽<li>Grove标准接口<li>SP-MOD接口(支持SP-MOD接口模块)</td>\n    </tr>\n    <tr>\n        <td>尺寸</td>\n        <td>104.3*63.3*16.5mm</td>\n    </tr>\n    <tr>\n        <td>供电电压</td>\n        <td>USB-type或内部锂电池（520mAh）</td>\n    </tr>\n</table>\n    \n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n        <th colspan = \"2\">软件开发</th>\n        <tr>\n    </thead>\n    <tr>\n    <td>软件环境</td>\n    <td>MaixPy（microPython）</td>\n    </tr>\n    <tr>\n    <td>开发环境</td>\n    <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td>\n    </tr>\n    <tr>\n    <td>编程语言</td>\n    <td>C，MicroPython</td>\n    </tr>\n</table>\n\n## 相关资料下载\n\nMaix-Amigo 资料下载：[Sipeed-Amigo](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Amigo)\n\nMaix-Amigo 规格书下载：[Sipeed-Amigo](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Amigo/ProductSpecification)\n\nMaix-Amigo IPS 版本 原理图下载：<a href=\"https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Amigo/2970/Maix_Amigo_2970(Schematic).pdf\">Maix_Amigo_2970(Schematic).pdf</a>\n\nMaix-Amigo TFT 版本 原理图下载：<a href=\"https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Amigo/2960/Maix_Amigo_2960(Schematic).pdf\">Maix_Amigo_2960(Schematic).pdf</a>\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maix/maixpy_develop_kit_board/maix_bit.html": {"title": "Maix Bit", "content": "# Maix Bit\n\n## 教程&快速上手\n\n相关的使用教程入口<a href=\"/soft/maixpy/zh/\" target=\"_blank\"> MaixPy </a>\n\n## 描述\nMAIX Bit开发板是SiPEED公司MAIX产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片K210(RISC-V架构 64位双核)设计的一款AIOT开发板。开发板使用模块+底板方式设计，整洁小巧，板载Type-C接口和USB-UART电路，用户可以直接通过USB Type-C线连接电脑进行开发，配置128Mbit Flash、LCD、DVP、Micro SD卡等接口并把所有IO引出，方便用户扩展。\n\n## 外观\n<img src=\"./../assets/dk_board/maix_bit/Bit.png\" alt=\"Maxi bit\" >\n\n## 特性\n\nMaixBit开发板以K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。\n\n\n## 应用\n智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等;\n医学行业应用，如辅助诊断，医学图像识别;\n智能工业应用，如工业机械，智能分拣，电气设备监控等;\n教育机器人，智能互动平台，教育效率检查等教育应用;\n农业应用，如农业监测，病虫害监测，自动控制等\n\n## 参数\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>图像识别</td>\n        <td>QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>麦克风阵列(8mics)</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>视频处理</td>\n        <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754-2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\" >开发板参数</th>   \n        </tr>\n    </thead>\n        <td> 板载资源</td>\n        <td><li>按键*2 <li>RGB灯*1<li>MEMS Microphone*1<li>USB to UART<li>128Mbit Flash*1</td>\n    </tr>\n    <tr>\n        <td>板载接口</td>\n        <td><li>USB Type-C接口<li>24PIN DVP摄像头接口<li>24PIN LCD接口<li>MicroSD卡槽<li>所有IO排针引脚引出</td>\n    </tr>\n    <tr>\n        <td>尺寸</td>\n        <td>53.3*25.4mm</td>\n    </tr>\n    <tr>\n        <td>供电电压</td>\n        <td>5.0V @ 300mA（供电电流需大于300mA)</td>\n    </tr>\n    <tr>\n        <td>工作温度</td>\n        <td>-30℃ ~85C</td>\n    </tr>\n</table>\n    \n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n        <th colspan = \"2\">软件开发</th>\n        <tr>\n    </thead>\n    <tr>\n    <td>芯片操作系统</td>\n    <td>FreeRTOS、RT-Thread等</td>\n    </tr>\n    <tr>\n    <td>开发环境</td>\n    <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td>\n    </tr>\n    <tr>\n    <td>编程语言</td>\n    <td>C，C++，MicroPython</td>\n    </tr>\n</table>\n\n## 资料下载\nSipeed-Maix-Bit 资料下载：[Sipeed-Maix-Bit](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Bit/Maix-Bit_V2.0_with_MEMS_microphone)\n\nSipeed-Maix-Bit 规格书下载：[Sipeed-Maix-Bit](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Maix-Bit/Specifications/Sipeed%20Maix-Bit%20%E8%A7%84%E6%A0%BC%E4%B9%A6%20V2.0.pdf)\n\nSipeed-Maix-Bit 原理图下载：[Sipeed-Maix-Bit](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Maix-Bit/Maix-Bit_V2.0_with_MEMS_microphone/Maix-Bit_V2.0_Schematic.pdf)\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maix/maixpy_develop_kit_board/maix_go.html": {"title": "Maix Go", "content": "# Maix Go\n\n## 教程&快速上手\n\n<a href=\"/soft/maixpy/zh/\" target=\"_blank\"> MaixPy </a>\n\n## 描述\nMAIX Go开发板是SiPEED公司MAIX产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片K210(RISC-V架构 64位双核)设计的一款AIOT开发板。开发板使用模块+底板方式设计，整洁小巧，板载Type-C接口和USB-UART电路，用户可以直接通过USB Type-C线连接电脑进行开发，配置128Mbit Flash、LCD、DVP、Micro SD卡等接口并把所有IO引出，方便用户扩展。\n\n## 外观\n<img src=\"./../assets/dk_board/maix_go/Go.jpg\" alt=\"Maxi go\" >\n\n## 特性\n\nMAIX Go开发板以K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。\n\n\n## 应用\n智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等;\n医学行业应用，如辅助诊断，医学图像识别;\n智能工业应用，如工业机械，智能分拣，电气设备监控等;\n教育机器人，智能互动平台，教育效率检查等教育应用;\n农业应用，如农业监测，病虫害监测，自动控制等\n\n## 参数\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>图像识别</td>\n        <td>QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>麦克风阵列(8mics)</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>视频处理</td>\n        <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754-2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\" >开发板参数</th>   \n        </tr>\n    </thead>\n        <td> 板载资源</td>\n        <td><li>三向拨轮按键 <li>RGB灯*1<li>1W 小喇叭<li>USB to UART<li>16Mbit Flash*1</td>\n    </tr>\n    <tr>\n        <td>板载接口</td>\n        <td><li>USB Type-C接口<li>24PIN DVP摄像头接口<li>24PIN LCD接口<li>MicroSD卡槽<li>麦克风阵列接口<li>部分IO排针引脚引出</td>\n    </tr>\n    <tr>\n        <td>尺寸</td>\n        <td>60*88mm</td>\n    </tr>\n    <tr>\n        <td>供电电压</td>\n        <td>5.0V @ 300mA（供电电流需大于300mA）</td>\n    </tr>\n    <tr>\n        <td>工作温度</td>\n        <td>-30℃ ~85C</td>\n    </tr>\n</table>\n    \n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n        <th colspan = \"2\">软件开发</th>\n        <tr>\n    </thead>\n    <tr>\n    <td>芯片操作系统</td>\n    <td>FreeRTOS、RT-Thread等</td>\n    </tr>\n    <tr>\n    <td>开发环境</td>\n    <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td>\n    </tr>\n    <tr>\n    <td>编程语言</td>\n    <td>C，C++，MicroPython</td>\n    </tr>\n</table>\n\n## 资料下载\nSipeed-Maix-Go 资料下载：[Sipeed-Maix-Go](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-GO)\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maix/maixpy_develop_kit_board/maix_cube.html": {"title": "MaixCube", "content": "# MaixCube\n\n## 使用教程\n<a href=\"/soft/maixpy/zh/\" target=\"_blank\"> MaixPy </a>\n\n## 概述\n\n  SIPEED MaixCube 是基于我们 M1n 模块(主控:Kendryte K210)开发的一款集学习开发和商用一体的人脸识别产品.\n  <br/>MaixCube 集成摄像头、TF卡槽、用户按键、TFT显示屏、锂电池、扬声器麦克、扩展接口等, 用户可使用 Maix Cube 轻松搭建一款人脸识别门禁系统, 同时还预留开发调试接口, 也能将其作为一款功能强大的 AI 学习开发板.\n\n## MaixCube 外观及功能介绍\n\n### 外观一览\n\n![maixcube_product_appearance](./../assets/dk_board/maix_cube/maixcube_product_appearance.png)\n\n### 板载功能介绍\n\n- 电源管理控制单元: AXP173\n  - 板载 200mAh 锂电池,支持用户充放电控制\n- 音频驱动 IC: ES8374\n  - 支持音频录制,播放\n- 三轴加速度传感器: MSA301\n- Camera OV7740:\n- 1.3 IPS LCD:\n- RGB: 板载两颗 RGB LED\n- USB Type-C:Type-C 接口,正反盲插\n\n\n### 板载扩展接口\n\nMaix Cube 对用户开放了两个高度扩展的接口: SP-MOD 与 Grove 接口,\n用户可以很方便的进行 DIY\n\n#### SP-MOD 接口\n\nSP-MOD 即为 sipeed module, simplify PMOD, super module\n\n| 接口 | 接口描述 |\n| --- |--- |\n|SP-MODE 接口描述|![spmod_interface_1](./../../../assets/spmod/spmod_interface_1.png)|\n|硬件接口|![spmod_interface_2](./../../../assets/spmod/spmod_interface_2.png)|\n\n#### Grove 接口\n\n- Grove 模块接口\n\nGrove 接口的线缆有 4 种颜色, 用户可以根据颜色快速区别\n\n![grove_interface](./../assets/interface_grove/grove_interface.jpg)\n\n| --- | 颜色 | 描述 |\n| --- | --- | --- |\n| pin 1 | 黄色 | (例如, I2C Grove Connectors上的SCL) |\n| pin 2 | 白色 | (例如, I2C Grove Connectors上的SDA) |\n| pin 3 | 红色 |   VCC (所有的Grove接口红色都是VCC) |\n| pin 4 | 黑色 |   GND (所有的Grove接口红色都是GND) |\n\nGrove模块主要有 4 种接口:\n\n- Grove Digital 数字接口:\n    Grove 数字接口由 Grove 插头的四条标准线组成.\n    两条信号线通常称为 D0 和 D1 .\n    大多数模块只使用 D0, 但有些(像LED Bar Grove显示屏)使用两者.通常核心板会将板卡上的第一个Grove连接头称为 D0, 第二个称为 D1.第一个接头会连接到主控芯片的 DO/D1 管脚, 第二个连接头会连接到主控芯片的D1/D2引脚, 后面的连接头以此类推.\n\n| pin  |Function | Note |\n| ---|---|---|\n| pin1 | Dn | 第一个数字输入 | \n| pin2 | Dn+1 | 第二个数字输入 |\n| pin3 | VCC | 供电引脚 5V/3.3V |\n| pin4 | GND | 地 |\n\n- Grove Analog 模拟接口\n    Grove模拟接口由Grove插头的四条标准线组成.\n    两条信号线通常称为A0和A1.\n    大多数模块只使用A0，但有些（像LED Bar Grove显示屏）使用两者.\n    通常核心板会将板卡上的第一个Grove连接头称为A0，第二个称为A1。第一个接头会连接到主控芯片的AO/A1管脚，第二个连接头会连接到主控芯片的A1/A2引脚，后面的连接头以此类推.\n\n| pin  | Function | Note |\n| ---|---|---|\n| pin1 | An | 第一个模拟输入 | \n| pin2 | An+1 | 第二个模拟输入 |\n| pin3 | VCC | 供电引脚 5V/3.3V |\n| pin4 | GND | 地 |\n\n\n- Grove UART :\n    The Grove UART 是特殊的一种数字输入输出接口\n    它使用引脚 1 和引脚 2 进行串行输入和发送\n    引脚1是 RX 线(用于接收数据, 因此是输入)\n    其中引脚 2 是 TX 线(用于向 Grove 模块传输数据)\n\n| pin  | Function | Note |\n| ---|---|---|\n| pin1 | RX | 串行接收 |\n| pin2 | TX | 串行发送 |\n| pin3 | VCC | 供电引脚 5V/3.3V |\n| pin4 | GND | 地 |\n\n- Grove I2C:\n    有许多类型的 I2C Grove 传感器可用.MaixAmigo 上的 Grove 只支持 3.3V 传感器\n\n  Grove I2C 连接器具有标准布局.引脚 1 是SCL信号, 引脚 2 是SDA信号\n\n| pin  | Function | Note |\n| ---|---|---|\n| pin1 | SCL | I2C 时钟 |\n| pin2 | SDA | I2C 数据 |\n| pin3 | VCC | 供电引脚, 5V/3.3V |\n| pin4 | GND | 地 |\n\n### 板载 I2C 设备\n\nMaixCube  板载 I2C 传感器/IC\n\n| IC | 设备 id | I2C 地址(7位地址) |\n| --- | --- | --- |\n|ES8374|0x08|0x10|\n|MSA301|0x13|0x26|\n|AXP173|0x68|0x34|\n\n## MaixCube参数\n![maixcube_resources](./../assets/dk_board/maix_cube/maixcube_resources.png)\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至500MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>摄像头帧率</td>\n        <td>OV7740/QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>离线语音识别，声场</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持MobileNetV1/V2<li>人脸识别<li>ASR</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>硬件加速单元</td>\n        <td><li>KPU卷积运算加速器<li>FPU浮点运算加速器<li>APU音频处理器<li>FFT傅里叶变换加速器</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\" >开发板参数</th>   \n        </tr>\n    </thead>\n        <td> 板载资源</td>\n        <td><li>按键*3<li>摄像头*1<li>RGB LED*2 <li>1.3寸TFT屏幕<li>Electret Microphone*1<li>128Mbit Flash*1<li>加速度传感器*1<li>0.5W扬声器</td>\n    </tr>\n    <tr>\n        <td>板载接口</td>\n        <td><li>USB Type-C接口<li>TF卡槽<li>Grove标准接口<li>SP-MOD接口(支持SP-MOD接口模块)</td>\n    </tr>\n    <tr>\n        <td>尺寸</td>\n        <td>40*40*18.6mm</td>\n    </tr>\n    <tr>\n        <td>供电电压</td>\n        <td>USB-type或内部锂电池（200mAh）</td>\n    </tr>\n</table>\n    \n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n        <th colspan = \"2\">软件开发</th>\n        <tr>\n    </thead>\n    <tr>\n    <td>软件环境</td>\n    <td>MaixPy（microPython）</td>\n    </tr>\n    <tr>\n    <td>开发环境</td>\n    <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td>\n    </tr>\n    <tr>\n    <td>编程语言</td>\n    <td>C，MicroPython</td>\n    </tr>\n</table>\n\n## 相关资料下载\nSipeed-Maix-Cube 资料下载：[Sipeed-Maix-Cube](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Cube)\n\nSipeed-Maix-Cube 规格书下载：[Sipeed-Maix-Cube](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Cube/ProductSpecification/Sipeed%20Maix%20Cube%20Datasheet%20V1.0.pdf)\n\nSipeed-Maix-Cube 原理图下载：[Sipeed-Maix-Cube.pdf](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Cube/Maix-Cube-2757)\n\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maix/maixpy_develop_kit_board/maix_hat.html": {"title": "Grove AI HAT", "content": "---\ntitle: Grove AI HAT\nkeywords: maixpy, k210, AIOT, 边缘计算\ndesc: maixpy doc: Grove AI HAT\n---\n\n## 外观及功能介绍\n\n### 外观一览\n\n![Grove AI HAT](./../../../../soft/maixpy/assets/hardware/grove_ai_hat/grove_ai_hat1.png)\n\n### 板载功能\n\n| 项目             | 说明                                                   |\n| ---------------- | ------------------------------------------------------ |\n| CPU：            | 双核 64bit RISC-V / 400MHz (双精度FPU集成)             |\n| 内存：           | 8MiB 64bit 片上 SRAM                                   |\n| 存储：           | 16MiB Flash                                            |\n| 屏幕（套餐）：   | 2.4 寸 TFT, 电容触摸屏幕分辨率：320\\*240               |\n| 摄像头（套餐）： | 搭载 **OV7740** 或 **OV5642** **30W** 像素 **Sensor** |\n| 按键：           | 复位按键，电源按键（短按开机，长按 *8S* 关机）         |\n| USB：            | Type-C 接口，正反盲插                                  |\n| 板载传感器：     | 三轴加速度传感器（ADXL345BCCZ-RL），ADC（ADS1115IDGS） |\n\n### 硬件板载扩展接口\n\n该开发版对用户开放了四个 [Grove](https://wiki.sipeed.com/soft/maixpy/zh/modules/grove/index.html) 接口,用户可以很方便的进行 DIY。\n\n### 板载 I2C 设备\n\n| 传感器  | 功能         | I2C 地址(7位地址) | SCL  | SDA  | 示例代码               |\n| ------- | ------------ | ----------------- | ---- | ---- | ---------------------- |\n| ADS1115 | ADC          | 0x48              | IO23 | IO24 | [script](https://github.com/sipeed/MaixPy_scripts/tree/master/modules/others/ads1115) |\n| ADXL345 | 三轴加速度计 | 0x53              | IO23 | IO24 | [script](https://github.com/sipeed/MaixPy_scripts/tree/master/modules/others/adxl345) |\n\n## 资源下载\n\n[原理图](http://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Grove_AI_HAT/Grove_AI_HAT_for_Edge_Computing_v1.0_SCH_190514.pdf)"}, "/hardware/zh/maix/maixpy_develop_kit_board/maix_nano.html": {"title": "Maix nano", "content": "# Maix nano\n\n## 教程&快速上手\n\n相关的使用教程入口<a href=\"./../../../../soft/maixpy/zh/\" target=\"_blank\"> MaixPy </a>\n\n## 描述\nMAIX Nano开发板是SiPEED公司MAIX产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片K210(RISC-V架构 64位双核)设计的一款AIOT开发板。开发板使用模块+底板方式设计，整洁小巧，板载Type-C接口和USB-UART电路，用户可以直接通过USB Type-C线连接电脑进行开发，配置128Mbit Flash、LCD、DVP、Micro SD卡等接口并把所有IO引出，方便用户扩展。\n\n## 外观\n<img src=\"./../assets/dk_board/maix_nano/maix_nano.jpg\" alt=\"Maxi nano\" >\n\n## 特性\n\nMAIX Nano开发板以K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。\n\n\n## 应用\n智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等;\n医学行业应用，如辅助诊断，医学图像识别;\n智能工业应用，如工业机械，智能分拣，电气设备监控等;\n教育机器人，智能互动平台，教育效率检查等教育应用;\n农业应用，如农业监测，病虫害监测，自动控制等\n\n## 参数\n![maix_nano](./../assets/dk_board/maix_nano/maix_nano.png)\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>图像识别</td>\n        <td>QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>麦克风阵列(8mics)</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>视频处理</td>\n        <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754-2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\" >开发板参数</th>   \n        </tr>\n    </thead>\n        <td> 板载资源和接口</td>\n        <td><li>DVP摄像头接口*1 <li>大部分IO通过金手指方式引出，方便二次开发<li>USB to UART<li>128Mbit Flash*1</td>\n    </tr>\n    <tr>\n        <td>尺寸</td>\n        <td>25.0*22.0mm</td>\n    </tr>\n    <tr>\n        <td>供电电压</td>\n        <td>5.0V @ 300mA（供电电流需大于300mA)</td>\n    </tr>\n    <tr>\n        <td>工作温度</td>\n        <td>-30℃ ~85C</td>\n    </tr>\n</table>\n    \n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n        <th colspan = \"2\">软件开发</th>\n        <tr>\n    </thead>\n    <tr>\n    <td>芯片操作系统</td>\n    <td>FreeRTOS、Standrad development ki等</td>\n    </tr>\n    <tr>\n    <td>开发环境</td>\n    <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td>\n    </tr>\n    <tr>\n    <td>编程语言</td>\n    <td>C，C++，MicroPython</td>\n    </tr>\n</table>\n\n## 资料下载\nM1n 资料下载：[dl.sipeed.com](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-M1n)\nM1n 原理图下载：[Sipeed M1n Datasheet V1.0.pdf](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-M1n/Sipeed%20M1n%20Datasheet%20V1.0.pdf)\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maix/maixpy_develop_kit_board/maix_duino.html": {"title": "MaixDuino 开发板", "content": "# MaixDuino 开发板\n\n## 概述\n\n  SIPEED MaixDuino 是基于我们 M1 模块(主控:Kendryte K210)开发的一款外形兼容 Arduino 的开发板\n  <br/>MaixDuino 集成摄像头、TF卡槽、用户按键、TFT显示屏、MaixDuino 扩展接口等, 用户可使用 MaixDuino 轻松搭建一款人脸识别门禁系统, 同时还预留开发调试接口, 也能将其作为一款功能强大的 AI 学习开发板.\n\n## MaixDuino 外观及功能介绍\n\n### 外观一览\n\n![MaixDuino](./../assets/dk_board/maix_duino/maixduino_0.png)\n![MaixDuino](./../assets/dk_board/maix_duino/maixduino_1.png)\n![MaixDuino](./../assets/dk_board/maix_duino/maixduino_2.png)\n\n### 板载功能介绍\n\n- 电源输入 DC05: 6~12V 直流\n- 电源输入 + 程序下载调试接口: USB Type-C 接口\n- DVP 24PIN: 标准 Camera DVP 24PIN 接口\n- TF 扩展槽:\n- ESP32: ESP32 SPI 连接(ESP32 支持 WIFI 与 蓝牙)\n- I2C DAC\n- PA PAM8403A\n\n![MaixDuino](./../assets/dk_board/maix_duino/maixduino_3.jpg)\n\n## MaixDuino参数\nMaixduino开发板以M1Al模块作为核心单元，功能非常很强大，模块内置64位双核处理器芯片，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。此外，开发板还配置了ESP32模块(WiFi+蓝牙一体)，简单的操作即可轻松联网。\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>图像识别</td>\n        <td>QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>麦克风阵列(8mics)</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>视频处理</td>\n        <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754-2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td>\n    </tr>\n    </tbody>\n</table>\n<table role=\"table\" class=\"center_table\">\n  <thead>\n    <tr>\n      <th colspan = \"2\">ESP32模块</th>\n    </tr>\n  </thead>\n  <tr>\n    <td>主控</td>\n    <td>ESP32-D0WDQ6(Xtensa 32-bit内核)</td>\n  </tr>\n  <tr>\n    <td>无线标准</td>\n    <td>802.11b/g/n</td>\n  </tr>\n  <tr>\n    <td>无线频率</td>\n    <td>2400MHz-2483.5MHz</td>\n  </tr>\n  <tr>\n    <td>无线协议</td>\n    <td>2.4G WiFi+双模蓝牙(BT&BLE4.2)</td>\n  </tr>\n  <tr>\n    <td>天线</td>\n    <td>PCB板载天线</td>\n  </tr> \n</table>\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\" >开发板参数</th>   \n        </tr>\n    </thead>\n        <td> 板载资源</td>\n        <td><li>RGB灯*1<li>MEMS Microphone*1<li>USB转串口*1</td>\n    </tr>\n    <tr>\n        <td>板载接口</td>\n        <td><li>USB Type-C接口<li>24PIN DVP摄像头接口<li>24PIN LCD接口<li>MicroSD卡槽<li>音频接口（支持外接3扬声器）<li>部分IO排针引脚引出</td>\n    </tr>\n    <tr>\n        <td>尺寸</td>\n        <td>60*88mm</td>\n    </tr>\n    <tr>\n        <td>供电电压</td>\n        <td>5.0V @ 300mA（供电电流需大于300mA)</td>\n    </tr>\n    <tr>\n        <td>工作温度</td>\n        <td>-30℃ ~85C</td>\n    </tr>\n</table>\n    \n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n        <th colspan = \"2\">软件开发</th>\n        <tr>\n    </thead>\n    <tr>\n    <td>芯片操作系统</td>\n    <td>FreeRTOS、RT-Thread等</td>\n    </tr>\n    <tr>\n    <td>开发环境</td>\n    <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td>\n    </tr>\n    <tr>\n    <td>编程语言</td>\n    <td>C，C++，MicroPython</td>\n    </tr>\n</table>\n\n\n## 资料相关链接\n\n- [MaixDuino 原理图](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maixduino)\n- <a href=\"/soft/maixpy/zh/\" target=\"_blank\"> MaixPy的使用教程入口 </a> （推荐）\n- <a href=\"/soft/maixduino/zh/\" target=\"_blank\"> arduino的使用教程入口 </a>\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maix/maixpy_develop_kit_board/Maix_dock.html": {"title": "Maix Dock(M1/M1W)", "content": "# Maix Dock(M1/M1W)\n\n## 教程&快速上手\n\n<a href=\"/soft/maixpy/zh/\" target=\"_blank\"> MaixPy </a>\n\n## 描述\nMAIX Dock开发板是SiPEED公司MAIX产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片K210(RISC-V架构 64位双核)设计的一款AIOT开发板。开发板使用模块+底板方式设计，整洁小巧，板载Type-C接口和USB-UART电路，用户可以直接通过USB Type-C线连接电脑进行开发，配置128Mbit Flash、LCD、DVP、Micro SD卡等接口并把所有IO引出，方便用户扩展。\n> 上电即可开机，不需要开机操作\n\n<img src=\"./../assets/dk_board/maix_dock/Maix_Dock.jpg\" alt=\"11\" width=\"300\">\n\n\n\n## 外观\n<img src=\"./../assets/dk_board/maix_dock/Maix_Dock_3.png\" alt=\"11\" >\n<img src=\"./../assets/dk_board/maix_dock/Maix_Dock_2.png\" alt=\"11\" >\n\n## 特性\n\nMaixDock 开发是以M1W AI模块作为核心单元，功能非常强大。模块内置64位双核处理器芯片，拥有8M的片上SRAM，在AI机器视觉、听觉性能方面表现突出，内置多种硬件加速单元（KPU、FPU、FFT等），总算力最高可达1TOPS，可以方便地实现各类应用场景的机器视觉/听觉算法，也可以进行语言方向扫描和语言数据输出的前置处理工作。\n\n## 应用\n智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等;\n医学行业应用，如辅助诊断，医学图像识别;\n智能工业应用，如工业机械，智能分拣，电气设备监控等;\n教育机器人，智能互动平台，教育效率检查等教育应用;\n农业应用，如农业监测，病虫害监测，自动控制等\n\n## 参数\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>图像识别</td>\n        <td>QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>麦克风阵列(8mics)</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>视频处理</td>\n        <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754-2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\" >开发板参数</th>   \n        </tr>\n    </thead>\n        <td> 板载资源</td>\n        <td><li>按键*2 <li>RGB灯*1<li>MEMS Microphone*1<li>USB to UART<li>128Mbit Flash*1</td>\n    </tr>\n    <tr>\n        <td>板载接口</td>\n        <td><li>USB Type-C接口<li>24PIN DVP摄像头接口<li>24PIN LCD接口<li>MicroSD卡槽<li>音频接口(支持外接2x3W扬声器)<li>所有IO排针引脚引出</td>\n    </tr>\n    <tr>\n        <td>尺寸</td>\n        <td>52.3*37.3mm</td>\n    </tr>\n    <tr>\n        <td>供电电压</td>\n        <td>5.0V @ 300mA（供电电流需大于300mA)</td>\n    </tr>\n    <tr>\n        <td>工作温度</td>\n        <td>-30℃ ~85C</td>\n    </tr>\n</table>\n    \n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n        <th colspan = \"2\">软件开发</th>\n        <tr>\n    </thead>\n    <tr>\n    <td>芯片操作系统</td>\n    <td>FreeRTOS、RT-Thread等</td>\n    </tr>\n    <tr>\n    <td>开发环境</td>\n    <td>MaixPy IDE、PlatformlO IDE、Arduino IDE等</td>\n    </tr>\n    <tr>\n    <td>编程语言</td>\n    <td>C，C++，MicroPython</td>\n    </tr>\n</table>\n\n## 资料\nSipeed-Maix-Dock 资料下载：[Sipeed-Maix-Dock](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Dock)\n\nSipeed-Maix-Dock 规格书下载：[Sipeed-Maix-Dock](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-Maix-Dock/Specifications)\n\nSipeed-Maix-Dock 原理图下载：[Sipeed-Maix-Dock](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-Maix-Dock/Maix-Dock_11.27/Maix-Dock_11.27-schematic.pdf)\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maix/M1n.html": {"title": "Sipeed M1n", "content": "---\ntitle: Sipeed M1n\nkeywords: maixpy, k210, AIOT, 边缘计算, M1n\ndesc: maixpy doc: Sipeed M1/M1W \n---\n\n## M1n\n\nSiPEEDM1n是基于基于嘉楠堪智科技的边缘智能计算芯片K210(RISC-v架构64位双核)设计的一款AIOT开发板。板载DVP双摄像头接口、Flash、并把大部分IO通过金手指方式引出，模块设计小巧精致、布局走线合理规范，用户可直接应用于商用产品，也可以通过转接板对此模块进行开发。\n![M1n](./assets/m1n/M1n_1.png)\n## 应用\n智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等;\n医学行业应用，如辅助诊断，医学图像识别;\n智能工业应用，如工业机械，智能分拣，电气设备监控等;\n教育机器人，智能互动平台，教育效率检查等教育应用;\n农业应用，如农业监测，病虫害监测，自动控制等\n\n\n## M1n 参数\nM1n模块以K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM，在Al机器视觉、听觉性能方便表现突出，内置多种硬件加速单元(KPU、FPU，FFT等)，总算力最高可达1TOPs ,可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。\n\n<p><img loading=\"M1/M1W\" src=\"./assets/m1n/M1n.png\" width = 500 ></p>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>图像识别</td>\n        <td>QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>麦克风阵列(8mics)</td>\n    </tr>\n    <tr>\n        <td>网络模型</td>\n        <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2<li>人脸识别等</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>视频处理</td>\n        <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754-2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan=\"2\">模块软件</th>\n        </tr>\n    </thead>\n    <tr>\n    <td>操作系统</td><td>FreeRtos and Standrad development ki</td>\n    </tr>\n    <tr>\n        <td>编程语言</td><td>MicroPython</td>\n    </tr>\n    <tr>\n        <td>机器视觉</td><td>支持卷积神经网络</td>\n    </tr>\n    <tr>\n        <td>机器听觉</td><td>高性能音频处理器(APU)</td>\n    </tr>\n    <tr>\n        <td>开发环境</td><td>串口终端、MaixPy IDE</td>\n    </tr>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan=\"2\">模块硬件</th>\n        </tr>\n    </thead>\n    <tr>\n    <td>尺寸</td><td>22.0*25.0mm</td>\n    </tr>\n    <tr>\n        <td>引脚</td><td>部分引脚金手指引出</td>\n    </tr>\n    <tr>\n        <td>供电电压</td><td>5.0V @ 300mA（供电电流需大于300mA)</td>\n    </tr>\n    <tr>\n        <td>工作温度</td><td>-30°C ~85°C</td>\n    </tr>\n</table>\n\n\n\n\n## 资料下载\n\n芯片 K210 Datasheet: [Kendryte 官网](https://canaan-creative.com/)\nM1W 资料下载: [dl.sipeed.com](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-M1&M1W)\nM1n 原理图下载：[Sipeed M1n Datasheet V1.0.pdf](https://dl.sipeed.com/fileList/MAIX/HDK/Sipeed-M1n/Sipeed%20M1n%20Datasheet%20V1.0.pdf)\n\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maix/index.html": {"title": "Sipeed Hardware", "content": "---\ntitle: Sipeed Hardware\nkeywords: Sipeed, Hardware, 矽速, 硬件资料, 文档, 资料下载\ndesc: 矽速科技的硬件资料站\n---\n\n# Maix—I\n\n[English](./../../en/maix/index.html)\n\n## K210 核心模组\n- [M1/M1w](./core_module.html)\n- [M1n](./core_modules/k210_core_modules.html)\n\n## Maix 系列开发板\n\n\n<table role=\"table\" class=\"center_table\">\n  <tbody>\n    <tr>\n      <th scope=\"col\">型号</th>\n      <th scope=\"col\">图片</th>\n    </tr>\n    <tr>\n      <td> Maix Go</td>\n      <td><a href=\"./maixpy_develop_kit_board/maix_go.html\" target=\"_blank\"><img src=\"./assets/dk_board/maix_go/Go.jpg\" width=\"260\"></a></td>\n    </tr>\n    <tr>\n      <td>Maix Dock</td>\n      <td><a href=\"./maixpy_develop_kit_board/Maix_dock.html\" target=\"_blank\"><img src=\"./assets/dk_board/maix_dock/Dan_Dock.png\" width=\"260\"></a></td>\n    </tr>\n    <tr>\n      <td>Maix Duino</td>\n      <td><a href=\"./maixpy_develop_kit_board/maix_duino.html\" target=\"_blank\"><img src=\"./assets/dk_board/maix_duino/maixduino_0.png\" width=\"260\"></a></td>\n    </tr>\n    <tr>\n      <td>Maix Bit</td>\n      <td> <a href=\"./maixpy_develop_kit_board/maix_bit.html\" target=\"_blank\"><img src=\"./assets/dk_board/maix_bit/Bit.png\" width=\"260\"></a> </td>\n    </tr>\n    <tr>\n      <td>Maix Cube</td>\n      <td><a href=\"./maixpy_develop_kit_board/maix_cube.html\" target=\"_blank\"><img src=\"./assets/dk_board/maix_cube/maix_cube.png\" width=\"260\"></a></td>\n    </tr>\n    <tr>\n      <td>Maix Amigo</td>\n      <td><a href=\"./maixpy_develop_kit_board/maix_Amigo.html\" target=\"_blank\"><img src=\"./assets/dk_board/maxi_amigo/maix_amigo_0.png\" width=\"260\"></a></td>\n    </tr>\n    <tr>\n    <td>Maix nano</td>\n    <td><a href=\"./maixpy_develop_kit_board/maix_nano.html\"><img src=\"./assets/dk_board/maix_nano/maix_nano.jpg\" width=\"260\" alt=\"Maxi nano\"></a></td>\n    </tr>\n  </tbody>\n</table>\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maix/core_module.html": {"title": "Sipeed M1/M1W", "content": "---\ntitle: Sipeed M1/M1W\nkeywords: maixpy, k210, AIOT, 边缘计算, M1/M1W\ndesc: maixpy doc: Sipeed M1/M1W \n---\n\n## M1/M1W\n\nM1/M1W模块是基于嘉楠堪智科技的边缘智能计算芯片 K210 (RISC-V架构) 设计的一款AIOT模块。主控芯片内置64位双核高性能低功耗处理器，每个核都有浮点运算单元(FPU) ,具备卷积人工神经网络硬件加速器(KPU)和快速傅里叶变换加速器(FFT)、搭载现场可编程IO阵列(FPIOA)，支持多种主流Al编程框架。M1W模块内置标准802.11 b/g/n协议的ESP8285 WiFi芯片，可让模块轻松联网。\n\n![M1/M1W](./assets/m1_m1w/M1_Dan.png)\n\n## 应用\n智能家居，机器人清洁器，智能扬声器，电子门锁，家庭监控等;\n医学行业应用，如辅助诊断，医学图像识别;\n智能工业应用，如工业机械，智能分拣，电气设备监控等;\n教育机器人，智能互动平台，教育效率检查等教育应用;\n农业应用，如农业监测，病虫害监测，自动控制等\n\n\n## M1/M1W 参数\nM1/M1W Al模块系统主要由电源(3 Channel DC-DC)、Flash芯片(16M)电路、K210芯片和WiFi芯片四部分组成。K210作为核心单元，功能非常很强大，芯片内置64位双核处理器，拥有8M的片上SRAM。模块在Al机器视觉、听觉性能方便表现突出，芯片总算力可达1TOPS，芯片内置多种硬件加速单元(KPU、FPU，FFT等)，可以方便地实现各类应用场景的机器视觉/听觉算法,也可以进行语音方向扫描和语音数据输出的前置处理工作。M1W模块嵌入无线WiFi功能，可轻松实现联网控制。\n\n\n<p><img loading=\"M1/M1W\" src=\"./assets/m1_m1w/M1_vs_M1W.png\" width = 500 ></p>\n<p><img loading=\"M1/M1W\" src=\"./assets/m1_m1w/M1_pin.png\" width = 500 ></p>\n<p><img loading=\"M1/M1W\" src=\"./assets/m1_m1w/M1W_2.png\" width=500 ></p>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">K210 芯片基本参数</th>   \n        </tr>\n    </thead>\n    <tbody>\n    <tr>    \n        <td>内核</td>\n        <td>RISC-V Dual Core 64bit, with FPU</td>\n    </tr>\n    <tr>\n        <td>主频</td>\n        <td>400MHz （可超频至600MHz）</td>\n    </tr>\n    <tr>\n        <td>SRAM</td>\n        <td>内置8M Byte</td>\n    </tr>\n    <tr>\n        <td>图像识别</td>\n        <td>QVGA@60fps/VGA@30fps</td>\n    </tr>\n    <tr>\n        <td>语音识别</td>\n        <td>麦克风阵列(8mics)</td>\n    </tr>\n    <tr>\n        <td>神经网络模型</td>\n        <td><li>支持YOLOv3<li>Mobilenetv2<li>TinyYOLOv2</td>\n    </tr>\n    <tr>\n        <td>深度学习框架</td>\n        <td>支持TensorFlow \\ Keras \\ Darknet \\ Caffe 等主流框架</td>\n    </tr>\n    <tr>\n        <td>外设</td>\n        <td>FPIOA、 UART、 GPIO、 SPI、 I2C、I2S、 TIMER</td>\n    </tr>\n    <tr>\n        <td>视频处理</td>\n        <td><li>神经网络处理器(KPU)<li>FPU满足IEEE754-2008标准<li>音频处理器(APU)<li>快速傅里叶变换加速器(FFT)</td>\n    </tr>\n    </tbody>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan=\"2\">模块软件</th>\n        </tr>\n    </thead>\n    <tr>\n    <td>操作系统</td><td>FreeRtos and Standrad development ki</td>\n    </tr>\n    <tr>\n        <td>编程语言</td><td>MicroPython</td>\n    </tr>\n    <tr>\n        <td>机器视觉</td><td>支持卷积神经网络</td>\n    </tr>\n    <tr>\n        <td>机器听觉</td><td>高性能音频处理器(APU)</td>\n    </tr>\n    <tr>\n        <td>开发环境</td><td>串口终端、MaixPy IDE</td>\n    </tr>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan=\"2\">模块硬件</th>\n        </tr>\n    </thead>\n    <tr>\n    <td>尺寸</td><td>25.4*25.4*3.3mm</td>\n    </tr>\n    <tr>\n        <td>引脚</td><td>72 PIN全引脚引出</td>\n    </tr>\n    <tr>\n        <td>供电电压</td><td>5.0V @ 300mA（供电电流需大于300mA)</td>\n    </tr>\n    <tr>\n        <td>工作温度</td><td>-30°C ~85°C</td>\n    </tr>\n</table>\n\n<table role=\"table\" class=\"center_table\">\n    <thead>\n        <tr>\n            <th colspan = \"2\">Wi-Fi功能参数</th>\n        </tr>\n    </thead>\n    <tr>\n        <td>主控</td>\n        <td>ESP8285</td>\n    </tr>\n    <tr>\n    <td>无线标准</td><td>802.11 b/g/n</td>\n    </tr>\n    <tr>\n    <td>频率范围</td><td>2400Mhz - 2483.5Mhz</td>\n    </tr>\n    <tr>\n    <td>天线</td><td>标准IPEX接口天线</td>\n    </tr>\n    <tr>\n    <td>Wi-Fi模式</td><td>支持Station / SoftAP /SoftAP+Station</td>\n    </tr>\n</table>\n\n> 为了让Al模块能应用于更多场合，Sipeed团队还推出了无WiFi功能版本的M1模块，如果用户无需使用无线联网的功能，可以选择我们的M1模块。M1模块和M1W模块的AI功能一致，使用方法基本相同，主要区别就是M1W模块比M1模块多了WiFi功能。\n\n## 资料下载\n\n芯片 K210 Datasheet: [Kendryte 官网](https://canaan-creative.com/)\nM1W 资料下载: [dl.sipeed.com](https://dl.sipeed.com/shareURL/MAIX/HDK/Sipeed-M1&M1W)\n\n\n## 产品技术支持\nMaix系列产品可以在多种场景实现客户不同方面的需要，在AIoT上已经广泛的使用，品质和性能在行业内已经有非常好的口碑，专业的技术团队为广大客户解决硬件设计和软件功能上的各种各样问题。专业技术支持和更详细资料请联系商务<support@sipeed.com>。"}, "/hardware/zh/maixIV/index.html": {"title": "", "content": "敬请期待"}, "/hardware/zh/index.html": {"title": "Sipeed Hardware", "content": "---\ntitle: Sipeed Hardware\nkeywords: Sipeed, Hardware, 矽速, 硬件资料, 文档, 资料下载, 深度学习, 人工智能, K210\ndesc: 矽速科技的硬件资料站\n---\n\n## Maix 系列\n\n推出一系列以 **K210** 为核心的开发板，满足不同人群对于开发板的需求\n\n[![](./../assets/maix.jpg)](./maix/index.html)\n\n## MaixII & III 系列\n\nLinux AI 开发板\n\n[![](./../assets/maixii.jpg)](./maixII/index.html)\n\n## Lichee 系列\n\nLinux 开发板\n\n[![](./../assets/lichee.jpg)](./lichee/index.html)\n\n## Tang 系列\n\nFPGA 开发板\n\n[![](./../assets/tang.jpg)](./tang/index.html)\n\n## Metesense 模组\n\n待插入图片\n\n## Longon 系列\n\nMCU 开发板\n\n[![](./../assets/longan_nano.jpg)](./longan/index.html)"}, "/hardware/zh/metasense/index.html": {"title": "MetaSense 系列", "content": "---\ntitle: MetaSense 系列\n---\n\n购买方式：众筹预售购买连接\n## MetaSense 是什么?\n\n\n（简易介绍+可应用案例场景图粗略介绍）\nMetaSense 系列摄像头模组主要分为 MetaSense-A075V 和 MetaSense-A010 两款产品。\n\n\n|              |<p style=\"white-space:nowrap\">MateSense-010</p > | <p style=\"white-space:nowrap\">MateSense-A075V</p > | \n| :----------- |:----------------------------------------------- | :------------------------------------------------- | \n|              |![tof-1.3](asstes/../tof-1.3.jpg)                | ![tof-1.2](asstes/../tof-1.2.jpg)                  | \n| 接口         | 1.25mm 串口连接器 \\*1<br>Type-C USB2.0 \\*1       | 1.25mm 串口连接器 \\*1 <br>Type-C USB2.0 \\*1         |\n| 分辨率       |TOF：100x100@30fps                               | RGB：1600x1200@30fps<br>TOF：320x240@60fps         | \n| 视场角       |RGB：无<br>TOF：70°(H) * 60°(V)                  | RGB：120°<br>TOF：55°(H)*72°(H)                    | \n| <p style=\"white-space:nowrap\">TOF 像素尺寸</p> |                                                 | 15um                                               | \n| 激光发射器   |40nm VCSEL                                       | 940nm,3W                                           | \n| 测量范围     |0.2-2.5m                                         | 0.15-1.5m                                          | \n| 测量精度     |&lt;=1%/cm                                       | &lt;=1%/cm                                         | \n\n相关交流社区及社群：\n\n\n\n## MetaSense 能做什么？\n\n### 人流统计\n简易介绍：\n![tof-1.5](tof-1.5.jpg)\n\n### 人脸识别\n简易介绍：\n![a010-6](assets/../metasense-a010/assets/a010-6.jpg)\n\n\n### 体积测量\n简易介绍：\n![tof-a0757](assets/../metasense-a075v/assets/tof-7.png)\n\n\n### 小车避障\n简易介绍：\n![tof-a0756](assets/../metasense-a075v/assets/tof-6.jpg)\n\n\n### 运动物体检测\n简易介绍：\n![tof-1.4](tof-1.4.jpg)\n\n### 接入 ROS1 + ROS2\n<html>\n  <img src=\"./assets/../metasense-a075v/assets/tof-11.jpg\" width=48%>\n  <img src=\"./asstes/../metasense-a075v/assets/tof-12.jpg\" width=48%>\n</html>\n\n## 快速了解 TOF 技术\n\n1. TOF: Time of flight（飞行时间）它是一种测距的方法，通过测量超声波/微波/光等信号在发射器和反射器之间的“飞行时间”来计算出两者之间的距离。能够实现 TOF 测距的传感器就是 TOF 传感器。种类较多，使用较多的是通过红外或者激光进行测距的 TOF 传感器。\n2. RGBD：RGB 摄像头加 TOF 深度摄像头组成的一整个模组。图源自[百度](https://baike.baidu.com/item/TOF/19952376?fr=aladdin)。\n![tof-1.1](tof-1.1.jpg)\n\n## 更多\n关于 MS-010 更详细的资料获取：\n关于 MS-075 更详细的资料获取："}, "/hardware/zh/metasense/metasense-a075v/install_drivers.html": {"title": "安装 RNDIS 驱动", "content": "# 安装 RNDIS 驱动\n\n> 编辑于 2022年8月9日\n\n## 说明\n\nRNDIS 全称为 Remote Network Driver Interface Specification，即远程网络驱动接口规范，是在 USB 设备上跑 TCP/IP 一种规范。\n\n## 相关操作\n\n在 Windows7 及其以上的操作系统中，均已经内置了 RNDIS，但是如果不进行一些特殊操作的话，电脑一般是识别不到相关符合 RNDIS 设备的。\n\n### 安装驱动\n\n将目标设备与电脑通过 USB 接口连接起来，且能够在电脑的设备管理器中看到串行设备。如果没有看到有串行设备的话大概率是供电不足所导致的：对于台式机建议使用主机背部的 USB 接口；使用 USB hub 的话建议使用带有额外供电的；另外建议使用 USB 3.0 的数据口，因为 USB 2.0 驱动供电可能不足。\n\n![串行设备](./assets/install_drivers/serial.png)\n\n右键它，选择更新驱动程序，接着在下面的界面中选择更新驱动程序\n\n![更新驱动](./assets/install_drivers/update.png)\n\n这里我们选择下面的 `让我从计算机上的可用驱动列表中选出(L)`\n\n![选择驱动](./assets/install_drivers/scan.png)\n\n接着对于下面的图我们选择偏右下方的 `从磁盘安装(H)...`\n\n![从磁盘安装](./assets/install_drivers/install.png)\n\n然后在下面的对话框中选择右下角的浏览\n\n![浏览](./assets/install_drivers/path.png)\n\n选中我们所下载且解压之后的文件夹里面，选择一个 .inf 文件后，点击右下角的 `打开`\n\n![inf](./assets/install_drivers/inf.png)\n\n接着会回退到下面的界面，这里直接右下角的点击下一页即可\n\n![下一页](./assets/install_drivers/next.png)\n\n然后就会显示已经更新驱动了\n\n![结束安装驱动](./assets/install_drivers/finish.png)\n\n重新拔插 USB 设备后，等待大概十秒左右，可以在系统的设备管理器里网络适配器中看到看到有 `RNDIS/Ethernet Gadget`，到此已经成功安装驱动了"}, "/hardware/zh/metasense/metasense-a075v/metasense-a075v.html": {"title": "MetaSense-A075V", "content": "# MetaSense-A075V\n\n|     时间      | 负责人 |   更新内容   |\n| :-----------: | :----: | :----------: |\n| 2022年8月10日 | yuexin | 初次编写文档 |\n\n\n## 产品概述\n产品图\n\nMetaSense-A075V 是由 Sipeed 所推出的一款具有 RGB 功能的 3D TOF 摄像机模组。\n该模组可以实现免驱的即插即用，实现实时彩色 3D 显示。\n\n\n**资料汇总**\n\n硬件规格书：\n硬件接线图：\n\n## 产品开箱指南\n### 快速上手的准备工作\n\n**接线说明**：\n**安装驱动**：上电前一定要确保网络环境中没有使用 192.168.233.0/24  的地址段，MS-A075V 会使用 RNDIS 并设置自己的 ip 地址为 http://192.168.233.1 Windows 系统需安装驱动才可正常运行。\n  \n  [点击下载 Windows 驱动](https://dl.sipeed.com/shareURL/MetaSense/Drivers)\n  [点击查看 Windows 安装驱动方法](./install_drivers.html)\n\n### 网页上位机预览互动\n1. 把设备使用 type-c 线与电脑链接，MS-A075V 的风扇会开始工作，产品正面镜头处就会闪烁红灯。\n2. 此时可打开浏览器输入 http://192.168.233.233 预览 3D 点云图，上电后有延迟需等待一段时间后，系统和程序才会启动完成。\n3. 使用网页上位机快速预览 演示图（正面和侧面）： \n<html>\n  <img src=\"./assets/tof-1.jpg\" width=48%>\n  <img src=\"./assets/tof-2.jpg\" width=48%>\n</html>\n\n4. 可选预览深度伪彩点云，右上角打开交互面板，第一行取消勾选 RGB_Map 即可。\n![tof-a0753](assets/tof-3.jpg)\n\n### 互动配置\n1. 上位机交互面板提供了一系列配置和功能，可以实时预览变动的效果。\n![tof-a0754](assets/tof-4.jpg)\n\n现简单说明一下各个控件的功能。\n- **RGB_Map** 多选框 开关 RGB 映射，即关闭时只显示深度伪彩点云，打开时显示 RGB 映射点云。\n- **colorMap** 下拉栏 提供了几个伪彩映射选项(即 cmap )，推荐使用 jet，RGB_Map 关闭时有效。\n- **deepRangeMax** 和 **deepRangeMin** 滑动条是设定 cmap 的映射范围的，即只有位于 deepRangeMin 和 deepRangeMax 之间的数值（深度值）会通过 cmap，RGB_Map 关闭时有效。\n- **NormalPoint** 多选框 开关显示正常点（TOF 成像会有无效点，对应的相反描述），需要打开。\n- **OE_Points** 多选框 开关显示OE点，建议关闭。\n- **UE_Points** 多选框 开关显示UE点，建议关闭。\n- **Bad_Points** 多选框 开关显示无效点，建议关闭。\n- **SpatialFilter** 多选框 开关空间滤波，基于下面的 SpatialFilterSize 值和 SpatialFilterType 指定的算法进行处理。\n- **TemporalFilter** 多选框 开关时间滤波，基于下面的TemporalFilteralpha 值做了一个时间上的平均。\n- **TemporalFilteralpha** 滑动条 设定时间滤波所需时长，适中即可，可自行尝试体验其它效果。\n- **SpatialFilterType** 下拉栏 设定空间滤波算法，提供高斯滤波（Gaussian）和双边滤波（Bilateral），双边滤波性能要求较高，不建议使用。\n- **SpatialFilterSize** 滑动条 设定空间滤波所需范围，适中即可，可自行尝试体验其它效果。\n- **FlyingPointFilter** 多选框 开关飞点过滤，基于下面的 FlyingPointThreshold 值作为过滤阈值，超过阈值的将被过滤掉，建议适中配置，否则有效点也会被剔除。\n\n### 保存数据\n\n网页版上位机控件栏最下方提供了两个按钮\n**SaveRaw**：可保存一帧 raw 数据，用户如果需要使用深度或 IR 或 RGB 数据进行二次开发，则需要了解 raw 数据结构。不过我们同时提供了一个详细的 jupyter notebook 供用户和开发者使用和了解 raw 数据的处理过程。\n**SavePointCloud**：可保存一帧3D点云图，保存格式为 pcd，同样可以通过上述提供的脚本预览。\n注意：raw 数据可通过开放的接口获取，开发者进行解析即可基于此二次开发，但点云（pointcloud）是基于 raw 数据和相机内参进行计算得到的，无相应接口提供。\n\n\n## 案例：检测体积\n1. 简易介绍\n2. 源文件\n3. 效果图及视频\n![tof-a0757](assets/tof-7.png)\n\n## 案例：避障小车\n简易介绍说明\n![tof-a0756](assets/tof-6.jpg)\n暂未开源 待整理公开\n\n## 案例：检测人流\n简易介绍说明 \n视频：\n暂未开源 待整理公开\n\n\n## 二次开发：接入 ROS\n### 接入 ROS1\n\n1. 准备工作\n2. 安装运行\n我们提供了ros1 的接入功能包，用户需要在运行 ROS1 的系统上编译安装，链接：\n\n```bash\n#解压缩sipeed_tof_ms_a010.zip，并进入目录\ngit switch ros1 #切换到 ros1 分支\nsource /opt/ros/*/setup.sh\ncatkin_make\nsource devel/setup.sh\nrosrun sipeed_tof_cpp publisher\n```\n\n之后终端会持续刷新命令行\n\n3. RQT 查看帧率\n\n4. RVIZ 预览\n打开 rviz，左下角 Add，选择 By topic，选中 PointCloud2 或/ depth 下的 Image 添加。\n如下图，Display/Global Options/Fixed Frame 需要修改成 “tof”，才能正常显示点云。\n根据添加的内容，左侧会显示 Image，中间则显示点云。\n![tof-0759](assets/tof-9.png)\n\n\n### 接入 ROS2\n1. 准备工作\n2. 安装运行\n我们提供了ros2的接入功能包，用户需要在运行ROS2的系统上编译安装。\n\n``` bash\n\n#压缩sipeed_tof_cpp.zip，并进入目录\nsource /opt/ros/*/setup.sh\ncolcon build #如提示缺少colcon时需要sudo apt install python3-colcon-ros\nsource install/setup.sh\nros2 run sipeed_tof_cpp publisher\n#之后终端会持续刷新显示[sipeed_tof]: Publishing，即正常工作\n``` \n\n3. RQT 查看帧率\n![tof-07510](asstes/../assets/tof-10.jpg)\n\n4. RVIZ2 预览\n打开 rviz2，左下角 Add，选择 By topic，选中 PointCloud2 或 /depth、/intensity、/rgb 下的 Image 添加。如图，Display/Global Options/Fixed Frame 需要修改成 “tof”，才能正常显示点云。\n根据添加的内容，左侧会显示 Image，中间则显示点云。\n\n- 伪彩点云和 RGBD融合点云\n<html>\n  <img src=\"./assets/tof-11.jpg\" width=48%>\n  <img src=\"./assets/tof-12.jpg\" width=48%>\n</html>\n\n## 二次开发：SDK 支持\n\n### python SDK\n\n这是基于 `python 3` 软件开发工具包，MS-A075V 对外开发了 `http` 接口，我们可通过 `http` 请求获取到原生数据（包括深度图，`ir`图，`rgb` 图），为了方便用户理解数据包的结构及获取还有解码的相关逻辑，因此我们提供封装了 `http` 请求和原生数据的解码相关函数，用户基于此可进行二次开发。\n\n**SDK 获取方式**：\n**使用方式**：安装 jupyter 后连接相机打开我们提供的 SDK：toturial.py 即可。\n\n### 解包推流 \n\n1. 源文件\n2. 效果图及视频\n![tof-a0755](assets/tof-5.jpg)"}, "/hardware/zh/metasense/metasense-a010/metasense-a010.html": {"title": "MetaSense-A010", "content": "# MetaSense-A010\n\n|     时间      | 负责人 |   更新内容   |\n| :-----------: | :----: | :----------: |\n| 2022年8月12日 | yuexin | 初次编写文档 |\n\n\n## 产品概述\n\n产品图\n\n\nMetaSense-A010 是由 Sipeed 所推出的一款基于炬佑 100x100 TOF 模组+ BL702 极致性价比的 TOF 3D 传感器模组，最大支持 100x100 的分辨率和 8 位精度，并且自带的 240×135 的 LCD 显示屏可实时预览 color map 后的深度图。\n\n**资料汇总**\n\n硬件规格书：\n硬件接线图：\n\n## 产品开箱指南\n\n### 快速上手的准备工作\n\n这款设备采用串口协议对外提供接口和传输数据，物理接口对外提供了 type-c（虚拟串口）及 1.0mm 的 4pin 母座（UART）都能获取深度图数据，可自定义设置，用户可以使用任意 linux 板卡或者单片机进行二次开发。\n\n- 接线示例说明\n通过 type-c 接口连接电脑后，可以识别到 /dev/ttyUSBx（Linux）或COMx（Windows）。\n通过 usb2ttl 模块按照硬件引脚图连接4pin母座（硬件引脚图：屏幕正面朝上）。\n硬件引脚图\n![010-5](assets/a010-5.jpg)\n\n- COMTOOL 软件包安装\nWindows 系统：下载压缩包后解压安装即可。\nLinux 系统：不提供软件压缩包，需用户自行编译。\n\n注意：Win 7 及以下系统需装驱动，可自行前往 FTDI 官网下载。\n### 上电互动预览\n\n将设备通电后，可在设备上自带 LCD 屏实时预览 color map 后的深度伪彩图\n![010-3](assets/a010-3.jpg)\n\n### PC 预览和微调\n\n1. 使用 PC 预览前先安装 COMTOOL 上位机软件包\n2. 打开 COMTOOL 软件后，如果软件上方无 Graph 的话，可在右上角 + 号处添加 Graph 。\n3. 左侧选择 Port 和对应波特率（忽略 USB 串口，可任意选择高波特率），选择 MaixSenseLite 后点击 open 后再勾选下方 USB 即可接收大量数据。\n![010-1](assets/a010-1.jpg)\n4. 设定 Header 为 \\x00\\xFF 即可正确解析图像数据并观察到深度图，可以直观感受二维平面图像上的深度。\n![010-2](assets/a010-2.jpg)\n\n### 互动配置说明\n\nCOMTOOL 上位机的配置控件说明\n- Header 设置识别包头\n- RawCMD 用户可以手动发送指令（USB 和 UART 串口行为相同）\n- ISP 启动停止\n- LCD 显示自带屏的开启关闭\n- USB 串口传输深度图开启关闭\n- UART 串口传输深度图开启关闭\n- ANTIMMI 自动抗多机干扰开启关闭（易受干扰，关闭的效果都要更好些）\n- Binn 可下拉设置 BINNING，Baud 设置 UART 波特率\n- X，Y 设置坐标，D左侧多选框开启关闭显示 ( x，y ) 处据该摄像头的距离，位于 D 右侧\n- Unit 设置量化单位（16位量化到8位，比例缩小，设置太小会只能看清很近处的影像）\n- FPS 设置出图帧率（不宜过高，根据对接设备的性能合理设置即可，减小帧率可以减少传输数据量）\n- Ev 曝光间隙控制（最左代表 AE，其他是固定曝光时间）\n\n\n## 案例：3D 识别人脸\n\n1. 简易介绍\n![a010-6](assets/a010-6.jpg)\n\n## 案例：检测运动物体\n\n1. 简易介绍\n2. 视频\n\n## 案例：接入 MCU \n\n简单介绍\n![a010-7](assets/a010-7.jpg)\ndemo 暂未开源，待整理公开\n\n## 二次开发：接入 ROS\n### 接入 ROS1 \n\n1. 准备工作 \n2. 安装运行\n我们提供了 ROS1 的接入功能包，用户需要在运行 ROS1 的系统上编译安装。\n\n```bash\n\n#解压缩sipeed_tof_ms_a010.zip，并进入目录\ngit switch ros1 #切换到ros1分支\nsource /opt/ros/*/setup.sh\ncatkin_make\nsource devel/setup.sh\nrosrun sipeed_tof_ms_a010 a010_publisher _device:=\"/dev/ttyUSB0\"\n#之后终端会持续刷新显示[sipeed_tof]: Publishing，即正常工作\n\n```\n3. RQT 查看帧率\n4. RVIZ预览\n打开 rviz，左下角 Add，选择 By topic，选中 PointCloud2 或 /depth 下的 Image 添加。\n如下图，Display/Global Options/Fixed Frame 需要修改成 “tof”，才能正常显示点云。\n根据添加的内容，左侧会显示 Image，中间则显示点云。\n- 伪彩点云\n![a010-8](asstes/../assets/a010-8.jpg)\n\n\n### 接入 ROS2 \n\n1. 准备工作 \n2. 安装运行\n我们提供了ros2的接入功能包，用户需要在运行ROS2的系统上编译安装。\n\n```bash\n#解压缩 sipeed_tof_ms_a010.zip，并进入目录\nsource /opt/ros/*/setup.sh\ncolcon build #如提示缺少colcon时需要sudo apt install python3-colcon-ros\nros2 run sipeed_tof_ms_a010 publisher --ros-args -p device:=\"/dev/ttyUSB0\"\nsource install/setup.sh\n```\n#之后终端会持续刷新显示[sipeed_tof]: Publishing，即正常工作。\n3. RQT 查看帧率\n\n![a010-9](asstes/../assets/a010-9.jpg)\n\n4. RVIZ2 预览\n打开 rviz2，左下角 Add，选择 By topic，选中 PointCloud2或/depth 下的 Image 添加。如图，Display/Global Options/Fixed Frame 需要修改成 “tof”，才能正常显示点云,根据添加的内容，左侧会显示Image，中间则显示点云。\n- 伪彩点云\n![a010-10](assets/a010-10.jpg)\n\n## 二次开发：文本协议"}}